
INTERFACE ProcRegs {
    METHOD read1 ( Bit(RegFileSz) r1 ) Bit(DataSz)
    METHOD read2 ( Bit(RegFileSz) r2 ) Bit(DataSz)
    METHOD/Action write ( Bit(RegFileSz) r,Bit(DataSz) val )
}

MODULE ProcRegs {
    INTERFACE ProcRegs
    FIELD RegFile(Bit(RegFileSz), Bit(DataSz)) rf
    METHOD read1 ( Bit(RegFileSz) r1 ) Bit(DataSz) = (val) {
   LET Bit(DataSz) : val = rf.sub (r1 ) 
    }
    METHOD read2 ( Bit(RegFileSz) r2 ) Bit(DataSz) = (val) {
   LET Bit(DataSz) : val = rf.sub (r2 ) 
    }
    METHOD/Action write ( Bit(RegFileSz) r,Bit(DataSz) val ) {
           CALL/Action  : rf.upd( r,  val)
    }
}
STRUCT D2E {
    Bit(AddrSz) addr;
    OpArithK arithOp;
    Bit(RegFileSz) dst;
    OpK op;
    Bit(PgmSz) pc;
    Bit(RegFileSz) src1;
    Bit(RegFileSz) src2;
}
MODULE PipelinedDecoder {
    FIELD Bit(PgmSz) pc
    METHOD/Rule/Action decode {
       LET Bit(InstrSz) : inst = pgm.sub (pc ) 
       LET OpK : op = dec.getOp (inst ) 
       LET OpArithK : arithOp = dec.getArithOp (inst ) 
       LET Bit(RegFileSz) : src1 = dec.getSrc1 (inst ) 
       LET Bit(RegFileSz) : src2 = dec.getSrc2 (inst ) 
       LET Bit(RegFileSz) : dst = dec.getDst (inst ) 
       LET Bit(AddrSz) : addr = dec.getAddr (inst ) 
               LET D2E  : decoded = D2E { "addr" ::= (addr) ; "arithOp" ::= (arithOp) ; "dst" ::= (dst) ; "op" ::= (op) ; "pc" ::= (pc) ; "src1" ::= (src1) ; "src2" ::= (src2)  }
               CALL/Action  : d2eFifo.enq( decoded)
               STORE  : pc = (pc +  1) 
        }
}
INTERFACE Scoreboard {
    METHOD search1 ( Bit(RegFileSz) sidx ) Bit(1)
    METHOD search2 ( Bit(RegFileSz) sidx ) Bit(1)
    METHOD/Action insert ( Bit(RegFileSz) sidx )
    METHOD/Action remove ( Bit(RegFileSz) sidx )
}

MODULE Scoreboard {
    INTERFACE Scoreboard
    FIELD RegFile(Bit(RegFileSz), Bit(1)) sbFlags
    METHOD search1 ( Bit(RegFileSz) sidx ) Bit(1) = (flag) if (true) {
   LET Bit(1) : flag = sbFlags.sub (sidx ) 
    }
    METHOD search2 ( Bit(RegFileSz) sidx ) Bit(1) = (flag) {
   LET Bit(1) : flag = sbFlags.sub (sidx ) 
    }
    METHOD/Action insert ( Bit(RegFileSz) nidx ) {
           CALL/Action  : sbFlags.upd( nidx,  true)
    }
    METHOD/Action remove ( Bit(RegFileSz) nidx ) {
           CALL/Action  : sbFlags.upd( nidx,  false)
    }
}
STRUCT E2W {
    Bit(RegFileSz) idx;
    Bit(DataSz) val;
}
MODULE PipelinedExecuter {
    METHOD/Rule/Action executeArith if (((((d2e . op) == $$ (* isConstT *)opArith) && (!sb.search1 ((d2e . src1) ))) && (!sb.search2 ((d2e . src2) )))) {
       LET D2E : d2e = d2eFifo.first ( ) 
       LET D2E : d2e = d2eFifo.first ( ) 
               CALL/Action  : d2eFifo.deq()
               LET Bit(RegFileSz)  : src1 = (d2e . src1)
               LET Bit(RegFileSz)  : src2 = (d2e . src2)
               LET Bit(RegFileSz)  : dst = (d2e . dst)
               LET OpArithK  : arithOp = (d2e . arithOp)
       LET Bit(DataSz) : val1 = rf.read1 (src1 ) 
       LET Bit(DataSz) : val2 = rf.read2 (src2 ) 
       LET Bit(DataSz) : execVal = exec.execArith (arithOp, val1, val2 ) 
               CALL/Action  : sb.insert( dst)
               LET E2W  : e2w = E2W { "idx" ::= (dst) ; "val" ::= (execVal)  }
               CALL/Action  : e2wFifo.enq( e2w)
        }
    METHOD/Rule/Action executeLoad if (((((d2e . op) == $$ (* isConstT *)opLd) && (!sb.search1 ((d2e . src1) ))) && (!sb.search2 ((d2e . dst) )))) {
       LET D2E : d2e = d2eFifo.first ( ) 
       LET D2E : d2e = d2eFifo.first ( ) 
               CALL/Action  : d2eFifo.deq()
               LET Bit(RegFileSz)  : src1 = (d2e . src1)
               LET Bit(RegFileSz)  : dst = (d2e . dst)
               LET Bit(AddrSz)  : addr = (d2e . addr)
       LET Bit(DataSz) : val1 = rf.read1 (src1 ) 
               LET MemRq  : memrq = MemRq { "addr" ::= (addr) ; "data" ::= ( 0) ; "isLoad" ::= ( 1)  }
               CALL/Action  : mem.doMem( memrq)
               CALL/Action  : sb.insert( dst)
               LET E2W  : e2w = E2W { "idx" ::= (dst) ; "val" ::= (ldVal)  }
               CALL/Action  : e2wFifo.enq( e2w)
        }
    METHOD/Rule/Action executeStore if ((((d2e . op) == $$ (* isConstT *)opSt) && (!sb.search1 ((d2e . src1) )))) {
       LET D2E : d2e = d2eFifo.first ( ) 
       LET D2E : d2e = d2eFifo.first ( ) 
               CALL/Action  : d2eFifo.deq()
               LET Bit(RegFileSz)  : src1 = (d2e . src1)
               LET Bit(AddrSz)  : addr = (d2e . addr)
       LET Bit(DataSz) : val1 = rf.read1 (src1 ) 
               LET MemRq  : memrq = MemRq { "addr" ::= (addr) ; "data" ::= (val1) ; "isLoad" ::= ( 0)  }
               CALL/Action  : mem.doMem( memrq)
        }
    METHOD/Rule/Action executeToHost if ((((d2e . op) == $$ (* isConstT *)opTh) && (!sb.search1 ((d2e . src1) )))) {
       LET D2E : d2e = d2eFifo.first ( ) 
       LET D2E : d2e = d2eFifo.first ( ) 
               CALL/Action  : d2eFifo.deq()
               LET Bit(RegFileSz)  : src1 = (d2e . src1)
               LET Bit(AddrSz)  : addr = (d2e . addr)
       LET Bit(DataSz) : val1 = rf.read1 (src1 ) 
               CALL/Action  : toHost.toHost( val1)
        }
}
MODULE PipelinedWriteback {
    METHOD/Rule/Action writeback {
       LET E2W : e2w = e2wFifo.first ( ) 
               CALL/Action  : e2wFifo.deq()
               LET Bit(RegFileSz)  : idx = (e2w . idx)
               LET Bit(DataSz)  : val = (e2w . val)
               CALL/Action  : rf.write( idx,  val)
               CALL/Action  : sb.remove( idx)
        }
}
MODULE ProcImpl {
    FIELD FIFO(D2E) d2eFifo
    FIELD FIFO(E2W) e2wFifo
    FIELD Memory mem
    FIELD ProcRegs rf
    FIELD Scoreboard sb
    FIELD Empty decoder
    FIELD Empty executer
    FIELD Empty writeback
}
