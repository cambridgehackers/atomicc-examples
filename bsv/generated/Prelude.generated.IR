
4STRUCT Void { "$tag" JJ3:: (Bit 0) }).
5STRUCT  VoidValue {ty} : Void @# ty := { "$tag" ::= $$(0) }
INTERFACE Bit(sz) {
}

INTERFACE Empty {
}

INTERFACE Rule {
}

INTERFACE Rules {
}

MODULE addRules {
}
INTERFACE ReadOnly(a) {
    METHOD _read a
}

INTERFACE Reg(a) {
    METHOD _read a
    METHOD/Action _write ( a v )
}

INTERFACE Wire(a) {
    METHOD _read a
    METHOD/Action _write ( a v )
}

MODULE RegA(v,data_t) {
    INTERFACE Reg(data_t)
    METHOD/Action _write ( data_t v ) {
    }
}
MODULE RegU(data_t) {
    INTERFACE Reg(data_t)
    METHOD/Action _write ( data_t v ) {
    }
}
MODULE CReg(depth,v,data_t) {
    INTERFACE Reg(data_t)
}
MODULE DWire(defaultval,element_type) {
    INTERFACE Wire(element_type)
}
MODULE UnsafeDWire(defaultval,element_type) {
    INTERFACE Wire(element_type)
}
INTERFACE PulseWire {
    METHOD/Action send
    METHOD _read Bit(1)
}

MODULE PulseWire {
    INTERFACE PulseWire
}
4STRUCT Bool { "$tag" JJ3:: (Bit 1) }).
5STRUCT  False {ty} : Bool @# ty := { "$tag" ::= $$(0) }
5STRUCT  True {ty} : Bool @# ty := { "$tag" ::= $$(1) }
STRUCT Tuple2 (t1 EZZE: Type) (t2 EZZE: Type) {
    t1 tpl_1;
    t2 tpl_2;
}
STRUCT Tuple3 (t1 EZZE: Type) (t2 EZZE: Type) (t3 EZZE: Type) {
    t1 tpl_1;
    t2 tpl_2;
    t3 tpl_3;
}
STRUCT Tuple4 (t1 EZZE: Type) (t2 EZZE: Type) (t3 EZZE: Type) (t4 EZZE: Type) {
    t1 tpl_1;
    t2 tpl_2;
    t3 tpl_3;
    t4 tpl_4;
}
INTERFACE Empty {
}

MODULE errorM {
}
INTERFACE RWire(element_type) {
    METHOD/Action wset ( element_type datain )
    METHOD wget Maybe(element_type)
}

MODULE RWireSBR(element_type) {
    INTERFACE RWire(element_type)
}
MODULE UnsafeRWire(element_type) {
    INTERFACE RWire(element_type)
}
MODULE RWire(element_type) {
    INTERFACE RWire(element_type)
}
6STRUCT File {
    "$tag" :: (Bit 8);
    "FD" JJ5:: Bit(31);
    "InvalidFile" JJ5:: Void;
    "MCD" JJ5:: Bit(31)}).
