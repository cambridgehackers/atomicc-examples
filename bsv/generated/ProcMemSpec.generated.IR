
2Definition DataSz := 32.

2Definition AddrSz := 32.

2Definition InstrSz := 32.

2Definition NumRegs := 32.

2Definition RegFileSz := Nat.log2 NumRegs.

2Definition NumInstrs := 8.

2Definition PgmSz := Nat.log2 NumInstrs.

1Definition opArith : ConstT Bit(2) := ( 0)%kami.

1Definition opLd : ConstT Bit(2) := ( 1)%kami.

1Definition opSt : ConstT Bit(2) := ( 2)%kami.

1Definition opTh : ConstT Bit(2) := ( 3)%kami.

2Definition OpK := Bit(2).

1Definition opArithAdd : ConstT Bit(2) := ( 0)%kami.

1Definition opArithSub : ConstT Bit(2) := ( 1)%kami.

1Definition opArithMul : ConstT Bit(2) := ( 2)%kami.

1Definition opArithDiv : ConstT Bit(2) := ( 3)%kami.

2Definition OpArithK := Bit(2).

INTERFACE Decoder {
    METHOD isOp ( Bit(InstrSz) inst,OpK op ) Bit(1)
    METHOD getOp ( Bit(InstrSz) inst ) OpK
    METHOD getArithOp ( Bit(InstrSz) inst ) OpArithK
    METHOD getSrc1 ( Bit(InstrSz) inst ) Bit(RegFileSz)
    METHOD getSrc2 ( Bit(InstrSz) inst ) Bit(RegFileSz)
    METHOD getDst ( Bit(InstrSz) inst ) Bit(RegFileSz)
    METHOD getAddr ( Bit(InstrSz) inst ) Bit(AddrSz)
}

INTERFACE Executer {
    METHOD execArith ( OpArithK op,Bit(DataSz) val1,Bit(DataSz) val2 ) Bit(DataSz)
}

STRUCT MemRq {
    Bit(AddrSz) addr;
    Bit(DataSz) data;
    Bit(1) isLoad;
}

INTERFACE Memory {
    METHOD doMem ( MemRq req ) Bit(DataSz)
}

MODULE Memory {
    INTERFACE Memory
    FIELD RegFile(Bit(AddrSz), Bit(DataSz)) mem
    METHOD doMem ( MemRq req ) Bit(DataSz) = (#ZZplaceholder) {
   
        LET Bit(AddrSz) ( ((req . isLoad) ==  1) ) : addr = (req . addr)
        LET Bit(DataSz) : ldval = mem.sub (addr ) 
        LET Bit(AddrSz) ( !( ((req . isLoad) ==  1) ) ) : addr = (req . addr)
                LET Bit(DataSz) ( !( ((req . isLoad) ==  1) ) ) : newval = (req . data)
        LET Bit(DataSz) : placeholder = mem.sub (addr ) 
    }
}
INTERFACE ToHost {
    METHOD/Action toHost ( Bit(DataSz) val )
}

MODULE procSpec {
    FIELD Bit(PgmSz) pc
    FIELD RegFile(Bit(RegFileSz), Bit(DataSz)) rf
    FIELD Bit(2) stage
    FIELD OpK d2e_op
    FIELD OpArithK d2e_arithOp
    FIELD Bit(RegFileSz) d2e_src1
    FIELD Bit(RegFileSz) d2e_src2
    FIELD Bit(RegFileSz) d2e_dst
    FIELD Bit(AddrSz) d2e_addr
    FIELD Bit(RegFileSz) e2w_dst
    FIELD Bit(DataSz) e2w_val
    METHOD/Rule/Action doDecode if ((stage ==  0)) {
       LET Bit(InstrSz) : inst = pgm.sub (pc ) 
               STORE  : d2e_op = dec.getOp (inst ) 
               STORE  : d2esrc1 = dec.getSrc1 (inst ) 
               STORE  : d2e_src2 = dec.getSrc2 (inst ) 
               STORE  : d2e_dst = dec.getDst (inst ) 
               STORE  : stage =  1 
        }
    METHOD/Rule/Action doExec if ((stage ==  1)) {
       LET Bit(DataSz) : val1 = rf.sub (d2e_src1 ) 
       LET Bit(DataSz) : val2 = rf.sub (d2e_src2 ) 
       LET Bit(DataSz) : dval = exec.execArith (d2e_op, val1, val2 ) 
               STORE  : e2w_dst = d2e_dst 
               STORE  : e2w_val = dval 
               STORE  : stage =  2 
        }
    METHOD/Rule/Action doWriteBack if ((stage ==  2)) {
               STORE  : pc = (pc +  1) 
               STORE  : stage =  0 
        }
}
