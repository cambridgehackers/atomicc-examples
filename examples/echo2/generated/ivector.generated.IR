EMODULE l_struct_OC_NOCData {
    FIELD/Count 4  INTEGER_32 data
}
EMODULE l_struct_OC_ValuePair {
    FIELD INTEGER_32 a
    FIELD INTEGER_32 b
    FIELD/Count 20  INTEGER_32 c
}
EMODULE l_class_OC_IVectorTest {
    FIELD IVector ivector
}
EMODULE l_ainterface_OC_IVectorRequest {
    METHOD say__ENA ( l_struct_OC_ValuePair v )
}
EMODULE l_ainterface_OC_IndIF {
    METHOD heard__ENA ( l_struct_OC_ValuePair v )
}
EMODULE l_ainterface_OC_PipeIn {
    METHOD enq__ENA ( l_struct_OC_NOCData v )
}
EMODULE l_ainterface_OC_PipeIn_OC_0 {
    METHOD enq__ENA ( INTEGER_128 v )
}
EMODULE l_ainterface_OC_PipeIn_OC_3 {
    METHOD enq__ENA ( l_struct_OC_ValuePair v )
}
EMODULE l_ainterface_OC_PipeIn_OC_5 {
    METHOD enq__ENA ( INTEGER_704 v )
}
EMODULE l_ainterface_OC_PipeOut {
    METHOD deq__ENA
    METHOD first l_struct_OC_NOCData
}
EMODULE l_ainterface_OC_PipeOut_OC_1 {
    METHOD deq__ENA
    METHOD first INTEGER_128
}
EMODULE l_ainterface_OC_PipeOut_OC_4 {
    METHOD deq__ENA
    METHOD first l_struct_OC_ValuePair
}
EMODULE l_ainterface_OC_PipeOut_OC_6 {
    METHOD deq__ENA
    METHOD first INTEGER_704
}
EMODULE Fifo {
    INTERFACE l_ainterface_OC_PipeIn in
    INTERFACE l_ainterface_OC_PipeOut out
}
EMODULE Fifo_OC_10 {
    INTERFACE l_ainterface_OC_PipeIn_OC_5 in
    INTERFACE l_ainterface_OC_PipeOut_OC_6 out
}
EMODULE Fifo_OC_2 {
    INTERFACE l_ainterface_OC_PipeIn_OC_0 in
    INTERFACE l_ainterface_OC_PipeOut_OC_1 out
}
EMODULE Fifo_OC_7 {
    INTERFACE l_ainterface_OC_PipeIn_OC_3 in
    INTERFACE l_ainterface_OC_PipeOut_OC_4 out
}
EMODULE IVectorIndication {
    INTERFACE l_ainterface_OC_IndIF ind
}
MODULE Fifo1 {
    INTERFACE l_ainterface_OC_PipeIn in
    INTERFACE l_ainterface_OC_PipeOut out
    FIELD Fifo1Base fifo
    METHOD in$enq__ENA ( l_struct_OC_NOCData v ) {
        CALL/Action :fifo$in$enq__ENA{in$enq$v}
    }
    METHOD out$deq__ENA {
        CALL/Action :fifo$out$deq__ENA{}
    }
    METHOD out$first l_struct_OC_NOCData = ((out$first$retval)) {
        ALLOCA l_struct_OC_NOCData out$first$retval
        CALL :fifo$out$first{}
        LET INTEGER_128 :out$first$retval = fifo$out$first
    }
}
MODULE Fifo1Base {
    INTERFACE l_ainterface_OC_PipeIn_OC_0 in
    INTERFACE l_ainterface_OC_PipeOut_OC_1 out
    FIELD INTEGER_128 element
    FIELD INTEGER_1 full
    METHOD in$enq__ENA ( INTEGER_128 v ) if (((full) ^ (1))) {
        STORE :element = in$enq$v
        STORE :full = 1
    }
    METHOD out$deq__ENA if ((full)) {
        STORE :full = 0
    }
    METHOD out$first INTEGER_128 = ((element)) if ((full))
}
MODULE Fifo1Base_OC_9 {
    INTERFACE l_ainterface_OC_PipeIn_OC_5 in
    INTERFACE l_ainterface_OC_PipeOut_OC_6 out
    FIELD INTEGER_704 element
    FIELD INTEGER_1 full
    METHOD in$enq__ENA ( INTEGER_704 v ) if (((full) ^ (1))) {
        STORE :element = in$enq$v
        STORE :full = 1
    }
    METHOD out$deq__ENA if ((full)) {
        STORE :full = 0
    }
    METHOD out$first INTEGER_704 = ((element)) if ((full))
}
MODULE Fifo1_OC_8 {
    INTERFACE l_ainterface_OC_PipeIn_OC_3 in
    INTERFACE l_ainterface_OC_PipeOut_OC_4 out
    FIELD Fifo1Base_OC_9 fifo
    METHOD in$enq__ENA ( l_struct_OC_ValuePair v ) {
        CALL/Action :fifo$in$enq__ENA{in$enq$v}
    }
    METHOD out$deq__ENA {
        CALL/Action :fifo$out$deq__ENA{}
    }
    METHOD out$first l_struct_OC_ValuePair = ((out$first$retval)) {
        ALLOCA l_struct_OC_ValuePair out$first$retval
        CALL :fifo$out$first{}
        LET INTEGER_704 :out$first$retval = fifo$out$first
    }
}
MODULE FifoPong {
    INTERFACE l_ainterface_OC_PipeIn_OC_3 in
    INTERFACE l_ainterface_OC_PipeOut_OC_4 out
    FIELD Fifo1_OC_8 element1
    FIELD Fifo1_OC_8 element2
    FIELD INTEGER_1 pong
    METHOD in$enq__ENA ( l_struct_OC_ValuePair v ) {
        CALL/Action (pong):element2$in$enq__ENA{in$enq$v}
        CALL/Action ((pong) ^ 1):element1$in$enq__ENA{in$enq$v}
    }
    METHOD out$deq__ENA {
        CALL/Action (pong):element2$out$deq__ENA{}
        CALL/Action ((pong) ^ 1):element1$out$deq__ENA{}
        STORE :pong = (pong) ^ (1)
    }
    METHOD out$first l_struct_OC_ValuePair = ((out$first$retval)) {
        ALLOCA l_struct_OC_ValuePair out$first$retval
        CALL (pong):element2$out$first{}
        LET l_struct_OC_ValuePair (pong):out$first$retval = element2$out$first
        CALL ((pong) ^ 1):element1$out$first{}
        LET l_struct_OC_ValuePair ((pong) ^ 1):out$first$retval = element1$out$first
    }
}
MODULE IVector {
    INTERFACE l_ainterface_OC_IVectorRequest request
    FIELD FifoPong fifo
    INTERFACE/Ptr l_ainterface_OC_IndIF ind
    METHOD/Rule RULErespond__ENA {
        ALLOCA l_struct_OC_ValuePair RULErespond__ENA$agg_2e_tmp
        CALL/Action :fifo$out$deq__ENA{}
        CALL :fifo$out$first{}
        LET l_struct_OC_ValuePair :RULErespond__ENA$agg_2e_tmp = fifo$out$first
        CALL/Action :ind$heard__ENA{RULErespond__ENA$agg_2e_tmp}
    }
    METHOD request$say__ENA ( l_struct_OC_ValuePair v ) {
        ALLOCA l_struct_OC_ValuePair request$say__ENA$agg_2e_tmp
        LET l_struct_OC_ValuePair :request$say__ENA$agg_2e_tmp = request$say$v
        CALL/Action :fifo$in$enq__ENA{request$say__ENA$agg_2e_tmp}
    }
}
MODULE MuxPipe {
    INTERFACE l_ainterface_OC_PipeIn in
    INTERFACE l_ainterface_OC_PipeIn forward
    INTERFACE/Ptr l_ainterface_OC_PipeIn out
    FIELD Fifo1 forwardFifo
    METHOD/Rule RULEfifoRule__ENA {
        ALLOCA l_struct_OC_NOCData RULEfifoRule__ENA$agg_2e_tmp
        CALL :forwardFifo$out$first{}
        LET l_struct_OC_NOCData :RULEfifoRule__ENA$agg_2e_tmp = forwardFifo$out$first
        CALL/Action :out$enq__ENA{RULEfifoRule__ENA$agg_2e_tmp}
        CALL/Action :forwardFifo$out$deq__ENA{}
    }
    METHOD forward$enq__ENA ( l_struct_OC_NOCData v ) {
        CALL/Action :forwardFifo$in$enq__ENA{forward$enq$v}
    }
    METHOD in$enq__ENA ( l_struct_OC_NOCData v ) {
        CALL/Action :out$enq__ENA{in$enq$v}
    }
}
