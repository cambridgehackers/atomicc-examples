STRUCT NOCDataH  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    FIELD Bit(16) length
    FIELD Bit(128) data
}
STRUCT ValuePair  {
    FILE ivector_OC_cpp
    FIELD Bit(32) a
    FIELD Bit(32) b
    FIELD/Count 20  Bit(32) c
}
STRUCT IVectorTest  {
    FILE ivector_OC_cpp
    FIELD IVector ivector
}
INTERFACE Fifo(width=704)  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_fifo_OC_h
    INTERFACE PipeIn(width=704) in
    INTERFACE PipeOut(width=704) out
}
INTERFACE IVectorIFC  {
    FILE ivector_OC_cpp
    INTERFACE IVectorRequest request
    INTERFACE/Ptr IVectorIndication indication
}
INTERFACE IVectorIndication  {
    FILE ivector_OC_cpp
    METHOD/Action heard__ENA ( ValuePair v )
}
INTERFACE IVectorRequest  {
    FILE ivector_OC_cpp
    METHOD/Action say__ENA ( ValuePair v )
}
INTERFACE MuxPipeIfc  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_mux_OC_h
    INTERFACE PipeIn(width=144) in
    INTERFACE PipeIn(width=144) forward
    INTERFACE/Ptr PipeIn(width=144) out
}
INTERFACE PipeIn(width=32)  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    METHOD/Action enq__ENA ( Bit(width) v )
}
INTERFACE PipeOut(width=704)  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    METHOD/Action deq__ENA
    METHOD first Bit(width)
}
EMODULE Dummy PipeIn(width=32) {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
}
EMODULE Fifo1Base(width=704) Fifo(width=704) {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_fifo_OC_h
}
EMODULE MuxPipe MuxPipeIfc {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_mux_OC_h
}
MODULE Fifo1(width=704) Fifo(width=704) {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_fifo_OC_h
    FIELD Fifo1Base(width=704) fifo
    METHOD/Action in$enq__ENA ( ValuePair v ) {
        CALL/Action :fifo$in$enq__ENA{in$enq$v}
    }
    METHOD/Action out$deq__ENA {
        CALL/Action :fifo$out$deq__ENA{}
    }
    METHOD out$first ValuePair = ((fifo$out$first)) {
        CALL :fifo$out$first{}
    }
}
MODULE FifoPong(width=704) Fifo(width=704) {
    FILE ivector_OC_cpp
    FIELD Fifo1(width=704) element1
    FIELD Fifo1(width=704) element2
    FIELD Bit(1) pong
    METHOD/Action in$enq__ENA ( ValuePair v ) {
        CALL/Action (pong):element2$in$enq__ENA{in$enq$v}
        CALL/Action !(pong):element1$in$enq__ENA{in$enq$v}
    }
    METHOD/Action out$deq__ENA {
        CALL/Action (pong):element2$out$deq__ENA{}
        CALL/Action !(pong):element1$out$deq__ENA{}
        STORE :pong = (pong) ^ (1)
    }
    METHOD out$first ValuePair = ((_out$first$retval)) {
        ALLOCA ValuePair _out$first$retval
        CALL (pong):element2$out$first{}
        LET ValuePair (pong):_out$first$retval = element2$out$first
        CALL !(pong):element1$out$first{}
        LET ValuePair !(pong):_out$first$retval = element1$out$first
    }
}
MODULE IVector IVectorIFC {
    FILE ivector_OC_cpp
    FIELD FifoPong(width=704) fifo
    METHOD/Action request$say__ENA ( ValuePair v ) {
        ALLOCA ValuePair _request$say$agg_2e_tmp
        LET ValuePair :_request$say$agg_2e_tmp = request$say$v
        CALL/Action :fifo$in$enq__ENA{_request$say$agg_2e_tmp}
    }
    METHOD/Rule/Action RULE$respond__ENA {
        ALLOCA ValuePair _RULE$respond$agg_2e_tmp
        CALL/Action :fifo$out$deq__ENA{}
        CALL :fifo$out$first{}
        LET ValuePair :_RULE$respond$agg_2e_tmp = fifo$out$first
        CALL/Action :indication$heard__ENA{_RULE$respond$agg_2e_tmp}
    }
}
