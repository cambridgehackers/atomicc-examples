EMODULE l_struct_OC_ValuePair (
    FIELD a INTEGER_32
    FIELD b INTEGER_32
    FIELD/Array 20  c INTEGER_32
)
EMODULE l_ainterface_OC_IVectorRequest (
    METHOD say__ENA (
        PARAM v l_struct_OC_ValuePair
    )
)
EMODULE l_ainterface_OC_IndIF (
    METHOD heard__ENA (
        PARAM v l_struct_OC_ValuePair
    )
)
EMODULE l_ainterface_OC_PipeIn (
    METHOD enq__ENA (
        PARAM v INTEGER_32
    )
)
EMODULE l_ainterface_OC_PipeIn_OC_1 (
    METHOD enq__ENA (
        PARAM v l_struct_OC_ValuePair
    )
)
EMODULE l_ainterface_OC_PipeOut (
    METHOD deq__ENA
    METHOD first INTEGER_32
)
EMODULE l_ainterface_OC_PipeOut_OC_2 (
    METHOD deq__ENA
    METHOD first l_struct_OC_ValuePair
)
EMODULE l_module_OC_Fifo_OC_0 (
    FIELD in l_ainterface_OC_PipeIn_OC_1
    FIELD out l_ainterface_OC_PipeOut_OC_2
    METHOD in$enq__ENA (
        PARAM v l_struct_OC_ValuePair
    )
    METHOD out$deq__ENA
    METHOD out$first l_struct_OC_ValuePair
)
MODULE l_module_OC_Fifo1_OC_3 (
    FIELD element l_struct_OC_ValuePair
    FIELD full INTEGER_8
    METHOD in$enq__ENA (
        PARAM v l_struct_OC_ValuePair
        STORE :element = in$enq$v
        STORE :full = 1
    )
    METHOD in$enq__RDY INTEGER_1 = (full ^ 1)
    METHOD out$deq__ENA (
        STORE :full = 0
    )
    METHOD out$deq__RDY INTEGER_1 = (full)
    METHOD out$first l_struct_OC_ValuePair = (element)
    METHOD out$first__RDY INTEGER_1 = (full)
)
MODULE l_module_OC_FifoPong (
    FIELD element1 l_module_OC_Fifo1_OC_3
    FIELD element2 l_module_OC_Fifo1_OC_3
    FIELD pong INTEGER_8
    METHOD in$enq__ENA (
        PARAM v l_struct_OC_ValuePair
        CALL/Action (pong):element2$in$enq__ENA{in$enq$v}
        CALL/Action (pong ^ 1):element1$in$enq__ENA{in$enq$v}
    )
    METHOD out$deq__ENA (
        CALL/Action (pong):element2$out$deq__ENA{}
        CALL/Action (pong ^ 1):element1$out$deq__ENA{}
        STORE :pong = pong ^ 1
    )
    METHOD out$first l_struct_OC_ValuePair = (out$first$retval) (
        CALL (pong):element2$out$first{}
        LET l_struct_OC_ValuePair (pong):out$first$retval = element2$out$first{}
        CALL (pong ^ 1):element1$out$first{}
        LET l_struct_OC_ValuePair (pong ^ 1):out$first$retval = element1$out$first{}
        ALLOCA out$first$retval l_struct_OC_ValuePair
    )
)
MODULE l_module_OC_IVector (
    FIELD request l_ainterface_OC_IVectorRequest
    FIELD fifo l_module_OC_FifoPong
    OUTCALL ind l_ainterface_OC_IndIF
    METHOD request$say__ENA (
        PARAM v l_struct_OC_ValuePair
        CALL/Action :fifo$in$enq__ENA{request$say$v}
    )
    METHOD/Rule respond__ENA (
        CALL/Action :fifo$out$deq__ENA{}
        CALL :fifo$out$first{}
        LET l_struct_OC_ValuePair :respond__ENA$agg_2e_tmp = fifo$out$first{}
        CALL/Action :ind$heard__ENA{respond__ENA$agg_2e_tmp}
        ALLOCA respond__ENA$agg_2e_tmp l_struct_OC_ValuePair
    )
)
EMODULE l_class_OC_IVectorTest (
    FIELD ivector l_module_OC_IVector
)
EMODULE l_module_OC_Fifo (
    FIELD in l_ainterface_OC_PipeIn
    FIELD out l_ainterface_OC_PipeOut
    METHOD in$enq__ENA (
        PARAM v INTEGER_32
    )
    METHOD out$deq__ENA
    METHOD out$first INTEGER_32
)
MODULE l_module_OC_Fifo1 (
    FIELD element INTEGER_32
    FIELD full INTEGER_8
    METHOD in$enq__ENA (
        PARAM v INTEGER_32
        STORE :element = in$enq$v
        STORE :full = 1
    )
    METHOD in$enq__RDY INTEGER_1 = (full ^ 1)
    METHOD out$deq__ENA (
        STORE :full = 0
    )
    METHOD out$deq__RDY INTEGER_1 = (full)
    METHOD out$first INTEGER_32 = (element)
    METHOD out$first__RDY INTEGER_1 = (full)
)
MODULE l_module_OC_IVectorIndication (
    FIELD ind l_ainterface_OC_IndIF
    METHOD ind$heard__ENA (
        PARAM v l_struct_OC_ValuePair
        LET l_struct_OC_ValuePair :ind$heard__ENA$v_2e_addr = ind$heard$v
        ALLOCA ind$heard__ENA$v_2e_addr l_struct_OC_ValuePair
    )
)
