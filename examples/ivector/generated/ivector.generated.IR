STRUCT NOCDataH  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    FIELD Bit(16) length
    FIELD Bit(128) data
}
STRUCT ValuePair  {
    FILE ivector_OC_cpp
    FIELD Bit(32) a
    FIELD Bit(32) b
    FIELD Bit(32) c
}
STRUCT IVectorTest  {
    FILE ivector_OC_cpp
    FIELD IVector ivector
}
INTERFACE Fifo  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    INTERFACE PipeIn_OC_2 in
    INTERFACE PipeOut out
}
INTERFACE Fifo_OC_3  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    INTERFACE PipeIn_OC_4 in
    INTERFACE PipeOut_OC_5 out
}
INTERFACE FunnelBaseIfc(funnelWidth=99,width=32)  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    INTERFACE/Count funnelWidth  PipeIn_OC_0 in
    INTERFACE/Ptr PipeIn_OC_1 out
}
INTERFACE IVectorIFC  {
    FILE ivector_OC_cpp
    INTERFACE IVectorRequest in
    INTERFACE/Ptr IVectorIndication out
}
INTERFACE IVectorIndication  {
    FILE ivector_OC_cpp
    METHOD/Action heard__ENA ( Bit(32) meth , Bit(32) v )
}
INTERFACE IVectorRequest  {
    FILE ivector_OC_cpp
    METHOD/Action say__ENA ( Bit(32) meth , Bit(32) v )
}
INTERFACE MuxPipeIfc  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_mux_OC_h
    INTERFACE PipeIn in
    INTERFACE PipeIn forward
    INTERFACE/Ptr PipeIn out
}
INTERFACE PipeIn  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    METHOD/Action enq__ENA ( NOCDataH v )
}
INTERFACE PipeIn_OC_0  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    METHOD/Action enq__ENA ( Bit(32) v )
}
INTERFACE PipeIn_OC_1  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    METHOD/Action enq__ENA ( Bit(32) v )
}
INTERFACE PipeIn_OC_2  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    METHOD/Action enq__ENA ( ValuePair v )
}
INTERFACE PipeIn_OC_4  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    METHOD/Action enq__ENA ( Bit(96) v )
}
INTERFACE PipeOut  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    METHOD/Action deq__ENA
    METHOD first ValuePair
}
INTERFACE PipeOut_OC_5  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    METHOD/Action deq__ENA
    METHOD first Bit(96)
}
INTERFACE l_topIfc  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    INTERFACE PipeIn request
    INTERFACE/Ptr PipeIn indication
}
EMODULE Fifo1Base(width=96) Fifo_OC_3 {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_fifo_OC_h
}
EMODULE FunnelBufferedBase(funnelWidth=99,width=32) FunnelBaseIfc(funnelWidth=99,width=32) {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
}
EMODULE IVectorInd IVectorIndication {
    FILE ivector_OC_cpp
}
EMODULE MuxPipe MuxPipeIfc {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_mux_OC_h
}
EMODULE l_top l_topIfc {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
}
MODULE Fifo1 Fifo {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_fifo_OC_h
    FIELD Fifo1Base(width=96) fifo
    METHOD/Action in$enq__ENA ( ValuePair v ) {
        CALL/Action :fifo$in$enq__ENA{in$enq$v}
    }
    METHOD/Action out$deq__ENA {
        CALL/Action :fifo$out$deq__ENA{}
    }
    METHOD out$first ValuePair = ((out$first$retval)) {
        ALLOCA ValuePair out$first$retval
        CALL :fifo$out$first{}
        LET Bit(96) :out$first$retval = fifo$out$first
    }
}
MODULE FifoPong Fifo {
    FILE ivector_OC_cpp
    FIELD Fifo1 element1
    FIELD Fifo1 element2
    FIELD Bit(1) pong
    METHOD/Action in$enq__ENA ( ValuePair v ) {
        CALL/Action (pong):element2$in$enq__ENA{in$enq$v}
        CALL/Action !(pong):element1$in$enq__ENA{in$enq$v}
    }
    METHOD/Action out$deq__ENA {
        CALL/Action (pong):element2$out$deq__ENA{}
        CALL/Action !(pong):element1$out$deq__ENA{}
        STORE :pong = (pong) ^ (1)
    }
    METHOD out$first ValuePair = ((out$first$retval)) {
        ALLOCA ValuePair out$first$retval
        CALL (pong):element2$out$first{}
        LET ValuePair (pong):out$first$retval = element2$out$first
        CALL !(pong):element1$out$first{}
        LET ValuePair !(pong):out$first$retval = element1$out$first
    }
}
MODULE IVector IVectorIFC {
    FILE ivector_OC_cpp
    FIELD/Count 10  FifoPong fifo
    FIELD Bit(32) vsize
    METHOD/Action in$say__ENA ( Bit(32) meth , Bit(32) v ) {
        ALLOCA ValuePair in$say$agg_2e_tmp
        ALLOCA ValuePair in$say$temp
        LET Bit(32) :in$say$temp$b = in$say$v
        LET ValuePair :in$say$agg_2e_tmp = in$say$temp
        CALL/Action :fifo$in[in$say$meth].enq__ENA{in$say$agg_2e_tmp}
    }
    METHOD/Rule/Action RULE$respond_rule_0__ENA {
        ALLOCA Bit(32) RULE$respond_rule_0$i
        ALLOCA ValuePair RULE$respond_rule_0$temp
        CALL :fifo$out[0].first{}
        LET ValuePair :RULE$respond_rule_0$temp = fifo$out[0].first
        CALL/Action :fifo$out[0].deq__ENA{}
        CALL/Action :out$heard__ENA{0,RULE$respond_rule_0$temp$b}
    }
    METHOD/Rule/Action RULE$respond_rule_1__ENA {
        ALLOCA Bit(32) RULE$respond_rule_1$i
        ALLOCA ValuePair RULE$respond_rule_1$temp
        CALL :fifo$out[1].first{}
        LET ValuePair :RULE$respond_rule_1$temp = fifo$out[1].first
        CALL/Action :fifo$out[1].deq__ENA{}
        CALL/Action :out$heard__ENA{1,RULE$respond_rule_1$temp$b}
    }
    METHOD/Rule/Action RULE$respond_rule_2__ENA {
        ALLOCA Bit(32) RULE$respond_rule_2$i
        ALLOCA ValuePair RULE$respond_rule_2$temp
        CALL :fifo$out[2].first{}
        LET ValuePair :RULE$respond_rule_2$temp = fifo$out[2].first
        CALL/Action :fifo$out[2].deq__ENA{}
        CALL/Action :out$heard__ENA{2,RULE$respond_rule_2$temp$b}
    }
    METHOD/Rule/Action RULE$respond_rule_3__ENA {
        ALLOCA Bit(32) RULE$respond_rule_3$i
        ALLOCA ValuePair RULE$respond_rule_3$temp
        CALL :fifo$out[3].first{}
        LET ValuePair :RULE$respond_rule_3$temp = fifo$out[3].first
        CALL/Action :fifo$out[3].deq__ENA{}
        CALL/Action :out$heard__ENA{3,RULE$respond_rule_3$temp$b}
    }
    METHOD/Rule/Action RULE$respond_rule_4__ENA {
        ALLOCA Bit(32) RULE$respond_rule_4$i
        ALLOCA ValuePair RULE$respond_rule_4$temp
        CALL :fifo$out[4].first{}
        LET ValuePair :RULE$respond_rule_4$temp = fifo$out[4].first
        CALL/Action :fifo$out[4].deq__ENA{}
        CALL/Action :out$heard__ENA{4,RULE$respond_rule_4$temp$b}
    }
    METHOD/Rule/Action RULE$respond_rule_5__ENA {
        ALLOCA Bit(32) RULE$respond_rule_5$i
        ALLOCA ValuePair RULE$respond_rule_5$temp
        CALL :fifo$out[5].first{}
        LET ValuePair :RULE$respond_rule_5$temp = fifo$out[5].first
        CALL/Action :fifo$out[5].deq__ENA{}
        CALL/Action :out$heard__ENA{5,RULE$respond_rule_5$temp$b}
    }
    METHOD/Rule/Action RULE$respond_rule_6__ENA {
        ALLOCA Bit(32) RULE$respond_rule_6$i
        ALLOCA ValuePair RULE$respond_rule_6$temp
        CALL :fifo$out[6].first{}
        LET ValuePair :RULE$respond_rule_6$temp = fifo$out[6].first
        CALL/Action :fifo$out[6].deq__ENA{}
        CALL/Action :out$heard__ENA{6,RULE$respond_rule_6$temp$b}
    }
    METHOD/Rule/Action RULE$respond_rule_7__ENA {
        ALLOCA Bit(32) RULE$respond_rule_7$i
        ALLOCA ValuePair RULE$respond_rule_7$temp
        CALL :fifo$out[7].first{}
        LET ValuePair :RULE$respond_rule_7$temp = fifo$out[7].first
        CALL/Action :fifo$out[7].deq__ENA{}
        CALL/Action :out$heard__ENA{7,RULE$respond_rule_7$temp$b}
    }
    METHOD/Rule/Action RULE$respond_rule_8__ENA {
        ALLOCA Bit(32) RULE$respond_rule_8$i
        ALLOCA ValuePair RULE$respond_rule_8$temp
        CALL :fifo$out[8].first{}
        LET ValuePair :RULE$respond_rule_8$temp = fifo$out[8].first
        CALL/Action :fifo$out[8].deq__ENA{}
        CALL/Action :out$heard__ENA{8,RULE$respond_rule_8$temp$b}
    }
    METHOD/Rule/Action RULE$respond_rule_9__ENA {
        ALLOCA Bit(32) RULE$respond_rule_9$i
        ALLOCA ValuePair RULE$respond_rule_9$temp
        CALL :fifo$out[9].first{}
        LET ValuePair :RULE$respond_rule_9$temp = fifo$out[9].first
        CALL/Action :fifo$out[9].deq__ENA{}
        CALL/Action :out$heard__ENA{9,RULE$respond_rule_9$temp$b}
    }
}
