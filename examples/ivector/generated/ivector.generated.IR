STRUCT NOCDataH  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    FIELD Bit(16) length
    FIELD Bit(128) data
}
STRUCT ValuePair  {
    FILE ivector_OC_cpp
    FIELD Bit(32) a
    FIELD Bit(32) b
    FIELD Bit(32) c
}
STRUCT IVectorTest  {
    FILE ivector_OC_cpp
    FIELD IVector ivector
}
INTERFACE Fifo(width=96)  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_fifo_OC_h
    INTERFACE PipeIn(width=96) in
    INTERFACE PipeOut(width=96) out
}
INTERFACE IVectorIFC  {
    FILE ivector_OC_cpp
    INTERFACE IVectorRequest in
    INTERFACE/Ptr IVectorIndication out
}
INTERFACE IVectorIndication  {
    FILE ivector_OC_cpp
    METHOD/Action heard__ENA ( Bit(32) meth , Bit(32) v )
}
INTERFACE IVectorRequest  {
    FILE ivector_OC_cpp
    METHOD/Action say__ENA ( Bit(32) meth , Bit(32) v )
}
INTERFACE MuxPipeIfc  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_mux_OC_h
    INTERFACE PipeIn(width=144) in
    INTERFACE PipeIn(width=144) forward
    INTERFACE/Ptr PipeIn(width=144) out
}
INTERFACE PipeIn(width=32)  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    METHOD/Action enq__ENA ( Bit(width) v )
}
INTERFACE PipeOut(width=96)  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    METHOD/Action deq__ENA
    METHOD first Bit(width)
}
INTERFACE SelectIndexIfc(funnelWidth=20,width=14)  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    FIELD Bit(14) out
    FIELD/Ptr/Count funnelWidth  Bit(14) in
    FIELD Bit(5) index
}
EMODULE Dummy PipeIn(width=32) {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
}
EMODULE Fifo1Base(width=96) Fifo(width=96) {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_fifo_OC_h
}
EMODULE IVectorInd IVectorIndication {
    FILE ivector_OC_cpp
}
EMODULE MuxPipe MuxPipeIfc {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_mux_OC_h
}
EMODULE/Verilog SelectIndex(funnelWidth=20,width=14) SelectIndexIfc(funnelWidth=20,width=14) {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
}
MODULE Fifo1(width=96) Fifo(width=96) {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_fifo_OC_h
    FIELD Fifo1Base(width=96) fifo
    METHOD/Action in$enq__ENA ( ValuePair v ) {
        CALL/Action :fifo$in$enq__ENA{in$enq$v}
    }
    METHOD/Action out$deq__ENA {
        CALL/Action :fifo$out$deq__ENA{}
    }
    METHOD out$first ValuePair = ((fifo$out$first)) {
        CALL :fifo$out$first{}
    }
}
MODULE FifoPong(width=96) Fifo(width=96) {
    FILE ivector_OC_cpp
    FIELD Fifo1(width=96) element1
    FIELD Fifo1(width=96) element2
    FIELD Bit(1) pong
    METHOD/Action in$enq__ENA ( ValuePair v ) {
        CALL/Action (pong):element2$in$enq__ENA{in$enq$v}
        CALL/Action !(pong):element1$in$enq__ENA{in$enq$v}
    }
    METHOD/Action out$deq__ENA {
        CALL/Action (pong):element2$out$deq__ENA{}
        CALL/Action !(pong):element1$out$deq__ENA{}
        STORE :pong = (pong) ^ (1)
    }
    METHOD out$first ValuePair = ((_out$first$retval)) {
        ALLOCA ValuePair _out$first$retval
        CALL (pong):element2$out$first{}
        LET ValuePair (pong):_out$first$retval = element2$out$first
        CALL !(pong):element1$out$first{}
        LET ValuePair !(pong):_out$first$retval = element1$out$first
    }
}
MODULE IVector IVectorIFC {
    FILE ivector_OC_cpp
    FIELD/Count 10  FifoPong(width=96) fifo
    FIELD Bit(32) vsize
    METHOD/Action in$say__ENA ( Bit(32) meth , Bit(32) v ) {
        ALLOCA ValuePair _in$say$agg_2e_tmp
        ALLOCA ValuePair _in$say$temp
        LET Bit(32) :_in$say$temp.b = in$say$v
        LET ValuePair :_in$say$agg_2e_tmp = _in$say$temp
        CALL/Action :fifo$in[in$say$meth].enq__ENA{_in$say$agg_2e_tmp}
    }
    METHOD/Rule/Action RULE$respond_rule_0__ENA {
        ALLOCA Bit(32) _RULE$respond_rule_0$i
        ALLOCA ValuePair _RULE$respond_rule_0$temp
        CALL :fifo$out[0].first{}
        LET ValuePair :_RULE$respond_rule_0$temp = fifo$out[0].first
        CALL/Action :fifo$out[0].deq__ENA{}
        CALL/Action :out$heard__ENA{0,_RULE$respond_rule_0$temp.b}
    }
    METHOD/Rule/Action RULE$respond_rule_1__ENA {
        ALLOCA Bit(32) _RULE$respond_rule_1$i
        ALLOCA ValuePair _RULE$respond_rule_1$temp
        CALL :fifo$out[1].first{}
        LET ValuePair :_RULE$respond_rule_1$temp = fifo$out[1].first
        CALL/Action :fifo$out[1].deq__ENA{}
        CALL/Action :out$heard__ENA{1,_RULE$respond_rule_1$temp.b}
    }
    METHOD/Rule/Action RULE$respond_rule_2__ENA {
        ALLOCA Bit(32) _RULE$respond_rule_2$i
        ALLOCA ValuePair _RULE$respond_rule_2$temp
        CALL :fifo$out[2].first{}
        LET ValuePair :_RULE$respond_rule_2$temp = fifo$out[2].first
        CALL/Action :fifo$out[2].deq__ENA{}
        CALL/Action :out$heard__ENA{2,_RULE$respond_rule_2$temp.b}
    }
    METHOD/Rule/Action RULE$respond_rule_3__ENA {
        ALLOCA Bit(32) _RULE$respond_rule_3$i
        ALLOCA ValuePair _RULE$respond_rule_3$temp
        CALL :fifo$out[3].first{}
        LET ValuePair :_RULE$respond_rule_3$temp = fifo$out[3].first
        CALL/Action :fifo$out[3].deq__ENA{}
        CALL/Action :out$heard__ENA{3,_RULE$respond_rule_3$temp.b}
    }
    METHOD/Rule/Action RULE$respond_rule_4__ENA {
        ALLOCA Bit(32) _RULE$respond_rule_4$i
        ALLOCA ValuePair _RULE$respond_rule_4$temp
        CALL :fifo$out[4].first{}
        LET ValuePair :_RULE$respond_rule_4$temp = fifo$out[4].first
        CALL/Action :fifo$out[4].deq__ENA{}
        CALL/Action :out$heard__ENA{4,_RULE$respond_rule_4$temp.b}
    }
    METHOD/Rule/Action RULE$respond_rule_5__ENA {
        ALLOCA Bit(32) _RULE$respond_rule_5$i
        ALLOCA ValuePair _RULE$respond_rule_5$temp
        CALL :fifo$out[5].first{}
        LET ValuePair :_RULE$respond_rule_5$temp = fifo$out[5].first
        CALL/Action :fifo$out[5].deq__ENA{}
        CALL/Action :out$heard__ENA{5,_RULE$respond_rule_5$temp.b}
    }
    METHOD/Rule/Action RULE$respond_rule_6__ENA {
        ALLOCA Bit(32) _RULE$respond_rule_6$i
        ALLOCA ValuePair _RULE$respond_rule_6$temp
        CALL :fifo$out[6].first{}
        LET ValuePair :_RULE$respond_rule_6$temp = fifo$out[6].first
        CALL/Action :fifo$out[6].deq__ENA{}
        CALL/Action :out$heard__ENA{6,_RULE$respond_rule_6$temp.b}
    }
    METHOD/Rule/Action RULE$respond_rule_7__ENA {
        ALLOCA Bit(32) _RULE$respond_rule_7$i
        ALLOCA ValuePair _RULE$respond_rule_7$temp
        CALL :fifo$out[7].first{}
        LET ValuePair :_RULE$respond_rule_7$temp = fifo$out[7].first
        CALL/Action :fifo$out[7].deq__ENA{}
        CALL/Action :out$heard__ENA{7,_RULE$respond_rule_7$temp.b}
    }
    METHOD/Rule/Action RULE$respond_rule_8__ENA {
        ALLOCA Bit(32) _RULE$respond_rule_8$i
        ALLOCA ValuePair _RULE$respond_rule_8$temp
        CALL :fifo$out[8].first{}
        LET ValuePair :_RULE$respond_rule_8$temp = fifo$out[8].first
        CALL/Action :fifo$out[8].deq__ENA{}
        CALL/Action :out$heard__ENA{8,_RULE$respond_rule_8$temp.b}
    }
    METHOD/Rule/Action RULE$respond_rule_9__ENA {
        ALLOCA Bit(32) _RULE$respond_rule_9$i
        ALLOCA ValuePair _RULE$respond_rule_9$temp
        CALL :fifo$out[9].first{}
        LET ValuePair :_RULE$respond_rule_9$temp = fifo$out[9].first
        CALL/Action :fifo$out[9].deq__ENA{}
        CALL/Action :out$heard__ENA{9,_RULE$respond_rule_9$temp.b}
    }
}
