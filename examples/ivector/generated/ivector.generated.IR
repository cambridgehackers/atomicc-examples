EMODULE l_struct_OC_NOCData {
    FIELD/Count 4  INTEGER_32 data
}
EMODULE l_struct_OC_ValuePair {
    FIELD INTEGER_32 a
    FIELD INTEGER_32 b
    FIELD INTEGER_32 c
}
EMODULE l_class_OC_IVectorTest {
    FIELD l_module_OC_IVector ivector
}
EMODULE l_ainterface_OC_IVectorIndication {
    METHOD heard__ENA ( INTEGER_32 meth , INTEGER_32 v )
}
EMODULE l_ainterface_OC_IVectorRequest {
    METHOD say__ENA ( INTEGER_32 meth , INTEGER_32 v )
}
EMODULE l_ainterface_OC_PipeIn {
    METHOD enq__ENA ( l_struct_OC_NOCData v )
}
EMODULE l_ainterface_OC_PipeIn_OC_0 {
    METHOD enq__ENA ( l_struct_OC_ValuePair v )
}
EMODULE l_ainterface_OC_PipeOut {
    METHOD deq__ENA
    METHOD first l_struct_OC_NOCData
}
EMODULE l_ainterface_OC_PipeOut_OC_1 {
    METHOD deq__ENA
    METHOD first l_struct_OC_ValuePair
}
EMODULE l_module_OC_Fifo {
    INTERFACE l_ainterface_OC_PipeIn in
    INTERFACE l_ainterface_OC_PipeOut out
}
EMODULE l_module_OC_Fifo_OC_2 {
    INTERFACE l_ainterface_OC_PipeIn_OC_0 in
    INTERFACE l_ainterface_OC_PipeOut_OC_1 out
}
EMODULE l_module_OC_IVectorInd {
    INTERFACE l_ainterface_OC_IVectorIndication ind
    METHOD ind$heard__ENA ( INTEGER_32 meth , INTEGER_32 v )
}
MODULE l_module_OC_Fifo1 {
    INTERFACE l_ainterface_OC_PipeIn in
    INTERFACE l_ainterface_OC_PipeOut out
    FIELD l_struct_OC_NOCData element
    FIELD INTEGER_1 full
    METHOD in$enq__ENA ( l_struct_OC_NOCData v ) {
        STORE :element = in$enq$v
        STORE :full = 1
    }
    METHOD out$deq__ENA {
        STORE :full = 0
    }
    METHOD out$first l_struct_OC_NOCData = ((element))
}
MODULE l_module_OC_Fifo1_OC_3 {
    INTERFACE l_ainterface_OC_PipeIn_OC_0 in
    INTERFACE l_ainterface_OC_PipeOut_OC_1 out
    FIELD l_struct_OC_ValuePair element
    FIELD INTEGER_1 full
    METHOD in$enq__ENA ( l_struct_OC_ValuePair v ) if (((full) ^ (1))) {
        STORE :element = in$enq$v
        STORE :full = 1
    }
    METHOD out$deq__ENA if ((full)) {
        STORE :full = 0
    }
    METHOD out$first l_struct_OC_ValuePair = ((element)) if ((full))
}
MODULE l_module_OC_FifoPong {
    INTERFACE l_ainterface_OC_PipeIn_OC_0 in
    INTERFACE l_ainterface_OC_PipeOut_OC_1 out
    FIELD l_module_OC_Fifo1_OC_3 element1
    FIELD l_module_OC_Fifo1_OC_3 element2
    FIELD INTEGER_1 pong
    METHOD in$enq__ENA ( l_struct_OC_ValuePair v ) {
        CALL/Action (pong):element2$in$enq__ENA{in$enq$v}
        CALL/Action ((pong) ^ 1):element1$in$enq__ENA{in$enq$v}
    }
    METHOD out$deq__ENA {
        CALL/Action (pong):element2$out$deq__ENA{}
        CALL/Action ((pong) ^ 1):element1$out$deq__ENA{}
        STORE :pong = (pong) ^ (1)
    }
    METHOD out$first l_struct_OC_ValuePair = ((out$first$retval)) {
        ALLOCA l_struct_OC_ValuePair out$first$retval
        CALL (pong):element2$out$first{}
        LET l_struct_OC_ValuePair (pong):out$first$retval = element2$out$first
        CALL ((pong) ^ 1):element1$out$first{}
        LET l_struct_OC_ValuePair ((pong) ^ 1):out$first$retval = element1$out$first
    }
}
MODULE l_module_OC_IVector {
    FIELD/Count 10  l_module_OC_FifoPong fifo
    INTERFACE/Ptr l_ainterface_OC_IVectorIndication out
    FIELD INTEGER_32 vsize
    INTERFACE l_ainterface_OC_IVectorRequest in
    METHOD in$say__ENA ( INTEGER_32 meth , INTEGER_32 v ) {
        ALLOCA l_struct_OC_ValuePair in$say__ENA$temp
        LET INTEGER_32 :in$say__ENA$temp$b = in$say$v
        CALL/Action :fifo[in$say$meth]$in$enq__ENA{in$say__ENA$temp}
    }
    METHOD/Rule respond_rule_0__ENA if ((1)) {
        ALLOCA l_struct_OC_ValuePair respond_rule_0__ENA$temp
        CALL :fifo[0]$out$first{}
        LET l_struct_OC_ValuePair :respond_rule_0__ENA$temp = fifo[0]$out$first
        CALL/Action :fifo[0]$out$deq__ENA{}
        CALL/Action :out$heard__ENA{0,respond_rule_0__ENA$temp$b}
    }
    METHOD/Rule respond_rule_1__ENA if ((1)) {
        ALLOCA l_struct_OC_ValuePair respond_rule_1__ENA$temp
        CALL :fifo[1]$out$first{}
        LET l_struct_OC_ValuePair :respond_rule_1__ENA$temp = fifo[1]$out$first
        CALL/Action :fifo[1]$out$deq__ENA{}
        CALL/Action :out$heard__ENA{1,respond_rule_1__ENA$temp$b}
    }
    METHOD/Rule respond_rule_2__ENA if ((1)) {
        ALLOCA l_struct_OC_ValuePair respond_rule_2__ENA$temp
        CALL :fifo[2]$out$first{}
        LET l_struct_OC_ValuePair :respond_rule_2__ENA$temp = fifo[2]$out$first
        CALL/Action :fifo[2]$out$deq__ENA{}
        CALL/Action :out$heard__ENA{2,respond_rule_2__ENA$temp$b}
    }
    METHOD/Rule respond_rule_3__ENA if ((1)) {
        ALLOCA l_struct_OC_ValuePair respond_rule_3__ENA$temp
        CALL :fifo[3]$out$first{}
        LET l_struct_OC_ValuePair :respond_rule_3__ENA$temp = fifo[3]$out$first
        CALL/Action :fifo[3]$out$deq__ENA{}
        CALL/Action :out$heard__ENA{3,respond_rule_3__ENA$temp$b}
    }
    METHOD/Rule respond_rule_4__ENA if ((1)) {
        ALLOCA l_struct_OC_ValuePair respond_rule_4__ENA$temp
        CALL :fifo[4]$out$first{}
        LET l_struct_OC_ValuePair :respond_rule_4__ENA$temp = fifo[4]$out$first
        CALL/Action :fifo[4]$out$deq__ENA{}
        CALL/Action :out$heard__ENA{4,respond_rule_4__ENA$temp$b}
    }
    METHOD/Rule respond_rule_5__ENA if ((1)) {
        ALLOCA l_struct_OC_ValuePair respond_rule_5__ENA$temp
        CALL :fifo[5]$out$first{}
        LET l_struct_OC_ValuePair :respond_rule_5__ENA$temp = fifo[5]$out$first
        CALL/Action :fifo[5]$out$deq__ENA{}
        CALL/Action :out$heard__ENA{5,respond_rule_5__ENA$temp$b}
    }
    METHOD/Rule respond_rule_6__ENA if ((1)) {
        ALLOCA l_struct_OC_ValuePair respond_rule_6__ENA$temp
        CALL :fifo[6]$out$first{}
        LET l_struct_OC_ValuePair :respond_rule_6__ENA$temp = fifo[6]$out$first
        CALL/Action :fifo[6]$out$deq__ENA{}
        CALL/Action :out$heard__ENA{6,respond_rule_6__ENA$temp$b}
    }
    METHOD/Rule respond_rule_7__ENA if ((1)) {
        ALLOCA l_struct_OC_ValuePair respond_rule_7__ENA$temp
        CALL :fifo[7]$out$first{}
        LET l_struct_OC_ValuePair :respond_rule_7__ENA$temp = fifo[7]$out$first
        CALL/Action :fifo[7]$out$deq__ENA{}
        CALL/Action :out$heard__ENA{7,respond_rule_7__ENA$temp$b}
    }
    METHOD/Rule respond_rule_8__ENA if ((1)) {
        ALLOCA l_struct_OC_ValuePair respond_rule_8__ENA$temp
        CALL :fifo[8]$out$first{}
        LET l_struct_OC_ValuePair :respond_rule_8__ENA$temp = fifo[8]$out$first
        CALL/Action :fifo[8]$out$deq__ENA{}
        CALL/Action :out$heard__ENA{8,respond_rule_8__ENA$temp$b}
    }
    METHOD/Rule respond_rule_9__ENA if ((1)) {
        ALLOCA l_struct_OC_ValuePair respond_rule_9__ENA$temp
        CALL :fifo[9]$out$first{}
        LET l_struct_OC_ValuePair :respond_rule_9__ENA$temp = fifo[9]$out$first
        CALL/Action :fifo[9]$out$deq__ENA{}
        CALL/Action :out$heard__ENA{9,respond_rule_9__ENA$temp$b}
    }
}
MODULE l_module_OC_MuxPipe {
    INTERFACE l_ainterface_OC_PipeIn in
    INTERFACE l_ainterface_OC_PipeIn forward
    INTERFACE/Ptr l_ainterface_OC_PipeIn out
    FIELD l_module_OC_Fifo1 forwardFifo
    METHOD/Rule fifoRule__ENA if ((1)) {
        ALLOCA l_struct_OC_NOCData fifoRule__ENA$agg_2e_tmp
        CALL :forwardFifo$out$first{}
        LET l_struct_OC_NOCData :fifoRule__ENA$agg_2e_tmp = forwardFifo$out$first
        CALL/Action :out$enq__ENA{fifoRule__ENA$agg_2e_tmp}
        CALL/Action :forwardFifo$out$deq__ENA{}
    }
    METHOD forward$enq__ENA ( l_struct_OC_NOCData v ) {
        CALL/Action :forwardFifo$in$enq__ENA{forward$enq$v}
    }
    METHOD in$enq__ENA ( l_struct_OC_NOCData v ) {
        CALL/Action :out$enq__ENA{in$enq$v}
    }
}
