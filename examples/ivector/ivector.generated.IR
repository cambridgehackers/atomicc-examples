EMODULE l_ainterface_OC_IVectorIndication 0 (
    METHOD heard__ENA (
        PARAM heard$meth TYPE INTEGER_32
        PARAM heard$v TYPE INTEGER_32
    )
    METHOD heard__RDY TYPE INTEGER_1
)
EMODULE l_ainterface_OC_IVectorRequest 0 (
    METHOD say__ENA (
        PARAM say$meth TYPE INTEGER_32
        PARAM say$v TYPE INTEGER_32
    )
    METHOD say__RDY TYPE INTEGER_1
)
EMODULE l_ainterface_OC_PipeIn 0 (
    METHOD enq__ENA (
        PARAM enq$v TYPE INTEGER_32
    )
    METHOD enq__RDY TYPE INTEGER_1
)
EMODULE l_struct_OC_ValuePair 96 (
    FIELD a TYPE INTEGER_32
    FIELD b TYPE INTEGER_32
    FIELD c TYPE INTEGER_32
)
EMODULE l_ainterface_OC_PipeIn_OC_1 0 (
    METHOD enq__ENA (
        PARAM enq$v TYPE l_struct_OC_ValuePair
    )
    METHOD enq__RDY TYPE INTEGER_1
)
EMODULE l_ainterface_OC_PipeOut 0 (
    METHOD deq__ENA
    METHOD deq__RDY TYPE INTEGER_1
    METHOD first TYPE INTEGER_32
    METHOD first__RDY TYPE INTEGER_1
)
EMODULE l_ainterface_OC_PipeOut_OC_2 0 (
    METHOD deq__ENA
    METHOD deq__RDY TYPE INTEGER_1
    METHOD first TYPE l_struct_OC_ValuePair
    METHOD first__RDY TYPE INTEGER_1
)
EMODULE l_module_OC_Fifo_OC_0 0 (
    FIELD l_ainterface_OC_PipeIn_OC_1:in
    FIELD l_ainterface_OC_PipeOut_OC_2:out
    METHOD in$enq__ENA (
        PARAM in$enq$v TYPE l_struct_OC_ValuePair
    )
    METHOD in$enq__RDY TYPE INTEGER_1
    METHOD out$deq__ENA
    METHOD out$deq__RDY TYPE INTEGER_1
    METHOD out$first TYPE l_struct_OC_ValuePair
    METHOD out$first__RDY TYPE INTEGER_1
)
MODULE l_module_OC_Fifo1_OC_3 104 (
    FIELD l_struct_OC_ValuePair:element TYPE l_struct_OC_ValuePair
    FIELD full TYPE INTEGER_8
    METHOD in$enq__ENA (
        PARAM in$enq$v TYPE l_struct_OC_ValuePair
        STORE :element = in$enq$v
        STORE :full = 1
    )
    METHOD in$enq__RDY TYPE INTEGER_1 = (full ^ 1) (
        METAREAD full 
    )
    METHOD out$deq__ENA (
        STORE :full = 0
    )
    METHOD out$deq__RDY TYPE INTEGER_1 = (full) (
        METAREAD full 
    )
    METHOD out$first TYPE l_struct_OC_ValuePair = (element) (
        METAREAD element 
    )
    METHOD out$first__RDY TYPE INTEGER_1 = (full) (
        METAREAD full 
    )
)
MODULE l_module_OC_FifoPong 216 (
    FIELD l_module_OC_Fifo1_OC_3:element1 TYPE l_module_OC_Fifo1_OC_3
    FIELD l_module_OC_Fifo1_OC_3:element2 TYPE l_module_OC_Fifo1_OC_3
    FIELD pong TYPE INTEGER_8
    METHOD in$enq__ENA (
        PARAM in$enq$v TYPE l_struct_OC_ValuePair
        METAREAD pong 
        METAINVOKE element2$in$enq__ENA pong
        CALL/Action (pong):element2$in$enq__ENA{element2$in$enq$v;in$enq$v}
        METAREAD pong pong
        METAINVOKE element1$in$enq__ENA pong ^ 1
        CALL/Action (pong ^ 1):element1$in$enq__ENA{element1$in$enq$v;in$enq$v}
        METAREAD pong pong ^ 1
    )
    METHOD in$enq__RDY TYPE INTEGER_1 = ((element2$in$enq__RDY | (pong ^ 1)) & (element1$in$enq__RDY | pong)) (
        METAINVOKE element2$in$enq__RDY 
        METAREAD pong 
        METAINVOKE element1$in$enq__RDY 
        METAREAD pong 
    )
    METHOD out$deq__ENA (
        METAREAD pong 
        METAINVOKE element2$out$deq__ENA pong
        CALL/Action (pong):element2$out$deq__ENA{}
        METAREAD pong pong
        METAINVOKE element1$out$deq__ENA pong ^ 1
        CALL/Action (pong ^ 1):element1$out$deq__ENA{}
        METAREAD pong pong ^ 1
        METAREAD pong 
        STORE :pong = pong ^ 1
    )
    METHOD out$deq__RDY TYPE INTEGER_1 = ((element2$out$deq__RDY | (pong ^ 1)) & (element1$out$deq__RDY | pong)) (
        METAINVOKE element2$out$deq__RDY 
        METAREAD pong 
        METAINVOKE element1$out$deq__RDY 
        METAREAD pong 
    )
    METHOD out$first TYPE l_struct_OC_ValuePair = (retval) (
        METAREAD pong 
        METAINVOKE element2$out$first pong
        STORE/Alloca (pong):retval = element2$out$first{}
        METAREAD pong pong
        METAINVOKE element1$out$first pong ^ 1
        STORE/Alloca (pong ^ 1):retval = element1$out$first{}
        METAREAD pong pong ^ 1
    )
    METHOD out$first__RDY TYPE INTEGER_1 = ((element2$out$first__RDY | (pong ^ 1)) & (element1$out$first__RDY | pong)) (
        METAINVOKE element2$out$first__RDY 
        METAREAD pong 
        METAINVOKE element1$out$first__RDY 
        METAREAD pong 
    )
)
MODULE l_module_OC_IVector 32 (
    FIELD l_module_OC_FifoPong:fifo COUNT 10 TYPE l_module_OC_FifoPong
    OUTCALL out = l_ainterface_OC_IVectorIndication
    FIELD/PTR  l_ainterface_OC_IVectorIndication:out
    FIELD vsize TYPE INTEGER_32
    FIELD l_ainterface_OC_IVectorRequest:in
    METHOD in$say__ENA (
        PARAM in$say$meth TYPE INTEGER_32
        PARAM in$say$v TYPE INTEGER_32
        STORE/Alloca :temp$b = in$say$v
        METAINVOKE (in$say$meth == 0 ? fifo0:&fifo1)$in$enq__ENA 
        CALL/Action :(in$say$meth == 0 ? fifo0:&fifo1)$in$enq__ENA{(in$say$meth == 0 ? fifo0:&fifo1)$in$enq$v;temp}
    )
    METHOD in$say__RDY TYPE INTEGER_1 = (fifo0$in$enq__RDY & fifo1$in$enq__RDY) (
        METAINVOKE fifo0$in$enq__RDY 
        METAINVOKE fifo1$in$enq__RDY 
    )
    METHOD/Rule respond_rule_0__ENA (
        METAINVOKE fifo0$out$first 
        STORE/Alloca :temp = fifo0$out$first{}
        METAINVOKE fifo0$out$deq__ENA 
        CALL/Action :fifo0$out$deq__ENA{}
        METAINVOKE out$heard__ENA 
        CALL/Action :out$heard__ENA{out$heard$meth;0,out$heard$v;temp$b}
    )
    METHOD/Rule respond_rule_0__RDY TYPE INTEGER_1 = ((fifo0$out$first__RDY & fifo0$out$deq__RDY) & out$heard__RDY) (
        METAINVOKE fifo0$out$first__RDY 
        METAINVOKE fifo0$out$deq__RDY 
        METAINVOKE out$heard__RDY 
    )
    METHOD/Rule respond_rule_1__ENA (
        METAINVOKE fifo1$out$first 
        STORE/Alloca :temp = fifo1$out$first{}
        METAINVOKE fifo1$out$deq__ENA 
        CALL/Action :fifo1$out$deq__ENA{}
        METAINVOKE out$heard__ENA 
        CALL/Action :out$heard__ENA{out$heard$meth;1,out$heard$v;temp$b}
    )
    METHOD/Rule respond_rule_1__RDY TYPE INTEGER_1 = ((fifo1$out$first__RDY & fifo1$out$deq__RDY) & out$heard__RDY) (
        METAINVOKE fifo1$out$first__RDY 
        METAINVOKE fifo1$out$deq__RDY 
        METAINVOKE out$heard__RDY 
    )
    METHOD/Rule respond_rule_2__ENA (
        METAINVOKE fifo2$out$first 
        STORE/Alloca :temp = fifo2$out$first{}
        METAINVOKE fifo2$out$deq__ENA 
        CALL/Action :fifo2$out$deq__ENA{}
        METAINVOKE out$heard__ENA 
        CALL/Action :out$heard__ENA{out$heard$meth;2,out$heard$v;temp$b}
    )
    METHOD/Rule respond_rule_2__RDY TYPE INTEGER_1 = ((fifo2$out$first__RDY & fifo2$out$deq__RDY) & out$heard__RDY) (
        METAINVOKE fifo2$out$first__RDY 
        METAINVOKE fifo2$out$deq__RDY 
        METAINVOKE out$heard__RDY 
    )
    METHOD/Rule respond_rule_3__ENA (
        METAINVOKE fifo3$out$first 
        STORE/Alloca :temp = fifo3$out$first{}
        METAINVOKE fifo3$out$deq__ENA 
        CALL/Action :fifo3$out$deq__ENA{}
        METAINVOKE out$heard__ENA 
        CALL/Action :out$heard__ENA{out$heard$meth;3,out$heard$v;temp$b}
    )
    METHOD/Rule respond_rule_3__RDY TYPE INTEGER_1 = ((fifo3$out$first__RDY & fifo3$out$deq__RDY) & out$heard__RDY) (
        METAINVOKE fifo3$out$first__RDY 
        METAINVOKE fifo3$out$deq__RDY 
        METAINVOKE out$heard__RDY 
    )
    METHOD/Rule respond_rule_4__ENA (
        METAINVOKE fifo4$out$first 
        STORE/Alloca :temp = fifo4$out$first{}
        METAINVOKE fifo4$out$deq__ENA 
        CALL/Action :fifo4$out$deq__ENA{}
        METAINVOKE out$heard__ENA 
        CALL/Action :out$heard__ENA{out$heard$meth;4,out$heard$v;temp$b}
    )
    METHOD/Rule respond_rule_4__RDY TYPE INTEGER_1 = ((fifo4$out$first__RDY & fifo4$out$deq__RDY) & out$heard__RDY) (
        METAINVOKE fifo4$out$first__RDY 
        METAINVOKE fifo4$out$deq__RDY 
        METAINVOKE out$heard__RDY 
    )
    METHOD/Rule respond_rule_5__ENA (
        METAINVOKE fifo5$out$first 
        STORE/Alloca :temp = fifo5$out$first{}
        METAINVOKE fifo5$out$deq__ENA 
        CALL/Action :fifo5$out$deq__ENA{}
        METAINVOKE out$heard__ENA 
        CALL/Action :out$heard__ENA{out$heard$meth;5,out$heard$v;temp$b}
    )
    METHOD/Rule respond_rule_5__RDY TYPE INTEGER_1 = ((fifo5$out$first__RDY & fifo5$out$deq__RDY) & out$heard__RDY) (
        METAINVOKE fifo5$out$first__RDY 
        METAINVOKE fifo5$out$deq__RDY 
        METAINVOKE out$heard__RDY 
    )
    METHOD/Rule respond_rule_6__ENA (
        METAINVOKE fifo6$out$first 
        STORE/Alloca :temp = fifo6$out$first{}
        METAINVOKE fifo6$out$deq__ENA 
        CALL/Action :fifo6$out$deq__ENA{}
        METAINVOKE out$heard__ENA 
        CALL/Action :out$heard__ENA{out$heard$meth;6,out$heard$v;temp$b}
    )
    METHOD/Rule respond_rule_6__RDY TYPE INTEGER_1 = ((fifo6$out$first__RDY & fifo6$out$deq__RDY) & out$heard__RDY) (
        METAINVOKE fifo6$out$first__RDY 
        METAINVOKE fifo6$out$deq__RDY 
        METAINVOKE out$heard__RDY 
    )
    METHOD/Rule respond_rule_7__ENA (
        METAINVOKE fifo7$out$first 
        STORE/Alloca :temp = fifo7$out$first{}
        METAINVOKE fifo7$out$deq__ENA 
        CALL/Action :fifo7$out$deq__ENA{}
        METAINVOKE out$heard__ENA 
        CALL/Action :out$heard__ENA{out$heard$meth;7,out$heard$v;temp$b}
    )
    METHOD/Rule respond_rule_7__RDY TYPE INTEGER_1 = ((fifo7$out$first__RDY & fifo7$out$deq__RDY) & out$heard__RDY) (
        METAINVOKE fifo7$out$first__RDY 
        METAINVOKE fifo7$out$deq__RDY 
        METAINVOKE out$heard__RDY 
    )
    METHOD/Rule respond_rule_8__ENA (
        METAINVOKE fifo8$out$first 
        STORE/Alloca :temp = fifo8$out$first{}
        METAINVOKE fifo8$out$deq__ENA 
        CALL/Action :fifo8$out$deq__ENA{}
        METAINVOKE out$heard__ENA 
        CALL/Action :out$heard__ENA{out$heard$meth;8,out$heard$v;temp$b}
    )
    METHOD/Rule respond_rule_8__RDY TYPE INTEGER_1 = ((fifo8$out$first__RDY & fifo8$out$deq__RDY) & out$heard__RDY) (
        METAINVOKE fifo8$out$first__RDY 
        METAINVOKE fifo8$out$deq__RDY 
        METAINVOKE out$heard__RDY 
    )
    METHOD/Rule respond_rule_9__ENA (
        METAINVOKE fifo9$out$first 
        STORE/Alloca :temp = fifo9$out$first{}
        METAINVOKE fifo9$out$deq__ENA 
        CALL/Action :fifo9$out$deq__ENA{}
        METAINVOKE out$heard__ENA 
        CALL/Action :out$heard__ENA{out$heard$meth;9,out$heard$v;temp$b}
    )
    METHOD/Rule respond_rule_9__RDY TYPE INTEGER_1 = ((fifo9$out$first__RDY & fifo9$out$deq__RDY) & out$heard__RDY) (
        METAINVOKE fifo9$out$first__RDY 
        METAINVOKE fifo9$out$deq__RDY 
        METAINVOKE out$heard__RDY 
    )
)
EMODULE l_class_OC_IVectorTest 32 (
    FIELD l_module_OC_IVector:ivector TYPE l_module_OC_IVector
)
EMODULE l_module_OC_Fifo 0 (
    FIELD l_ainterface_OC_PipeIn:in
    FIELD l_ainterface_OC_PipeOut:out
    METHOD in$enq__ENA (
        PARAM in$enq$v TYPE INTEGER_32
    )
    METHOD in$enq__RDY TYPE INTEGER_1
    METHOD out$deq__ENA
    METHOD out$deq__RDY TYPE INTEGER_1
    METHOD out$first TYPE INTEGER_32
    METHOD out$first__RDY TYPE INTEGER_1
)
MODULE l_module_OC_Fifo1 40 (
    FIELD element TYPE INTEGER_32
    FIELD full TYPE INTEGER_8
    METHOD in$enq__ENA (
        PARAM in$enq$v TYPE INTEGER_32
        STORE :element = in$enq$v
        STORE :full = 1
    )
    METHOD in$enq__RDY TYPE INTEGER_1 = (full ^ 1) (
        METAREAD full 
    )
    METHOD out$deq__ENA (
        STORE :full = 0
    )
    METHOD out$deq__RDY TYPE INTEGER_1 = (full) (
        METAREAD full 
    )
    METHOD out$first TYPE INTEGER_32 = (element) (
        METAREAD element 
    )
    METHOD out$first__RDY TYPE INTEGER_1 = (full) (
        METAREAD full 
    )
)
EMODULE l_module_OC_IVectorInd 0 (
    FIELD l_ainterface_OC_IVectorIndication:ind
)
