STRUCT NOCDataH  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    FIELD Bit(16) length
    FIELD Bit(128) data
}
INTERFACE AsyncControlIfc  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    FIELD/input Bit(1) CLK
    FIELD/input Bit(1) nRST
    FIELD/input Bit(1) start
    FIELD/input Bit(1) ack
    FIELD/input Bit(1) clear
    FIELD/output Bit(1) out
    FIELD/output Bit(1) done
}
INTERFACE PackIfc  {
    FILE packing_OC_cpp
    SOFTWARE request
    SOFTWARE indication
    INTERFACE PackRequest request
    INTERFACE/Ptr PackIndication indication
}
INTERFACE PackIndication  {
    FILE packing_OC_cpp
    METHOD/Action heard__ENA ( Bit(32) v , Bit(8) writeCount , Bit(8) readCount , Bit(8) seqno )
}
INTERFACE PackRequest  {
    FILE packing_OC_cpp
    METHOD/Action say__ENA ( Bit(32) v , Bit(8) seqno )
}
INTERFACE PipeIn(width=32)  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    METHOD/Action enq__ENA ( Bit(width) v )
}
INTERFACE SelectIndexIfc(funnelWidth=20,width=14)  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    FIELD Bit(14) out
    FIELD/Ptr/Count funnelWidth  Bit(14) in
    FIELD Bit(5) index
}
EMODULE AsyncControl AsyncControlIfc {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
}
EMODULE Dummy PipeIn(width=32) {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
}
EMODULE/Verilog SelectIndex(funnelWidth=20,width=14) SelectIndexIfc(funnelWidth=20,width=14) {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
}
MODULE Pack PackIfc {
    FILE packing_OC_cpp
    FIELD Bit(8) readCount
    FIELD Bit(8) writeCount
    FIELD Bit(8) seqval
    FIELD Bit(32) counter
    METHOD/Action request$say__ENA ( Bit(32) v , Bit(8) seqno ) {
        STORE :seqval = request$say$seqno
        PRINTF :printf{"REQUESTSAY v %x write %x read %x seqno %x\n",request$say$v,(writeCount) + (32),(readCount) + (64),request$say$seqno}
        CALL/Action :indication$heard__ENA{request$say$v,(writeCount) + (32),(readCount) + (64),seqval}
        STORE :writeCount = (writeCount) + (1)
        STORE :counter = (counter) + (-1)
        STORE :readCount = (readCount) + (16)
    }
}
