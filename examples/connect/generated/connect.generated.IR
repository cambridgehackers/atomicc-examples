EMODULE l_struct_OC_EchoIndication_data {
    FIELD Bit(32) tag
    FIELD l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoIndication_union data
}
EMODULE l_struct_OC_EchoRequest_data {
    FIELD Bit(32) tag
    FIELD l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoRequest_union data
}
EMODULE l_struct_OC_NOCData {
    FIELD Bit(128) data
}
EMODULE l_struct_OC_ValueType {
    FIELD Bit(32) a
    FIELD Bit(32) b
}
EMODULE l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoIndication_union {
    FIELD l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoIndication_union_KD__KD_EchoIndication_heard heard
}
EMODULE l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoIndication_union_KD__KD_EchoIndication_heard {
    FIELD Bit(32) meth
    FIELD Bit(32) v
}
EMODULE l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoRequest_union {
    FIELD l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoRequest_union_KD__KD_EchoRequest_say say
}
EMODULE l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoRequest_union_KD__KD_EchoRequest_say {
    FIELD Bit(32) meth
    FIELD Bit(32) v
}
INTERFACE l_ainterface_OC_EchoIndication {
    METHOD/Action heard__ENA ( Bit(32) meth , Bit(32) v )
}
INTERFACE l_ainterface_OC_EchoRequest {
    METHOD/Action say__ENA ( Bit(32) meth , Bit(32) v )
}
INTERFACE l_ainterface_OC_PipeIn {
    METHOD/Action enq__ENA ( l_struct_OC_EchoRequest_data v )
}
INTERFACE l_ainterface_OC_PipeInH {
    METHOD/Action enq__ENA ( l_struct_OC_NOCData v , Bit(16) length )
}
INTERFACE l_ainterface_OC_PipeIn_OC_0 {
    METHOD/Action enq__ENA ( l_struct_OC_EchoIndication_data v )
}
EMODULE MuxPipe {
    INTERFACE l_ainterface_OC_PipeInH in
    INTERFACE l_ainterface_OC_PipeInH forward
    INTERFACE/Ptr l_ainterface_OC_PipeInH out
}
MODULE Connect {
    INTERFACECONNECT lERI$request lEcho$request l_ainterface_OC_EchoRequest
    INTERFACECONNECT lEIO$pipe lEII_test$pipe l_ainterface_OC_PipeIn_OC_0
    INTERFACECONNECT lEcho$indication lEIO$indication l_ainterface_OC_EchoIndication
    INTERFACECONNECT lERO_test$pipe lERI$pipe l_ainterface_OC_PipeIn
    INTERFACECONNECT/Forward request lERO_test$request l_ainterface_OC_EchoRequest
    INTERFACECONNECT/Forward indication lEII_test$indication l_ainterface_OC_EchoIndication
    FIELD EchoIndicationOutput lEIO
    FIELD EchoRequestInput lERI
    FIELD Echo lEcho
    FIELD EchoRequestOutput lERO_test
    FIELD EchoIndicationInput lEII_test
    INTERFACE l_ainterface_OC_EchoRequest request
    INTERFACE/Ptr l_ainterface_OC_EchoIndication indication
}
MODULE Echo {
    INTERFACE l_ainterface_OC_EchoRequest request
    INTERFACE/Ptr l_ainterface_OC_EchoIndication indication
    METHOD/Action request$say__ENA ( Bit(32) meth , Bit(32) v ) {
        CALL/Action :indication$heard__ENA{request$say$meth,request$say$v}
    }
}
MODULE EchoIndicationInput {
    INTERFACE l_ainterface_OC_PipeIn_OC_0 pipe
    INTERFACE/Ptr l_ainterface_OC_EchoIndication indication
    METHOD/Action pipe$enq__ENA ( l_struct_OC_EchoIndication_data v ) {
        ALLOCA l_struct_OC_EchoIndication_data pipe$enq__ENA$v
        LET l_struct_OC_EchoIndication_data :pipe$enq__ENA$v = pipe$enq$v
        CALL/Action ((pipe$enq__ENA$v$tag) == 1):indication$heard__ENA{pipe$enq__ENA$v$data$heard$meth,pipe$enq__ENA$v$data$heard$v}
    }
}
MODULE EchoIndicationOutput {
    INTERFACE l_ainterface_OC_EchoIndication indication
    INTERFACE/Ptr l_ainterface_OC_PipeIn_OC_0 pipe
    METHOD/Action indication$heard__ENA ( Bit(32) meth , Bit(32) v ) {
        ALLOCA l_struct_OC_EchoIndication_data indication$heard__ENA$ind
        LET Bit(32) :indication$heard__ENA$ind$tag = 1
        STORE :indication$heard__ENA$ind$data$heard$meth = indication$heard$meth
        STORE :indication$heard__ENA$ind$data$heard$v = indication$heard$v
        CALL/Action :pipe$enq__ENA{indication$heard__ENA$ind}
    }
}
MODULE EchoRequestInput {
    INTERFACE l_ainterface_OC_PipeIn pipe
    INTERFACE/Ptr l_ainterface_OC_EchoRequest request
    METHOD/Action pipe$enq__ENA ( l_struct_OC_EchoRequest_data v ) {
        ALLOCA l_struct_OC_EchoRequest_data pipe$enq__ENA$v
        LET l_struct_OC_EchoRequest_data :pipe$enq__ENA$v = pipe$enq$v
        PRINTF :printf{"entered EchoRequestInput::enq\n"}
        CALL/Action ((pipe$enq__ENA$v$tag) == 1):request$say__ENA{pipe$enq__ENA$v$data$say$meth,pipe$enq__ENA$v$data$say$v}
    }
}
MODULE EchoRequestOutput {
    INTERFACE l_ainterface_OC_EchoRequest request
    INTERFACE/Ptr l_ainterface_OC_PipeIn pipe
    METHOD/Action request$say__ENA ( Bit(32) meth , Bit(32) v ) {
        ALLOCA l_struct_OC_EchoRequest_data request$say__ENA$ind
        PRINTF :printf{"entered EchoRequestOutput::say\n"}
        LET Bit(32) :request$say__ENA$ind$tag = 1
        STORE :request$say__ENA$ind$data$say$meth = request$say$meth
        STORE :request$say__ENA$ind$data$say$v = request$say$v
        CALL/Action :pipe$enq__ENA{request$say__ENA$ind}
    }
}
