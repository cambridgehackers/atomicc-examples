EMODULE l_struct_OC_EchoIndication_data {
    FIELD INTEGER_32 tag
    FIELD l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoIndication_union data
}
EMODULE l_struct_OC_EchoRequest_data {
    FIELD INTEGER_32 tag
    FIELD l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoRequest_union data
}
EMODULE l_struct_OC_NOCData {
    FIELD/Count 4  INTEGER_32 data
}
EMODULE l_struct_OC_ValueType {
    FIELD INTEGER_32 a
    FIELD INTEGER_32 b
}
EMODULE l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoIndication_union {
    FIELD l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoIndication_union_KD__KD_EchoIndication_heard heard
}
EMODULE l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoIndication_union_KD__KD_EchoIndication_heard {
    FIELD INTEGER_32 meth
    FIELD INTEGER_32 v
}
EMODULE l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoRequest_union {
    FIELD l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoRequest_union_KD__KD_EchoRequest_say say
}
EMODULE l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoRequest_union_KD__KD_EchoRequest_say {
    FIELD INTEGER_32 meth
    FIELD INTEGER_32 v
}
EMODULE l_ainterface_OC_EchoIndication {
    METHOD heard__ENA ( INTEGER_32 meth , INTEGER_32 v )
}
EMODULE l_ainterface_OC_EchoRequest {
    METHOD say__ENA ( INTEGER_32 meth , INTEGER_32 v )
}
EMODULE l_ainterface_OC_PipeIn {
    METHOD enq__ENA ( l_struct_OC_NOCData v )
}
EMODULE l_ainterface_OC_PipeIn_OC_0 {
    METHOD enq__ENA ( l_struct_OC_EchoRequest_data v )
}
EMODULE l_ainterface_OC_PipeIn_OC_1 {
    METHOD enq__ENA ( l_struct_OC_EchoIndication_data v )
}
EMODULE MuxPipe {
    INTERFACE l_ainterface_OC_PipeIn in
    INTERFACE l_ainterface_OC_PipeIn forward
    INTERFACE/Ptr l_ainterface_OC_PipeIn out
}
MODULE Connect {
    INTERFACECONNECT lERI$request lEcho$request l_ainterface_OC_EchoRequest
    INTERFACECONNECT lEIO$pipe lEII_test$pipe l_ainterface_OC_PipeIn_OC_1
    INTERFACECONNECT lEcho$indication lEIO$indication l_ainterface_OC_EchoIndication
    INTERFACECONNECT lERO_test$pipe lERI$pipe l_ainterface_OC_PipeIn_OC_0
    INTERFACECONNECT/Forward request lERO_test$request l_ainterface_OC_EchoRequest
    INTERFACECONNECT/Forward indication lEII_test$indication l_ainterface_OC_EchoIndication
    FIELD EchoIndicationOutput lEIO
    FIELD EchoRequestInput lERI
    FIELD Echo lEcho
    FIELD EchoRequestOutput lERO_test
    FIELD EchoIndicationInput lEII_test
    INTERFACE l_ainterface_OC_EchoRequest request
    INTERFACE/Ptr l_ainterface_OC_EchoIndication indication
}
MODULE Echo {
    INTERFACE l_ainterface_OC_EchoRequest request
    INTERFACE/Ptr l_ainterface_OC_EchoIndication indication
    METHOD request$say__ENA ( INTEGER_32 meth , INTEGER_32 v ) {
        CALL/Action :indication$heard__ENA{request$say$meth,request$say$v}
    }
}
MODULE EchoIndicationInput {
    INTERFACE l_ainterface_OC_PipeIn_OC_1 pipe
    INTERFACE/Ptr l_ainterface_OC_EchoIndication indication
    METHOD pipe$enq__ENA ( l_struct_OC_EchoIndication_data v ) {
        ALLOCA l_struct_OC_EchoIndication_data pipe$enq__ENA$v_2e_addr
        LET l_struct_OC_EchoIndication_data :pipe$enq__ENA$v_2e_addr = pipe$enq$v
        CALL/Action ((pipe$enq__ENA$v_2e_addr$tag) == 1):indication$heard__ENA{pipe$enq__ENA$v_2e_addr$data$heard$meth,pipe$enq__ENA$v_2e_addr$data$heard$v}
    }
}
MODULE EchoIndicationOutput {
    INTERFACE l_ainterface_OC_EchoIndication indication
    INTERFACE/Ptr l_ainterface_OC_PipeIn_OC_1 pipe
    METHOD indication$heard__ENA ( INTEGER_32 meth , INTEGER_32 v ) {
        ALLOCA l_struct_OC_EchoIndication_data indication$heard__ENA$ind
        LET INTEGER_32 :indication$heard__ENA$ind$tag = 1
        STORE :indication$heard__ENA$ind$data$heard$meth = indication$heard$meth
        STORE :indication$heard__ENA$ind$data$heard$v = indication$heard$v
        CALL/Action :pipe$enq__ENA{indication$heard__ENA$ind}
    }
}
MODULE EchoRequestInput {
    INTERFACE l_ainterface_OC_PipeIn_OC_0 pipe
    INTERFACE/Ptr l_ainterface_OC_EchoRequest request
    METHOD pipe$enq__ENA ( l_struct_OC_EchoRequest_data v ) {
        ALLOCA l_struct_OC_EchoRequest_data pipe$enq__ENA$v_2e_addr
        LET l_struct_OC_EchoRequest_data :pipe$enq__ENA$v_2e_addr = pipe$enq$v
        PRINTF :printf{"entered EchoRequestInput::enq\n"}
        CALL/Action ((pipe$enq__ENA$v_2e_addr$tag) == 1):request$say__ENA{pipe$enq__ENA$v_2e_addr$data$say$meth,pipe$enq__ENA$v_2e_addr$data$say$v}
    }
}
MODULE EchoRequestOutput {
    INTERFACE l_ainterface_OC_EchoRequest request
    INTERFACE/Ptr l_ainterface_OC_PipeIn_OC_0 pipe
    METHOD request$say__ENA ( INTEGER_32 meth , INTEGER_32 v ) {
        ALLOCA l_struct_OC_EchoRequest_data request$say__ENA$ind
        PRINTF :printf{"entered EchoRequestOutput::say\n"}
        LET INTEGER_32 :request$say__ENA$ind$tag = 1
        STORE :request$say__ENA$ind$data$say$meth = request$say$meth
        STORE :request$say__ENA$ind$data$say$v = request$say$v
        CALL/Action :pipe$enq__ENA{request$say__ENA$ind}
    }
}
