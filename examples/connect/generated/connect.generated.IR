STRUCT EchoIndication_data  {
    FIELD Bit(32) tag
    FIELD _IC_anonymous_AC_struct_JC__KD__KD_EchoIndication_union data
}
STRUCT EchoRequest_data  {
    FIELD Bit(32) tag
    FIELD _IC_anonymous_AC_struct_JC__KD__KD_EchoRequest_union data
}
STRUCT NOCDataH  {
    FIELD Bit(16) length
    FIELD Bit(128) data
}
STRUCT ValueType  {
    FIELD Bit(32) a
    FIELD Bit(32) b
}
STRUCT _IC_anonymous_AC_struct_JC__KD__KD_EchoIndication_union  {
    FIELD _IC_anonymous_AC_struct_JC__KD__KD_EchoIndication_union_KD__KD_EchoIndication_heard heard
}
STRUCT _IC_anonymous_AC_struct_JC__KD__KD_EchoIndication_union_KD__KD_EchoIndication_heard  {
    FIELD Bit(32) meth
    FIELD Bit(32) v
}
STRUCT _IC_anonymous_AC_struct_JC__KD__KD_EchoRequest_union  {
    FIELD _IC_anonymous_AC_struct_JC__KD__KD_EchoRequest_union_KD__KD_EchoRequest_say say
}
STRUCT _IC_anonymous_AC_struct_JC__KD__KD_EchoRequest_union_KD__KD_EchoRequest_say  {
    FIELD Bit(32) meth
    FIELD Bit(32) v
}
INTERFACE ConnectIfc  {
    INTERFACE EchoRequest request
    INTERFACE/Ptr EchoIndication indication
}
INTERFACE EIIIfc  {
    INTERFACE PipeIn_OC_3 pipe
    INTERFACE/Ptr EchoIndication indication
}
INTERFACE EIOIfc  {
    INTERFACE EchoIndication indication
    INTERFACE/Ptr PipeIn_OC_3 pipe
}
INTERFACE ERIIfc  {
    INTERFACE PipeIn_OC_2 pipe
    INTERFACE/Ptr EchoRequest request
}
INTERFACE EROIfc  {
    INTERFACE EchoRequest request
    INTERFACE/Ptr PipeIn_OC_2 pipe
}
INTERFACE EchoIfc  {
    INTERFACE EchoRequest request
    INTERFACE/Ptr EchoIndication indication
}
INTERFACE EchoIndication  {
    METHOD/Action heard__ENA ( Bit(32) meth , Bit(32) v )
}
INTERFACE EchoRequest  {
    METHOD/Action say__ENA ( Bit(32) meth , Bit(32) v )
}
INTERFACE FunnelBaseIfc(funnelWidth=99,dataWidth=32)  {
    INTERFACE/Count funnelWidth  PipeIn_OC_0 in
    INTERFACE/Ptr PipeIn_OC_1 out
}
INTERFACE MuxPipeIfc  {
    INTERFACE PipeIn in
    INTERFACE PipeIn forward
    INTERFACE/Ptr PipeIn out
}
INTERFACE PipeIn  {
    METHOD/Action enq__ENA ( NOCDataH v )
}
INTERFACE PipeIn_OC_0  {
    METHOD/Action enq__ENA ( Bit(32) v )
}
INTERFACE PipeIn_OC_1  {
    METHOD/Action enq__ENA ( Bit(32) v )
}
INTERFACE PipeIn_OC_2  {
    METHOD/Action enq__ENA ( EchoRequest_data v )
}
INTERFACE PipeIn_OC_3  {
    METHOD/Action enq__ENA ( EchoIndication_data v )
}
INTERFACE l_topIfc  {
    INTERFACE PipeIn request
    INTERFACE/Ptr PipeIn indication
}
EMODULE FunnelBufferedBase(funnelWidth=99,dataWidth=32) FunnelBaseIfc(funnelWidth=99,dataWidth=32) {
}
EMODULE MuxPipe MuxPipeIfc {
}
EMODULE l_top l_topIfc {
}
MODULE Connect ConnectIfc {
    INTERFACECONNECT lERI$request lEcho$request EchoRequest
    INTERFACECONNECT lEIO$pipe lEII_test$pipe PipeIn_OC_3
    INTERFACECONNECT lEcho$indication lEIO$indication EchoIndication
    INTERFACECONNECT lERO_test$pipe lERI$pipe PipeIn_OC_2
    INTERFACECONNECT request lERO_test$request EchoRequest
    INTERFACECONNECT indication lEII_test$indication EchoIndication
    FIELD EchoIndicationOutput lEIO
    FIELD EchoRequestInput lERI
    FIELD Echo lEcho
    FIELD EchoRequestOutput lERO_test
    FIELD EchoIndicationInput lEII_test
    METHOD/Rule/Action RULE$connectRule__ENA {
        LET EchoRequest :lERI$request = lEcho$request
        LET PipeIn_OC_3 :lEIO$pipe = lEII_test$pipe
        LET EchoIndication :lEcho$indication = lEIO$indication
        LET PipeIn_OC_2 :lERO_test$pipe = lERI$pipe
    }
}
MODULE Echo EchoIfc {
    METHOD/Action request$say__ENA ( Bit(32) meth , Bit(32) v ) {
        CALL/Action :indication$heard__ENA{request$say$meth,request$say$v}
    }
}
MODULE EchoIndicationInput EIIIfc {
    METHOD/Action pipe$enq__ENA ( EchoIndication_data v ) {
        CALL/Action ((pipe$enq$v$tag) == 1):indication$heard__ENA{pipe$enq$v$data$heard$meth,pipe$enq$v$data$heard$v}
    }
}
MODULE EchoIndicationOutput EIOIfc {
    METHOD/Action indication$heard__ENA ( Bit(32) meth , Bit(32) v ) {
        ALLOCA EchoIndication_data indication$heard$ind
        LET Bit(32) :indication$heard$ind$tag = 1
        LET Bit(32) :indication$heard$ind$data$heard$meth = indication$heard$meth
        LET Bit(32) :indication$heard$ind$data$heard$v = indication$heard$v
        CALL/Action :pipe$enq__ENA{indication$heard$ind}
    }
}
MODULE EchoRequestInput ERIIfc {
    METHOD/Action pipe$enq__ENA ( EchoRequest_data v ) {
        PRINTF :printf{"entered EchoRequestInput::enq\n"}
        CALL/Action ((pipe$enq$v$tag) == 1):request$say__ENA{pipe$enq$v$data$say$meth,pipe$enq$v$data$say$v}
    }
}
MODULE EchoRequestOutput EROIfc {
    METHOD/Action request$say__ENA ( Bit(32) meth , Bit(32) v ) {
        ALLOCA EchoRequest_data request$say$ind
        PRINTF :printf{"entered EchoRequestOutput::say\n"}
        LET Bit(32) :request$say$ind$tag = 1
        LET Bit(32) :request$say$ind$data$say$meth = request$say$meth
        LET Bit(32) :request$say$ind$data$say$v = request$say$v
        CALL/Action :pipe$enq__ENA{request$say$ind}
    }
}
