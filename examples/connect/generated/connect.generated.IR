STRUCT EchoIndication_data  {
    FILE connect_OC_cpp
    FIELD Bit(32) tag
    FIELD _IC_anonymous_AC_struct_JC__KD__KD_EchoIndication_PF_union data
}
STRUCT EchoRequest_data  {
    FILE connect_OC_cpp
    FIELD Bit(32) tag
    FIELD _IC_anonymous_AC_struct_JC__KD__KD_EchoRequest_PF_union data
}
STRUCT NOCDataH  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    FIELD Bit(16) length
    FIELD Bit(128) data
}
STRUCT ValueType  {
    FILE connect_OC_cpp
    FIELD Bit(32) a
    FIELD Bit(32) b
}
STRUCT _IC_anonymous_AC_struct_JC__KD__KD_EchoIndication_PF_union  {
    FILE connect_OC_cpp
    FIELD _IC_anonymous_AC_struct_JC__KD__KD_EchoIndication_PF_union_KD__KD_EchoIndication_PF_heard heard
}
STRUCT _IC_anonymous_AC_struct_JC__KD__KD_EchoIndication_PF_union_KD__KD_EchoIndication_PF_heard  {
    FILE connect_OC_cpp
    FIELD Bit(32) meth
    FIELD Bit(32) v
}
STRUCT _IC_anonymous_AC_struct_JC__KD__KD_EchoRequest_PF_union  {
    FILE connect_OC_cpp
    FIELD _IC_anonymous_AC_struct_JC__KD__KD_EchoRequest_PF_union_KD__KD_EchoRequest_PF_say say
}
STRUCT _IC_anonymous_AC_struct_JC__KD__KD_EchoRequest_PF_union_KD__KD_EchoRequest_PF_say  {
    FILE connect_OC_cpp
    FIELD Bit(32) meth
    FIELD Bit(32) v
}
INTERFACE ConnectIfc  {
    FILE connect_OC_cpp
    INTERFACE EchoRequest request
    INTERFACE/Ptr EchoIndication indication
}
INTERFACE EIIIfc  {
    FILE connect_OC_cpp
    INTERFACE PipeIn(width=96) pipe
    INTERFACE/Ptr EchoIndication indication
}
INTERFACE EIOIfc  {
    FILE connect_OC_cpp
    INTERFACE EchoIndication indication
    INTERFACE/Ptr PipeIn(width=96) pipe
}
INTERFACE ERIIfc  {
    FILE connect_OC_cpp
    INTERFACE PipeIn(width=96) pipe
    INTERFACE/Ptr EchoRequest request
}
INTERFACE EROIfc  {
    FILE connect_OC_cpp
    INTERFACE EchoRequest request
    INTERFACE/Ptr PipeIn(width=96) pipe
}
INTERFACE EchoIfc  {
    FILE connect_OC_cpp
    INTERFACE EchoRequest request
    INTERFACE/Ptr EchoIndication indication
}
INTERFACE EchoIndication  {
    FILE connect_OC_cpp
    METHOD/Action heard__ENA ( Bit(32) meth , Bit(32) v )
}
INTERFACE EchoRequest  {
    FILE connect_OC_cpp
    METHOD/Action say__ENA ( Bit(32) meth , Bit(32) v )
}
INTERFACE MuxPipeIfc  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_mux_OC_h
    INTERFACE PipeIn(width=144) in
    INTERFACE PipeIn(width=144) forward
    INTERFACE/Ptr PipeIn(width=144) out
}
INTERFACE PipeIn(width=32)  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    METHOD/Action enq__ENA ( Bit(width) v )
}
INTERFACE SelectIndexIfc(funnelWidth=20,width=14)  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    FIELD Bit(14) out
    FIELD/Ptr/Count funnelWidth  Bit(14) in
    FIELD Bit(5) index
}
EMODULE Dummy PipeIn(width=32) {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
}
EMODULE MuxPipe MuxPipeIfc {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_mux_OC_h
}
EMODULE/Verilog SelectIndex(funnelWidth=20,width=14) SelectIndexIfc(funnelWidth=20,width=14) {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
}
MODULE Connect ConnectIfc {
    FILE connect_OC_cpp
    INTERFACECONNECT lERI$request lEcho$request EchoRequest
    INTERFACECONNECT lEIO$pipe lEII_test$pipe PipeIn(width=96)
    INTERFACECONNECT lEcho$indication lEIO$indication EchoIndication
    INTERFACECONNECT lERO_test$pipe lERI$pipe PipeIn(width=96)
    INTERFACECONNECT request lERO_test$request EchoRequest
    INTERFACECONNECT indication lEII_test$indication EchoIndication
    FIELD EchoIndicationOutput lEIO
    FIELD EchoRequestInput lERI
    FIELD Echo lEcho
    FIELD EchoRequestOutput lERO_test
    FIELD EchoIndicationInput lEII_test
}
MODULE Echo EchoIfc {
    FILE connect_OC_cpp
    METHOD/Action request$say__ENA ( Bit(32) meth , Bit(32) v ) {
        CALL/Action :indication$heard__ENA{request$say$meth,request$say$v}
    }
}
MODULE EchoIndicationInput EIIIfc {
    FILE connect_OC_cpp
    METHOD/Action pipe$enq__ENA ( EchoIndication_data v ) {
        ALLOCA EchoIndication_data _pipe$enq$temp$v
        LET EchoIndication_data :_pipe$enq$temp$v = pipe$enq$v
        CALL/Action ((_pipe$enq$temp$v.tag) == 1):indication$heard__ENA{_pipe$enq$temp$v.data.heard.meth,_pipe$enq$temp$v.data.heard.v}
    }
}
MODULE EchoIndicationOutput EIOIfc {
    FILE connect_OC_cpp
    METHOD/Action indication$heard__ENA ( Bit(32) meth , Bit(32) v ) {
        ALLOCA EchoIndication_data _indication$heard$ind
        LET Bit(32) :_indication$heard$ind.tag = 1
        LET Bit(32) :_indication$heard$ind.data.heard.meth = indication$heard$meth
        LET Bit(32) :_indication$heard$ind.data.heard.v = indication$heard$v
        CALL/Action :pipe$enq__ENA{_indication$heard$ind}
    }
}
MODULE EchoRequestInput ERIIfc {
    FILE connect_OC_cpp
    METHOD/Action pipe$enq__ENA ( EchoRequest_data v ) {
        ALLOCA EchoRequest_data _pipe$enq$temp$v
        LET EchoRequest_data :_pipe$enq$temp$v = pipe$enq$v
        PRINTF :printf{"entered EchoRequestInput::enq\n"}
        CALL/Action ((_pipe$enq$temp$v.tag) == 1):request$say__ENA{_pipe$enq$temp$v.data.say.meth,_pipe$enq$temp$v.data.say.v}
    }
}
MODULE EchoRequestOutput EROIfc {
    FILE connect_OC_cpp
    METHOD/Action request$say__ENA ( Bit(32) meth , Bit(32) v ) {
        ALLOCA EchoRequest_data _request$say$ind
        PRINTF :printf{"entered EchoRequestOutput::say\n"}
        LET Bit(32) :_request$say$ind.tag = 1
        LET Bit(32) :_request$say$ind.data.say.meth = request$say$meth
        LET Bit(32) :_request$say$ind.data.say.v = request$say$v
        CALL/Action :pipe$enq__ENA{_request$say$ind}
    }
}
