EMODULE l_ainterface_OC_EchoIndication (
    METHOD heard__ENA (
        PARAM meth INTEGER_32
        PARAM v INTEGER_32
    )
    METHOD heard__RDY INTEGER_1
)
EMODULE l_ainterface_OC_EchoRequest (
    METHOD say__ENA (
        PARAM meth INTEGER_32
        PARAM v INTEGER_32
    )
    METHOD say__RDY INTEGER_1
)
EMODULE l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoRequest_union_KD__KD_EchoRequest_say (
    FIELD meth INTEGER_32
    FIELD v INTEGER_32
)
EMODULE l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoRequest_union (
    FIELD say l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoRequest_union_KD__KD_EchoRequest_say
)
EMODULE l_struct_OC_EchoRequest_data (
    FIELD tag INTEGER_32
    FIELD data l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoRequest_union
)
EMODULE l_ainterface_OC_PipeIn (
    METHOD enq__ENA (
        PARAM v l_struct_OC_EchoRequest_data
    )
    METHOD enq__RDY INTEGER_1
)
EMODULE l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoIndication_union_KD__KD_EchoIndication_heard (
    FIELD meth INTEGER_32
    FIELD v INTEGER_32
)
EMODULE l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoIndication_union (
    FIELD heard l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoIndication_union_KD__KD_EchoIndication_heard
)
EMODULE l_struct_OC_EchoIndication_data (
    FIELD tag INTEGER_32
    FIELD data l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoIndication_union
)
EMODULE l_ainterface_OC_PipeIn_OC_0 (
    METHOD enq__ENA (
        PARAM v l_struct_OC_EchoIndication_data
    )
    METHOD enq__RDY INTEGER_1
)
MODULE l_module_OC_Echo (
    FIELD request l_ainterface_OC_EchoRequest
    OUTCALL indication = l_ainterface_OC_EchoIndication
    FIELD/Ptr indication l_ainterface_OC_EchoIndication
    METHOD request$say__ENA (
        PARAM meth INTEGER_32
        PARAM v INTEGER_32
        CALL/Action :indication$heard__ENA{request$say$meth,request$say$v}
    )
    METHOD request$say__RDY INTEGER_1 = (indication$heard__RDY) (
        CALL :indication$heard__RDY{}
    )
)
MODULE l_module_OC_EchoIndicationInput (
    FIELD pipe l_ainterface_OC_PipeIn_OC_0
    OUTCALL indication = l_ainterface_OC_EchoIndication
    FIELD/Ptr indication l_ainterface_OC_EchoIndication
    METHOD pipe$enq__ENA (
        PARAM v l_struct_OC_EchoIndication_data
        LET l_struct_OC_EchoIndication_data :pipe$enq__ENA$v_2e_addr = pipe$enq$v
        CALL/Action (pipe$enq__ENA$v_2e_addrfoosuff$tag == 1):indication$heard__ENA{pipe$enq__ENA$v_2e_addr$data$heard$meth,pipe$enq__ENA$v_2e_addr$data$heard$v}
        ALLOCA pipe$enq__ENA$pipe$enq__ENA$v_2e_addr l_struct_OC_EchoIndication_data
    )
    METHOD pipe$enq__RDY INTEGER_1 = (indication$heard__RDY | ((pipe$enq__RDY$v_2e_addrfoosufffoosuff$tag == 1) ^ 1)) (
        CALL :indication$heard__RDY{}
    )
)
MODULE l_module_OC_EchoIndicationOutput (
    FIELD indication l_ainterface_OC_EchoIndication
    OUTCALL pipe = l_ainterface_OC_PipeIn_OC_0
    FIELD/Ptr pipe l_ainterface_OC_PipeIn_OC_0
    METHOD indication$heard__ENA (
        PARAM meth INTEGER_32
        PARAM v INTEGER_32
        LET INTEGER_32 :indication$heard__ENA$ind$tag = 1
        STORE :indication$heard__ENA$ind$data$heard$meth = indication$heard$meth
        STORE :indication$heard__ENA$ind$data$heard$v = indication$heard$v
        CALL/Action :pipe$enq__ENA{indication$heard__ENA$ind}
        ALLOCA indication$heard__ENA$indication$heard__ENA$ind l_struct_OC_EchoIndication_data
    )
    METHOD indication$heard__RDY INTEGER_1 = (pipe$enq__RDY) (
        CALL :pipe$enq__RDY{}
    )
)
MODULE l_module_OC_EchoRequestInput (
    FIELD pipe l_ainterface_OC_PipeIn
    OUTCALL request = l_ainterface_OC_EchoRequest
    FIELD/Ptr request l_ainterface_OC_EchoRequest
    METHOD pipe$enq__ENA (
        PARAM v l_struct_OC_EchoRequest_data
        LET l_struct_OC_EchoRequest_data :pipe$enq__ENA$v_2e_addr = pipe$enq$v
        CALL/Action (pipe$enq__ENA$v_2e_addrfoosuff$tag == 1):request$say__ENA{pipe$enq__ENA$v_2e_addr$data$say$meth,pipe$enq__ENA$v_2e_addr$data$say$v}
        ALLOCA pipe$enq__ENA$pipe$enq__ENA$v_2e_addr l_struct_OC_EchoRequest_data
    )
    METHOD pipe$enq__RDY INTEGER_1 = (request$say__RDY | ((pipe$enq__RDY$v_2e_addrfoosufffoosuff$tag == 1) ^ 1)) (
        CALL :request$say__RDY{}
    )
)
MODULE l_module_OC_EchoRequestOutput (
    FIELD request l_ainterface_OC_EchoRequest
    OUTCALL pipe = l_ainterface_OC_PipeIn
    FIELD/Ptr pipe l_ainterface_OC_PipeIn
    METHOD request$say__ENA (
        PARAM meth INTEGER_32
        PARAM v INTEGER_32
        LET INTEGER_32 :request$say__ENA$ind$tag = 1
        STORE :request$say__ENA$ind$data$say$meth = request$say$meth
        STORE :request$say__ENA$ind$data$say$v = request$say$v
        CALL/Action :pipe$enq__ENA{request$say__ENA$ind}
        ALLOCA request$say__ENA$request$say__ENA$ind l_struct_OC_EchoRequest_data
    )
    METHOD request$say__RDY INTEGER_1 = (pipe$enq__RDY) (
        CALL :pipe$enq__RDY{}
    )
)
MODULE l_module_OC_Connect (
    SOFTWARE request
    SOFTWARE indication
    INTERFACECONNECT lERI$request lEcho$request l_ainterface_OC_EchoRequest
    INTERFACECONNECT lEIO$pipe lEII_test$pipe l_ainterface_OC_PipeIn_OC_0
    INTERFACECONNECT lEcho$indication lEIO$indication l_ainterface_OC_EchoIndication
    INTERFACECONNECT lERO_test$pipe lERI$pipe l_ainterface_OC_PipeIn
    INTERFACECONNECT lEII_test$indication indication l_ainterface_OC_EchoIndication
    FIELD request l_ainterface_OC_EchoRequest
    OUTCALL indication = l_ainterface_OC_EchoIndication
    FIELD/Ptr indication l_ainterface_OC_EchoIndication
    FIELD lEIO l_module_OC_EchoIndicationOutput
    FIELD lERI l_module_OC_EchoRequestInput
    FIELD lEcho l_module_OC_Echo
    FIELD lERO_test l_module_OC_EchoRequestOutput
    FIELD lEII_test l_module_OC_EchoIndicationInput
    METHOD request$say__ENA (
        PARAM meth INTEGER_32
        PARAM v INTEGER_32
        CALL/Action :lERO_test$request$say__ENA{request$say$meth,request$say$v}
    )
    METHOD request$say__RDY INTEGER_1 = (lERO_test$request$say__RDY) (
        CALL :lERO_test$request$say__RDY{}
    )
)
EMODULE l_struct_OC_ValueType (
    FIELD a INTEGER_32
    FIELD b INTEGER_32
)
