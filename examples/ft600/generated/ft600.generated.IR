EMODULE l_struct_OC_NOCData {
    FIELD/Count 4  INTEGER_32 data
}
EMODULE l_ainterface_OC_Ft600 {
    FIELD/input INTEGER_1 usb_clk
    FIELD/input INTEGER_1 usb_rxf
    FIELD/input INTEGER_1 usb_txe
    FIELD/output INTEGER_1 usb_rd_n
    FIELD/output INTEGER_1 usb_wr_n
    FIELD/output INTEGER_1 usb_oe_n
    FIELD/inout INTEGER_16 usb_ad
}
EMODULE l_ainterface_OC_I_IOBUF {
    FIELD/inout INTEGER_1 IO
    FIELD/input INTEGER_1 I
    FIELD/output INTEGER_1 O
    FIELD/input INTEGER_1 T
}
EMODULE l_ainterface_OC_PipeIn {
    METHOD enq__ENA ( l_struct_OC_NOCData v )
}
EMODULE l_ainterface_OC_PipeIn_OC_0 {
    METHOD enq__ENA ( INTEGER_128 v )
}
EMODULE l_ainterface_OC_PipeOut {
    METHOD deq__ENA
    METHOD first l_struct_OC_NOCData
}
EMODULE l_ainterface_OC_PipeOut_OC_1 {
    METHOD deq__ENA
    METHOD first INTEGER_128
}
EMODULE Fifo {
    INTERFACE l_ainterface_OC_PipeIn in
    INTERFACE l_ainterface_OC_PipeOut out
}
EMODULE Fifo_OC_2 {
    INTERFACE l_ainterface_OC_PipeIn_OC_0 in
    INTERFACE l_ainterface_OC_PipeOut_OC_1 out
}
EMODULE IOBUF {
    INTERFACE l_ainterface_OC_I_IOBUF _
}
MODULE Fifo1 {
    INTERFACE l_ainterface_OC_PipeIn in
    INTERFACE l_ainterface_OC_PipeOut out
    FIELD Fifo1Base__PARAM__width__128 fifo
    METHOD in$enq__ENA ( l_struct_OC_NOCData v ) {
        CALL/Action :fifo$in$enq__ENA{in$enq$v}
    }
    METHOD out$deq__ENA {
        CALL/Action :fifo$out$deq__ENA{}
    }
    METHOD out$first l_struct_OC_NOCData = ((out$first$retval)) {
        ALLOCA l_struct_OC_NOCData out$first$retval
        CALL :fifo$out$first{}
        LET INTEGER_128 :out$first$retval = fifo$out$first
    }
}
MODULE Fifo1Base__PARAM__width__128 {
    INTERFACE l_ainterface_OC_PipeIn_OC_0 in
    INTERFACE l_ainterface_OC_PipeOut_OC_1 out
    FIELD INTEGER_128 element
    FIELD INTEGER_1 full
    METHOD in$enq__ENA ( INTEGER_128 v ) if (((full) ^ (1))) {
        STORE :element = in$enq$v
        STORE :full = 1
    }
    METHOD out$deq__ENA if ((full)) {
        STORE :full = 0
    }
    METHOD out$first INTEGER_128 = ((element)) if ((full))
}
MODULE ModFt600 {
    INTERFACE l_ainterface_OC_Ft600 _
    FIELD INTEGER_1 usb_fifo_empty
    FIELD INTEGER_2 usb_rxf_delay
    FIELD INTEGER_1 usb_txe_delay
    FIELD/Count 16  IOBUF iobufs
    METHOD/Rule RULEhandshake__ENA {
        LET INTEGER_1 :usb_rd_n = (usb_rxf_delay) != (0)
        LET INTEGER_1 :usb_oe_n = (usb_rxf_delay) & (1)
        LET INTEGER_1 :usb_wr_n = ((usb_txe_delay) | (usb_fifo_empty)) | (((usb_rxf_delay) & (1)) ^ (-1))
        STORE :usb_fifo_empty = 0
        STORE :usb_rxf_delay = ((usb_rxf_delay) << (1)) | (usb_rxf)
        STORE :usb_txe_delay = usb_txe
    }
    METHOD/Rule RULEiobufs__ENA {
        ALLOCA INTEGER_32 RULEiobufs__ENA$i
        LET INTEGER_32 :RULEiobufs__ENA$i = 0
        LET INTEGER_1 :iobufs[RULEiobufs__ENA$i]$IO = (usb_ad)  >>  (RULEiobufs__ENA$i)
        LET INTEGER_32 :RULEiobufs__ENA$i = (RULEiobufs__ENA$i) + (1)
        LET INTEGER_1 :iobufs[RULEiobufs__ENA$i]$IO = (usb_ad)  >>  (RULEiobufs__ENA$i)
        LET INTEGER_32 :RULEiobufs__ENA$i = (RULEiobufs__ENA$i) + (1)
        LET INTEGER_1 :iobufs[RULEiobufs__ENA$i]$IO = (usb_ad)  >>  (RULEiobufs__ENA$i)
        LET INTEGER_32 :RULEiobufs__ENA$i = (RULEiobufs__ENA$i) + (1)
        LET INTEGER_1 :iobufs[RULEiobufs__ENA$i]$IO = (usb_ad)  >>  (RULEiobufs__ENA$i)
        LET INTEGER_32 :RULEiobufs__ENA$i = (RULEiobufs__ENA$i) + (1)
        LET INTEGER_1 :iobufs[RULEiobufs__ENA$i]$IO = (usb_ad)  >>  (RULEiobufs__ENA$i)
        LET INTEGER_32 :RULEiobufs__ENA$i = (RULEiobufs__ENA$i) + (1)
        LET INTEGER_1 :iobufs[RULEiobufs__ENA$i]$IO = (usb_ad)  >>  (RULEiobufs__ENA$i)
        LET INTEGER_32 :RULEiobufs__ENA$i = (RULEiobufs__ENA$i) + (1)
        LET INTEGER_1 :iobufs[RULEiobufs__ENA$i]$IO = (usb_ad)  >>  (RULEiobufs__ENA$i)
        LET INTEGER_32 :RULEiobufs__ENA$i = (RULEiobufs__ENA$i) + (1)
        LET INTEGER_1 :iobufs[RULEiobufs__ENA$i]$IO = (usb_ad)  >>  (RULEiobufs__ENA$i)
        LET INTEGER_32 :RULEiobufs__ENA$i = (RULEiobufs__ENA$i) + (1)
        LET INTEGER_1 :iobufs[RULEiobufs__ENA$i]$IO = (usb_ad)  >>  (RULEiobufs__ENA$i)
        LET INTEGER_32 :RULEiobufs__ENA$i = (RULEiobufs__ENA$i) + (1)
        LET INTEGER_1 :iobufs[RULEiobufs__ENA$i]$IO = (usb_ad)  >>  (RULEiobufs__ENA$i)
        LET INTEGER_32 :RULEiobufs__ENA$i = (RULEiobufs__ENA$i) + (1)
        LET INTEGER_1 :iobufs[RULEiobufs__ENA$i]$IO = (usb_ad)  >>  (RULEiobufs__ENA$i)
        LET INTEGER_32 :RULEiobufs__ENA$i = (RULEiobufs__ENA$i) + (1)
        LET INTEGER_1 :iobufs[RULEiobufs__ENA$i]$IO = (usb_ad)  >>  (RULEiobufs__ENA$i)
        LET INTEGER_32 :RULEiobufs__ENA$i = (RULEiobufs__ENA$i) + (1)
        LET INTEGER_1 :iobufs[RULEiobufs__ENA$i]$IO = (usb_ad)  >>  (RULEiobufs__ENA$i)
        LET INTEGER_32 :RULEiobufs__ENA$i = (RULEiobufs__ENA$i) + (1)
        LET INTEGER_1 :iobufs[RULEiobufs__ENA$i]$IO = (usb_ad)  >>  (RULEiobufs__ENA$i)
        LET INTEGER_32 :RULEiobufs__ENA$i = (RULEiobufs__ENA$i) + (1)
        LET INTEGER_1 :iobufs[RULEiobufs__ENA$i]$IO = (usb_ad)  >>  (RULEiobufs__ENA$i)
        LET INTEGER_32 :RULEiobufs__ENA$i = (RULEiobufs__ENA$i) + (1)
        LET INTEGER_1 :iobufs[RULEiobufs__ENA$i]$IO = (usb_ad)  >>  (RULEiobufs__ENA$i)
        LET INTEGER_32 :RULEiobufs__ENA$i = (RULEiobufs__ENA$i) + (1)
    }
}
MODULE MuxPipe {
    INTERFACE l_ainterface_OC_PipeIn in
    INTERFACE l_ainterface_OC_PipeIn forward
    INTERFACE/Ptr l_ainterface_OC_PipeIn out
    FIELD Fifo1 forwardFifo
    METHOD/Rule RULEfifoRule__ENA {
        ALLOCA l_struct_OC_NOCData RULEfifoRule__ENA$agg_2e_tmp
        CALL :forwardFifo$out$first{}
        LET l_struct_OC_NOCData :RULEfifoRule__ENA$agg_2e_tmp = forwardFifo$out$first
        CALL/Action :out$enq__ENA{RULEfifoRule__ENA$agg_2e_tmp}
        CALL/Action :forwardFifo$out$deq__ENA{}
    }
    METHOD forward$enq__ENA ( l_struct_OC_NOCData v ) {
        CALL/Action :forwardFifo$in$enq__ENA{forward$enq$v}
    }
    METHOD in$enq__ENA ( l_struct_OC_NOCData v ) {
        CALL/Action :out$enq__ENA{in$enq$v}
    }
}
