STRUCT NOCDataH  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    FIELD Bit(16) length
    FIELD Bit(128) data
}
INTERFACE BscanIfc(width=32)  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_bscan_OC_h
    INTERFACE PipeIn(width=32) toBscan
    INTERFACE/Ptr PipeIn(width=32) fromBscan
}
INTERFACE BtestIfc  {
    FILE bscant_OC_cpp
    SOFTWARE request
    SOFTWARE indication
    INTERFACE BtestRequest request
    INTERFACE/Ptr BtestIndication indication
}
INTERFACE BtestIndication  {
    FILE bscant_OC_cpp
    METHOD/Action heard__ENA ( Bit(32) v )
}
INTERFACE BtestRequest  {
    FILE bscant_OC_cpp
    METHOD/Action say__ENA ( Bit(32) v )
}
INTERFACE PipeIn(width=32)  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    METHOD/Action enq__ENA ( Bit(width) v )
}
INTERFACE SelectIndexIfc(funnelWidth=20,width=14)  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    FIELD Bit(14) out
    FIELD/Ptr/Count funnelWidth  Bit(14) in
    FIELD Bit(5) index
}
EMODULE Bscan(id=4,width=32) BscanIfc(width=32) {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_bscan_OC_h
}
EMODULE Dummy PipeIn(width=32) {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
}
EMODULE/Verilog SelectIndex(funnelWidth=20,width=14) SelectIndexIfc(funnelWidth=20,width=14) {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
}
MODULE Btest BtestIfc {
    FILE bscant_OC_cpp
    INTERFACECONNECT readUser bscan$fromBscan PipeIn(width=32)
    FIELD Bscan(id=4,width=32) bscan
    INTERFACE PipeIn(width=32) readUser
    FIELD Bit(8) readCount
    FIELD Bit(8) writeCount
    FIELD Bit(32) nextV
    FIELD Bit(1) ready
    METHOD/Action readUser$enq__ENA ( Bit(64) v ) {
        CALL/Action :indication$heard__ENA{readUser$enq$v}
        STORE :readCount = (readCount) + (1)
    }
    METHOD/Action request$say__ENA ( Bit(32) v ) {
        STORE :nextV = request$say$v
        STORE :ready = 1
    }
    METHOD/Rule/Action RULE$copyRule__ENA {
        CALL/Action :bscan$toBscan$enq__ENA{nextV}
        STORE :ready = 0
        STORE :writeCount = (writeCount) + (1)
    }
}
