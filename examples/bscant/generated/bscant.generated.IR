STRUCT NOCDataH  {
    FIELD Bit(16) length
    FIELD Bit(128) data
}
INTERFACE BscanIfc(width=32)  {
    INTERFACE PipeIn.0 toBscan
    INTERFACE/Ptr PipeIn.1 fromBscan
}
INTERFACE BtestIfc  {
    SOFTWARE request
    SOFTWARE indication
    INTERFACE BtestRequest request
    INTERFACE/Ptr BtestIndication indication
}
INTERFACE BtestIndication  {
    METHOD/Action ack__ENA ( Bit(32) v , Bit(8) seqno )
    METHOD/Action heard__ENA ( Bit(32) v , Bit(8) writeCount , Bit(8) readCount , Bit(32) next )
}
INTERFACE BtestRequest  {
    METHOD/Action say__ENA ( Bit(32) v , Bit(8) seqno )
}
INTERFACE PipeIn  {
    METHOD/Action enq__ENA ( NOCDataH v )
}
INTERFACE PipeIn.0  {
    METHOD/Action enq__ENA ( Bit(32) v )
}
INTERFACE PipeIn.1  {
    METHOD/Action enq__ENA ( Bit(32) v )
}
INTERFACE PipeInB(width=32)  {
    METHOD/Action enq__ENA ( Bit(width) v , Bit(1) last )
}
INTERFACE UserTopIfc  {
    INTERFACE PipeInB(width=32) write
    INTERFACE/Ptr PipeInB(width=32) read
}
INTERFACE l_topIfc  {
    INTERFACE PipeIn request
    INTERFACE/Ptr PipeIn indication
}
EMODULE Bscan(id=3,width=32) BscanIfc(width=32) {
}
EMODULE UserTop UserTopIfc {
}
EMODULE l_top l_topIfc {
}
MODULE Btest BtestIfc {
    INTERFACECONNECT readUser bscan$fromBscan PipeIn.1
    FIELD Bscan(id=3,width=32) bscan
    INTERFACE PipeIn.1 readUser
    FIELD Bit(8) readCount
    FIELD Bit(8) writeCount
    FIELD Bit(32) nextV
    FIELD Bit(1) ready
    METHOD/Action readUser$enq__ENA ( Bit(64) v ) {
        CALL/Action :indication$heard__ENA{readUser$enq$v,writeCount,readCount,nextV}
        STORE :nextV = (nextV) + (16843009)
        STORE :readCount = (readCount) + (1)
    }
    METHOD/Action request$say__ENA ( Bit(32) v , Bit(8) seqno ) {
        STORE :nextV = request$say$v
        STORE :ready = 1
        CALL/Action :indication$ack__ENA{request$say$v,(request$say$seqno) + (1)}
        PRINTF :printf{"REQUESTSAY v %x seqno %x\n",request$say$v,request$say$seqno}
    }
    METHOD/Rule/Action RULE$copyRule__ENA {
        CALL/Action :bscan$toBscan$enq__ENA{nextV}
        STORE :ready = 0
        STORE :writeCount = (writeCount) + (1)
    }
}
