INTERFACE Fifo(width=32)  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    INTERFACE PipeIn(width=32) in
    INTERFACE PipeOut(width=32) out
}
INTERFACE FunnelBaseIfc(funnelWidth=99,width=32)  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    INTERFACE/Count funnelWidth  PipeIn(width=32) in
    INTERFACE/Ptr PipeIn(width=32) out
}
INTERFACE OinIfc  {
    FILE out2int_OC_cpp
    SOFTWARE request
    SOFTWARE indication
    INTERFACE OinRequest request
    INTERFACE/Ptr OinIndication indication
}
INTERFACE OinIndication  {
    FILE out2int_OC_cpp
    METHOD/Action heard__ENA ( Bit(32) v )
}
INTERFACE OinRequest  {
    FILE out2int_OC_cpp
    METHOD/Action say__ENA ( Bit(32) v )
}
INTERFACE Out2InIfc(width=32)  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_out2in_OC_h
    INTERFACE/Ptr PipeOut(width=32) in
    INTERFACE/Ptr PipeIn(width=32) out
}
INTERFACE PipeIn(width=32)  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    METHOD/Action enq__ENA ( Bit(width) v )
}
INTERFACE PipeOut(width=32)  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    METHOD/Action deq__ENA
    METHOD first Bit(width)
}
EMODULE Fifo1Base(width=32) Fifo(width=32) {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_fifo_OC_h
}
EMODULE FunnelBufferedBase(funnelWidth=99,width=32) FunnelBaseIfc(funnelWidth=99,width=32) {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
}
EMODULE Out2InBase(width=32) Out2InIfc(width=32) {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_out2in_OC_h
}
MODULE Fifo1(width=32) Fifo(width=32) {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_fifo_OC_h
    FIELD Fifo1Base(width=32) fifo
    METHOD/Action in$enq__ENA ( Bit(32) v ) {
        CALL/Action :fifo$in$enq__ENA{in$enq$v}
    }
    METHOD/Action out$deq__ENA {
        CALL/Action :fifo$out$deq__ENA{}
    }
    METHOD out$first Bit(32) = ((fifo$out$first)) {
        CALL :fifo$out$first{}
    }
}
MODULE Oin OinIfc {
    FILE out2int_OC_cpp
    INTERFACECONNECT pipe$in first$out PipeOut(width=32)
    INTERFACECONNECT pipe$out second$in PipeIn(width=32)
    FIELD Fifo1(width=32) first
    FIELD Fifo1(width=32) second
    FIELD Out2In(width=32) pipe
    METHOD/Action request$say__ENA ( Bit(32) v ) {
        CALL/Action :first$in$enq__ENA{request$say$v}
        PRINTF :printf{"REQUESTSAY v %x\n",request$say$v}
    }
    METHOD/Rule/Action RULE$copyRule__ENA {
        CALL :second$out$first{}
        CALL/Action :indication$heard__ENA{second$out$first}
        CALL/Action :second$out$deq__ENA{}
    }
}
MODULE Out2In(width=32) Out2InIfc(width=32) {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_out2in_OC_h
    INTERFACECONNECT base$in in PipeOut(width=32)
    INTERFACECONNECT base$out out PipeIn(width=32)
    FIELD Out2InBase(width=32) base
}
