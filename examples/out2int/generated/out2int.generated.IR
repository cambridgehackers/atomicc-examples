STRUCT NOCDataH  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    FIELD Bit(16) length
    FIELD Bit(128) data
}
INTERFACE Fifo  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    INTERFACE PipeIn_OC_2 in
    INTERFACE PipeOut out
}
INTERFACE Fifo_OC_3  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    INTERFACE PipeIn_OC_4 in
    INTERFACE PipeOut_OC_5 out
}
INTERFACE FunnelBaseIfc(funnelWidth=99,width=32)  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    INTERFACE/Count funnelWidth  PipeIn_OC_0 in
    INTERFACE/Ptr PipeIn_OC_1 out
}
INTERFACE OinIfc  {
    FILE out2int_OC_cpp
    SOFTWARE request
    SOFTWARE indication
    INTERFACE OinRequest request
    INTERFACE/Ptr OinIndication indication
}
INTERFACE OinIndication  {
    FILE out2int_OC_cpp
    METHOD/Action heard__ENA ( Bit(32) v )
}
INTERFACE OinRequest  {
    FILE out2int_OC_cpp
    METHOD/Action say__ENA ( Bit(32) v )
}
INTERFACE Out2InIfc  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_out2in_OC_h
    INTERFACE/Ptr PipeOut_OC_6 in
    INTERFACE/Ptr PipeIn_OC_7 out
}
INTERFACE Out2InIfc_OC_8  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_out2in_OC_h
    INTERFACE/Ptr PipeOut_OC_9 in
    INTERFACE/Ptr PipeIn_OC_10 out
}
INTERFACE PipeIn  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    METHOD/Action enq__ENA ( NOCDataH v )
}
INTERFACE PipeIn_OC_0  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    METHOD/Action enq__ENA ( Bit(32) v )
}
INTERFACE PipeIn_OC_1  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    METHOD/Action enq__ENA ( Bit(32) v )
}
INTERFACE PipeIn_OC_10  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    METHOD/Action enq__ENA ( Bit(32) v )
}
INTERFACE PipeIn_OC_2  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    METHOD/Action enq__ENA ( Bit(32) v )
}
INTERFACE PipeIn_OC_4  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    METHOD/Action enq__ENA ( Bit(32) v )
}
INTERFACE PipeIn_OC_7  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    METHOD/Action enq__ENA ( Bit(32) v )
}
INTERFACE PipeOut  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    METHOD/Action deq__ENA
    METHOD first Bit(32)
}
INTERFACE PipeOut_OC_5  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    METHOD/Action deq__ENA
    METHOD first Bit(32)
}
INTERFACE PipeOut_OC_6  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    METHOD/Action deq__ENA
    METHOD first Bit(32)
}
INTERFACE PipeOut_OC_9  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    METHOD/Action deq__ENA
    METHOD first Bit(32)
}
INTERFACE l_topIfc  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    INTERFACE PipeIn request
    INTERFACE/Ptr PipeIn indication
}
EMODULE Fifo1Base(width=32) Fifo {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_fifo_OC_h
}
EMODULE FunnelBufferedBase(funnelWidth=99,width=32) FunnelBaseIfc(funnelWidth=99,width=32) {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
}
EMODULE Out2InBase(width=32) Out2InIfc {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_out2in_OC_h
}
EMODULE l_top l_topIfc {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
}
MODULE Fifo1 Fifo_OC_3 {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_fifo_OC_h
    FIELD Fifo1Base(width=32) fifo
    METHOD/Action in$enq__ENA ( Bit(32) v ) {
        CALL/Action :fifo$in$enq__ENA{in$enq$v}
    }
    METHOD/Action out$deq__ENA {
        CALL/Action :fifo$out$deq__ENA{}
    }
    METHOD out$first Bit(32) = ((fifo$out$first)) {
        CALL :fifo$out$first{}
    }
}
MODULE Oin OinIfc {
    FILE out2int_OC_cpp
    INTERFACECONNECT pipe$in first$out PipeOut_OC_9
    INTERFACECONNECT pipe$out second$in PipeIn_OC_10
    FIELD Fifo1 first
    FIELD Fifo1 second
    FIELD Out2In pipe
    METHOD/Action request$say__ENA ( Bit(32) v ) {
        CALL/Action :first$in$enq__ENA{request$say$v}
        PRINTF :printf{"REQUESTSAY v %x\n",request$say$v}
    }
    METHOD/Rule/Action RULE$copyRule__ENA {
        CALL :second$out$first{}
        CALL/Action :indication$heard__ENA{second$out$first}
        CALL/Action :second$out$deq__ENA{}
    }
}
MODULE Out2In Out2InIfc_OC_8 {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_out2in_OC_h
    INTERFACECONNECT base$in in PipeOut_OC_6
    INTERFACECONNECT base$out out PipeIn_OC_7
    FIELD Out2InBase(width=32) base
}
