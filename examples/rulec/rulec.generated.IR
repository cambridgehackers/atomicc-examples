EMODULE l_ainterface_OC_EchoIndication {
    METHOD heard2__ENA ( INTEGER_32 meth , INTEGER_32 v , INTEGER_32 v2 )
    METHOD heard__ENA ( INTEGER_32 meth , INTEGER_32 v )
}
EMODULE l_ainterface_OC_EchoRequest {
    METHOD say2__ENA ( INTEGER_32 meth , INTEGER_32 v , INTEGER_32 v2 )
    METHOD say__ENA ( INTEGER_32 meth , INTEGER_32 v )
}
EMODULE l_ainterface_OC_PipeIn {
    METHOD enq__ENA ( l_serialize_OC_M2P_MD_EchoRequest_OD__KD__KD_Data v )
}
EMODULE l_ainterface_OC_PipeIn_OC_0 {
    METHOD enq__ENA ( l_serialize_OC_P2M_MD_EchoIndication_OD__KD__KD_Data v )
}
EMODULE l_ainterface_OC_PipeIn_OC_2 {
    METHOD enq__ENA ( l_serialize_OC_P2M_MD_EchoRequest_OD__KD__KD_Data v )
}
EMODULE l_ainterface_OC_PipeIn_OC_4 {
    METHOD enq__ENA ( l_serialize_OC_M2P_MD_EchoIndication_OD__KD__KD_Data v )
}
EMODULE l_serialize_OC_M2P_MD_EchoIndication_OD__KD__KD_Data {
    INTERFACE l_ainterface_OC_EchoIndication ifc
    FIELD INTEGER_32 unused
}
EMODULE l_serialize_OC_M2P_MD_EchoRequest_OD__KD__KD_Data {
    INTERFACE l_ainterface_OC_EchoRequest ifc
    FIELD INTEGER_32 unused
}
EMODULE l_serialize_OC_P2M_MD_EchoIndication_OD__KD__KD_Data {
    INTERFACE l_ainterface_OC_EchoIndication ifc
    FIELD INTEGER_32 unused
}
EMODULE l_serialize_OC_P2M_MD_EchoRequest_OD__KD__KD_Data {
    INTERFACE l_ainterface_OC_EchoRequest ifc
    FIELD INTEGER_32 unused
}
EMODULE l_module_OC_M2P {
    INTERFACE l_ainterface_OC_EchoRequest method
    INTERFACE/Ptr l_ainterface_OC_PipeIn pipe
    INTERFACE l_ainterface_OC_PipeIn unused
}
EMODULE l_module_OC_M2P_OC_3 {
    INTERFACE l_ainterface_OC_EchoIndication method
    INTERFACE/Ptr l_ainterface_OC_PipeIn_OC_4 pipe
    INTERFACE l_ainterface_OC_PipeIn_OC_4 unused
}
EMODULE l_module_OC_P2M {
    INTERFACE l_ainterface_OC_PipeIn_OC_0 pipe
    INTERFACE/Ptr l_ainterface_OC_EchoIndication method
}
EMODULE l_module_OC_P2M_OC_1 {
    INTERFACE l_ainterface_OC_PipeIn_OC_2 pipe
    INTERFACE/Ptr l_ainterface_OC_EchoRequest method
}
MODULE l_module_OC_Connect {
    SOFTWARE request
    SOFTWARE indication
    INTERFACECONNECT sw$indication indication l_ainterface_OC_EchoIndication
    INTERFACECONNECT request sw$request l_ainterface_OC_EchoRequest
    INTERFACECONNECT hw$indication sw$indPipe l_ainterface_OC_PipeIn_OC_4
    INTERFACECONNECT sw$reqPipe hw$request l_ainterface_OC_PipeIn
    INTERFACE l_ainterface_OC_EchoRequest request
    INTERFACE/Ptr l_ainterface_OC_EchoIndication indication
    FIELD l_module_OC_Software sw
    FIELD l_module_OC_Hardware hw
}
MODULE l_module_OC_Echo {
    INTERFACE l_ainterface_OC_EchoRequest request
    INTERFACE/Ptr l_ainterface_OC_EchoIndication indication
    FIELD INTEGER_32 busy
    FIELD INTEGER_32 meth_temp
    FIELD INTEGER_32 v_temp
    FIELD INTEGER_32 v2_temp
    FIELD INTEGER_32 busy_delay
    FIELD INTEGER_32 meth_delay
    FIELD INTEGER_32 v_delay
    FIELD INTEGER_32 v2_delay
    FIELD INTEGER_32 v_type
    METHOD/Rule delay_rule__ENA if (((((busy) != (0)) & ((busy_delay) == (0))) != (0))) {
        STORE :busy = 0
        STORE :busy_delay = 1
        STORE :meth_delay = meth_temp
        STORE :v_delay = v_temp
        STORE :v2_delay = v2_temp
    }
    METHOD request$say2__ENA ( INTEGER_32 meth , INTEGER_32 v , INTEGER_32 v2 ) if ((((busy) != (0)) ^ (1))) {
        STORE :meth_temp = request$say2$meth
        STORE :v_temp = request$say2$v
        STORE :v2_temp = request$say2$v2
        STORE :busy = 1
        STORE :v_type = 2
    }
    METHOD request$say__ENA ( INTEGER_32 meth , INTEGER_32 v ) if ((((busy) != (0)) ^ (1))) {
        STORE :meth_temp = request$say$meth
        STORE :v_temp = request$say$v
        STORE :busy = 1
        STORE :v_type = 1
    }
    METHOD/Rule respond_rule__ENA if (((busy_delay) != (0))) {
        STORE :busy_delay = 0
        CALL/Action ((v_type) == (1)):indication$heard__ENA{meth_delay,v_delay}
        CALL/Action (((v_type) == (1)) ^ 1):indication$heard2__ENA{meth_delay,v_delay,v2_delay}
    }
}
MODULE l_module_OC_Hardware {
    INTERFACECONNECT request lERI$pipe l_ainterface_OC_PipeIn_OC_2
    INTERFACECONNECT lEIO$pipe indication l_ainterface_OC_PipeIn_OC_4
    INTERFACECONNECT lERI$method lEcho$request l_ainterface_OC_EchoRequest
    INTERFACECONNECT lEcho$indication lEIO$method l_ainterface_OC_EchoIndication
    FIELD l_module_OC_P2M_OC_1 lERI
    FIELD l_module_OC_M2P_OC_3 lEIO
    INTERFACE l_ainterface_OC_PipeIn_OC_2 request
    INTERFACE/Ptr l_ainterface_OC_PipeIn_OC_4 indication
    FIELD l_module_OC_Echo lEcho
}
MODULE l_module_OC_Software {
    INTERFACECONNECT request lERO_test$method l_ainterface_OC_EchoRequest
    INTERFACECONNECT lEII_test$method indication l_ainterface_OC_EchoIndication
    INTERFACECONNECT indPipe lEII_test$pipe l_ainterface_OC_PipeIn_OC_0
    INTERFACECONNECT lERO_test$pipe reqPipe l_ainterface_OC_PipeIn
    FIELD l_module_OC_M2P lERO_test
    FIELD l_module_OC_P2M lEII_test
    INTERFACE l_ainterface_OC_EchoRequest request
    INTERFACE/Ptr l_ainterface_OC_EchoIndication indication
    INTERFACE/Ptr l_ainterface_OC_PipeIn reqPipe
    INTERFACE l_ainterface_OC_PipeIn_OC_0 indPipe
}
