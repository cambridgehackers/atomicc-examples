EMODULE l_struct_OC_EchoIndication_data {
    FIELD INTEGER_32 tag
    FIELD l_union_OC_anon_OC_2 data
}
EMODULE l_struct_OC_EchoRequest_data {
    FIELD INTEGER_32 tag
    FIELD l_union_OC_anon data
}
EMODULE l_struct_OC_anon {
    FIELD INTEGER_32 meth
    FIELD INTEGER_32 v
}
EMODULE l_struct_OC_anon_OC_0 {
    FIELD INTEGER_32 meth
    FIELD INTEGER_32 v
    FIELD INTEGER_32 v2
}
EMODULE l_struct_OC_anon_OC_3 {
    FIELD INTEGER_32 meth
    FIELD INTEGER_32 v
}
EMODULE l_struct_OC_anon_OC_4 {
    FIELD INTEGER_32 meth
    FIELD INTEGER_32 v
    FIELD INTEGER_32 v2
}
EMODULE l_union_OC_anon {
    UNION l_struct_OC_anon say
    UNION l_struct_OC_anon_OC_0 say2
    FIELD INTEGER_96 DATA
}
EMODULE l_union_OC_anon_OC_2 {
    UNION l_struct_OC_anon_OC_3 heard
    UNION l_struct_OC_anon_OC_4 heard2
    FIELD INTEGER_96 DATA
}
EMODULE l_ainterface_OC_EchoIndication {
    METHOD heard2__ENA ( INTEGER_32 meth , INTEGER_32 v , INTEGER_32 v2 )
    METHOD heard__ENA ( INTEGER_32 meth , INTEGER_32 v )
}
EMODULE l_ainterface_OC_EchoRequest {
    METHOD say2__ENA ( INTEGER_32 meth , INTEGER_32 v , INTEGER_32 v2 )
    METHOD say__ENA ( INTEGER_32 meth , INTEGER_32 v )
}
EMODULE l_ainterface_OC_PipeIn {
    METHOD enq__ENA ( l_struct_OC_EchoRequest_data v )
}
EMODULE l_ainterface_OC_PipeIn_OC_1 {
    METHOD enq__ENA ( l_struct_OC_EchoIndication_data v )
}
MODULE l_module_OC_Connect {
    SOFTWARE request
    SOFTWARE indication
    INTERFACECONNECT sw$indication indication l_ainterface_OC_EchoIndication
    INTERFACECONNECT request sw$request l_ainterface_OC_EchoRequest
    INTERFACECONNECT hw$indication sw$indPipe l_ainterface_OC_PipeIn_OC_1
    INTERFACECONNECT sw$reqPipe hw$request l_ainterface_OC_PipeIn
    INTERFACE l_ainterface_OC_EchoRequest request
    INTERFACE/Ptr l_ainterface_OC_EchoIndication indication
    FIELD l_module_OC_Software sw
    FIELD l_module_OC_Hardware hw
}
MODULE l_module_OC_Echo {
    INTERFACE l_ainterface_OC_EchoRequest request
    INTERFACE/Ptr l_ainterface_OC_EchoIndication indication
    FIELD INTEGER_32 busy
    FIELD INTEGER_32 meth_temp
    FIELD INTEGER_32 v_temp
    FIELD INTEGER_32 v2_temp
    FIELD INTEGER_32 busy_delay
    FIELD INTEGER_32 meth_delay
    FIELD INTEGER_32 v_delay
    FIELD INTEGER_32 v2_delay
    FIELD INTEGER_32 v_type
    METHOD/Rule delay_rule__ENA if (((((busy) != (0)) & ((busy_delay) == (0))) != (0))) {
        STORE :busy = 0
        STORE :busy_delay = 1
        STORE :meth_delay = meth_temp
        STORE :v_delay = v_temp
        STORE :v2_delay = v2_temp
    }
    METHOD request$say2__ENA ( INTEGER_32 meth , INTEGER_32 v , INTEGER_32 v2 ) if ((((busy) != (0)) ^ (1))) {
        STORE :meth_temp = request$say2$meth
        STORE :v_temp = request$say2$v
        STORE :v2_temp = request$say2$v2
        STORE :busy = 1
        STORE :v_type = 2
    }
    METHOD request$say__ENA ( INTEGER_32 meth , INTEGER_32 v ) if ((((busy) != (0)) ^ (1))) {
        STORE :meth_temp = request$say$meth
        STORE :v_temp = request$say$v
        STORE :busy = 1
        STORE :v_type = 1
    }
    METHOD/Rule respond_rule__ENA if (((busy_delay) != (0))) {
        STORE :busy_delay = 0
        CALL/Action ((v_type) == (1)):indication$heard__ENA{meth_delay,v_delay}
        CALL/Action (((v_type) == (1)) ^ 1):indication$heard2__ENA{meth_delay,v_delay,v2_delay}
    }
}
MODULE l_module_OC_EchoIndicationInput {
    INTERFACE l_ainterface_OC_PipeIn_OC_1 pipe
    INTERFACE/Ptr l_ainterface_OC_EchoIndication method
    METHOD pipe$enq__ENA ( l_struct_OC_EchoIndication_data v ) {
        CALL/Action ((pipe$enq$v$tag) == 1):method$heard__ENA{pipe$enq$v$data$heard$meth,pipe$enq$v$data$heard$v}
        CALL/Action ((pipe$enq$v$tag) == 2):method$heard2__ENA{pipe$enq$v$data$heard2$meth,pipe$enq$v$data$heard2$v,pipe$enq$v$data$heard2$v2}
    }
}
MODULE l_module_OC_EchoIndicationOutput {
    INTERFACE l_ainterface_OC_EchoIndication method
    INTERFACE/Ptr l_ainterface_OC_PipeIn_OC_1 pipe
    METHOD method$heard2__ENA ( INTEGER_32 meth , INTEGER_32 v , INTEGER_32 v2 ) {
        ALLOCA l_struct_OC_EchoIndication_data method$heard2__ENA$data
        LET INTEGER_32 :method$heard2__ENA$data$tag = 2
        LET INTEGER_32 :method$heard2__ENA$data$data$heard2$meth = method$heard2$meth
        LET INTEGER_32 :method$heard2__ENA$data$data$heard2$v = method$heard2$v
        LET INTEGER_32 :method$heard2__ENA$data$data$heard2$v2 = method$heard2$v2
        CALL/Action :pipe$enq__ENA{method$heard2__ENA$data}
    }
    METHOD method$heard__ENA ( INTEGER_32 meth , INTEGER_32 v ) {
        ALLOCA l_struct_OC_EchoIndication_data method$heard__ENA$data
        LET INTEGER_32 :method$heard__ENA$data$tag = 1
        LET INTEGER_32 :method$heard__ENA$data$data$heard$meth = method$heard$meth
        LET INTEGER_32 :method$heard__ENA$data$data$heard$v = method$heard$v
        CALL/Action :pipe$enq__ENA{method$heard__ENA$data}
    }
}
MODULE l_module_OC_EchoRequestInput {
    INTERFACE l_ainterface_OC_PipeIn pipe
    INTERFACE/Ptr l_ainterface_OC_EchoRequest method
    METHOD pipe$enq__ENA ( l_struct_OC_EchoRequest_data v ) {
        CALL/Action ((pipe$enq$v$tag) == 1):method$say__ENA{pipe$enq$v$data$say$meth,pipe$enq$v$data$say$v}
        CALL/Action ((pipe$enq$v$tag) == 2):method$say2__ENA{pipe$enq$v$data$say2$meth,pipe$enq$v$data$say2$v,pipe$enq$v$data$say2$v2}
    }
}
MODULE l_module_OC_EchoRequestOutput {
    INTERFACE l_ainterface_OC_EchoRequest method
    INTERFACE/Ptr l_ainterface_OC_PipeIn pipe
    METHOD method$say2__ENA ( INTEGER_32 meth , INTEGER_32 v , INTEGER_32 v2 ) {
        ALLOCA l_struct_OC_EchoRequest_data method$say2__ENA$data
        LET INTEGER_32 :method$say2__ENA$data$tag = 2
        LET INTEGER_32 :method$say2__ENA$data$data$say2$meth = method$say2$meth
        LET INTEGER_32 :method$say2__ENA$data$data$say2$v = method$say2$v
        LET INTEGER_32 :method$say2__ENA$data$data$say2$v2 = method$say2$v2
        CALL/Action :pipe$enq__ENA{method$say2__ENA$data}
    }
    METHOD method$say__ENA ( INTEGER_32 meth , INTEGER_32 v ) {
        ALLOCA l_struct_OC_EchoRequest_data method$say__ENA$data
        LET INTEGER_32 :method$say__ENA$data$tag = 1
        LET INTEGER_32 :method$say__ENA$data$data$say$meth = method$say$meth
        LET INTEGER_32 :method$say__ENA$data$data$say$v = method$say$v
        CALL/Action :pipe$enq__ENA{method$say__ENA$data}
    }
}
MODULE l_module_OC_Hardware {
    INTERFACECONNECT request lERI$pipe l_ainterface_OC_PipeIn
    INTERFACECONNECT lEIO$pipe indication l_ainterface_OC_PipeIn_OC_1
    INTERFACECONNECT lERI$method lEcho$request l_ainterface_OC_EchoRequest
    INTERFACECONNECT lEcho$indication lEIO$method l_ainterface_OC_EchoIndication
    INTERFACE l_ainterface_OC_PipeIn request
    INTERFACE/Ptr l_ainterface_OC_PipeIn_OC_1 indication
    FIELD l_module_OC_EchoRequestInput lERI
    FIELD l_module_OC_EchoIndicationOutput lEIO
    FIELD l_module_OC_Echo lEcho
}
MODULE l_module_OC_Software {
    INTERFACECONNECT request lERO_test$method l_ainterface_OC_EchoRequest
    INTERFACECONNECT lEII_test$method indication l_ainterface_OC_EchoIndication
    INTERFACECONNECT indPipe lEII_test$pipe l_ainterface_OC_PipeIn_OC_1
    INTERFACECONNECT lERO_test$pipe reqPipe l_ainterface_OC_PipeIn
    INTERFACE l_ainterface_OC_EchoRequest request
    INTERFACE/Ptr l_ainterface_OC_EchoIndication indication
    FIELD l_module_OC_EchoRequestOutput lERO_test
    FIELD l_module_OC_EchoIndicationInput lEII_test
    INTERFACE/Ptr l_ainterface_OC_PipeIn reqPipe
    INTERFACE l_ainterface_OC_PipeIn_OC_1 indPipe
}
