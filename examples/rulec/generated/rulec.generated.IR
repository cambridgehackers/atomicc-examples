STRUCT NOCDataH  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    FIELD Bit(16) length
    FIELD Bit(128) data
}
INTERFACE EchoIfc  {
    FILE rulec_OC_cpp
    SOFTWARE request
    SOFTWARE indication
    INTERFACE EchoRequest request
    INTERFACE/Ptr EchoIndication indication
}
INTERFACE EchoIndication  {
    FILE rulec_OC_cpp
    METHOD/Action heard__ENA ( Bit(32) v )
    METHOD/Action heard2__ENA ( Bit(16) a , Bit(16) b )
    METHOD/Action heard3__ENA ( Bit(16) a , Bit(32) b , Bit(32) c , Bit(16) d )
}
INTERFACE EchoRequest  {
    FILE rulec_OC_cpp
    METHOD/Action say__ENA ( Bit(32) v )
    METHOD/Action say2__ENA ( Bit(16) a , Bit(16) b )
    METHOD/Action setLeds__ENA ( Bit(8) v )
}
INTERFACE FunnelBaseIfc(funnelWidth=99,width=32)  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_funnel_OC_h
    INTERFACE/Count funnelWidth  PipeIn(width=32) in
    INTERFACE/Ptr PipeIn(width=32) out
}
INTERFACE PipeIn(width=32)  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    METHOD/Action enq__ENA ( Bit(width) v )
}
EMODULE Dummy PipeIn(width=32) {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
}
EMODULE FunnelBufferedBase(funnelWidth=99,width=32) FunnelBaseIfc(funnelWidth=99,width=32) {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_funnel_OC_h
}
MODULE Echo EchoIfc {
    FILE rulec_OC_cpp
    FIELD Bit(1) busy
    FIELD Bit(1) busy_delay
    FIELD Bit(32) v_temp
    FIELD Bit(32) v_delay
    FIELD Bit(16) a_temp
    FIELD Bit(16) b_temp
    FIELD Bit(16) a_delay
    FIELD Bit(16) b_delay
    FIELD Bit(32) v_type
    METHOD/Action request$say__ENA ( Bit(32) v ) if ((((busy) != (0)) ^ (1))) {
        PRINTF :printf{"request.say %x\n",request$say$v}
        STORE :v_temp = request$say$v
        STORE :busy = 1
        STORE :v_type = 1
    }
    METHOD/Action request$say2__ENA ( Bit(16) a , Bit(16) b ) if ((((busy) != (0)) ^ (1))) {
        STORE :a_temp = request$say2$a
        STORE :b_temp = request$say2$b
        STORE :busy = 1
        STORE :v_type = 2
    }
    METHOD/Action request$setLeds__ENA ( Bit(8) v )
    METHOD/Rule/Action RULE$delay_rule__ENA if (((((busy) != (0)) & ((busy_delay) == (0))) != (0))) {
        STORE :busy = 0
        STORE :busy_delay = 1
        STORE :v_delay = v_temp
        STORE :a_delay = a_temp
        STORE :b_delay = b_temp
    }
    METHOD/Rule/Action RULE$respond_rule__ENA if (((busy_delay) != (0))) {
        STORE :busy_delay = 0
        CALL/Action ((v_type) == (1)):indication$heard__ENA{v_delay}
        CALL/Action !((v_type) == (1)):indication$heard2__ENA{a_delay,b_delay}
    }
}
