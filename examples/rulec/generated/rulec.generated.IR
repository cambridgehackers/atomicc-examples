EMODULE l_struct_OC_NOCData {
    FIELD INTEGER_128 data
}
INTERFACE l_ainterface_OC_EchoIndication {
    METHOD/Action heard2__ENA ( INTEGER_16 a , INTEGER_16 b )
    METHOD/Action heard3__ENA ( INTEGER_16 a , INTEGER_32 b , INTEGER_32 c , INTEGER_16 d )
    METHOD/Action heard__ENA ( INTEGER_32 v )
}
INTERFACE l_ainterface_OC_EchoRequest {
    METHOD/Action say2__ENA ( INTEGER_16 a , INTEGER_16 b )
    METHOD/Action say__ENA ( INTEGER_32 v )
    METHOD/Action setLeds__ENA ( INTEGER_8 v )
}
INTERFACE l_ainterface_OC_PipeIn {
    METHOD/Action enq__ENA ( l_struct_OC_NOCData v )
}
INTERFACE l_ainterface_OC_PipeInB {
    METHOD/Action enq__ENA ( INTEGER_32 v , INTEGER_16 length )
}
INTERFACE l_ainterface_OC_PipeInH {
    METHOD/Action enq__ENA ( l_struct_OC_NOCData v , INTEGER_16 length )
}
EMODULE UserTop {
    INTERFACE l_ainterface_OC_PipeInB write
    INTERFACE/Ptr l_ainterface_OC_PipeInB read
}
EMODULE l_top {
    INTERFACE l_ainterface_OC_PipeIn request
    INTERFACE/Ptr l_ainterface_OC_PipeInH indication
}
MODULE Echo {
    SOFTWARE request
    SOFTWARE indication
    INTERFACE l_ainterface_OC_EchoRequest request
    INTERFACE/Ptr l_ainterface_OC_EchoIndication indication
    FIELD INTEGER_1 busy
    FIELD INTEGER_1 busy_delay
    FIELD INTEGER_32 v_temp
    FIELD INTEGER_32 v_delay
    FIELD INTEGER_16 a_temp
    FIELD INTEGER_16 b_temp
    FIELD INTEGER_16 a_delay
    FIELD INTEGER_16 b_delay
    FIELD INTEGER_32 v_type
    METHOD/Rule/Action RULE$delay_rule__ENA if (((((busy) != (0)) & ((busy_delay) == (0))) != (0))) {
        STORE :busy = 0
        STORE :busy_delay = 1
        STORE :v_delay = v_temp
        STORE :a_delay = a_temp
        STORE :b_delay = b_temp
    }
    METHOD/Rule/Action RULE$respond_rule__ENA if (((busy_delay) != (0))) {
        STORE :busy_delay = 0
        CALL/Action ((v_type) == (1)):indication$heard__ENA{v_delay}
        CALL/Action (((v_type) == (1)) ^ 1):indication$heard2__ENA{a_delay,b_delay}
    }
    METHOD/Action request$say2__ENA ( INTEGER_16 a , INTEGER_16 b ) if ((((busy) != (0)) ^ (1))) {
        STORE :a_temp = request$say2$a
        STORE :b_temp = request$say2$b
        STORE :busy = 1
        STORE :v_type = 2
    }
    METHOD/Action request$say__ENA ( INTEGER_32 v ) if ((((busy) != (0)) ^ (1))) {
        STORE :v_temp = request$say$v
        STORE :busy = 1
        STORE :v_type = 1
    }
    METHOD/Action request$setLeds__ENA ( INTEGER_8 v )
}
