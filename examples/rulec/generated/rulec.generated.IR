EMODULE l_struct_OC_NOCData {
    FIELD/Count 4  INTEGER_32 data
}
EMODULE l_ainterface_OC_CNCONNECTNET2 {
    FIELD/input INTEGER_1 IN1
    FIELD/input INTEGER_1 IN2
    FIELD/output INTEGER_1 OUT1
    FIELD/output INTEGER_1 OUT2
}
EMODULE l_ainterface_OC_EchoIndication {
    METHOD heard2__ENA ( INTEGER_16 a , INTEGER_16 b )
    METHOD heard3__ENA ( INTEGER_16 a , INTEGER_32 b , INTEGER_32 c , INTEGER_16 d )
    METHOD heard__ENA ( INTEGER_32 v )
}
EMODULE l_ainterface_OC_EchoRequest {
    METHOD say2__ENA ( INTEGER_16 a , INTEGER_16 b )
    METHOD say__ENA ( INTEGER_32 v )
    METHOD setLeds__ENA ( INTEGER_8 v )
    METHOD zsay4__ENA
}
EMODULE l_ainterface_OC_Mmcme2MMCME2_ADV {
    FIELD/Ptr/parameter INTEGER_8 BANDWIDTH
    FIELD/input INTEGER_1 CLKFBIN
    FIELD/output INTEGER_1 CLKFBOUT
    FIELD/output INTEGER_1 CLKFBOUTB
    FIELD/parameter FLOAT CLKFBOUT_MULT_F
    FIELD/parameter FLOAT CLKFBOUT_PHASE
    FIELD/Ptr/parameter INTEGER_8 CLKFBOUT_USE_FINE_PS
    FIELD/output INTEGER_1 CLKFBSTOPPED
    FIELD/input INTEGER_1 CLKIN1
    FIELD/parameter FLOAT CLKIN1_PERIOD
    FIELD/input INTEGER_1 CLKIN2
    FIELD/parameter FLOAT CLKIN2_PERIOD
    FIELD/input INTEGER_1 CLKINSEL
    FIELD/output INTEGER_1 CLKINSTOPPED
    FIELD/output INTEGER_1 CLKOUT0
    FIELD/output INTEGER_1 CLKOUT0B
    FIELD/parameter FLOAT CLKOUT0_DIVIDE_F
    FIELD/parameter FLOAT CLKOUT0_DUTY_CYCLE
    FIELD/parameter FLOAT CLKOUT0_PHASE
    FIELD/Ptr/parameter INTEGER_8 CLKOUT0_USE_FINE_PS
    FIELD/output INTEGER_1 CLKOUT1
    FIELD/output INTEGER_1 CLKOUT1B
    FIELD/parameter INTEGER_32 CLKOUT1_DIVIDE
    FIELD/parameter FLOAT CLKOUT1_DUTY_CYCLE
    FIELD/parameter FLOAT CLKOUT1_PHASE
    FIELD/Ptr/parameter INTEGER_8 CLKOUT1_USE_FINE_PS
    FIELD/output INTEGER_1 CLKOUT2
    FIELD/output INTEGER_1 CLKOUT2B
    FIELD/parameter INTEGER_32 CLKOUT2_DIVIDE
    FIELD/parameter FLOAT CLKOUT2_DUTY_CYCLE
    FIELD/parameter FLOAT CLKOUT2_PHASE
    FIELD/Ptr/parameter INTEGER_8 CLKOUT2_USE_FINE_PS
    FIELD/output INTEGER_1 CLKOUT3
    FIELD/output INTEGER_1 CLKOUT3B
    FIELD/parameter INTEGER_32 CLKOUT3_DIVIDE
    FIELD/parameter FLOAT CLKOUT3_DUTY_CYCLE
    FIELD/parameter FLOAT CLKOUT3_PHASE
    FIELD/Ptr/parameter INTEGER_8 CLKOUT3_USE_FINE_PS
    FIELD/output INTEGER_1 CLKOUT4
    FIELD/Ptr/parameter INTEGER_8 CLKOUT4_CASCADE
    FIELD/parameter INTEGER_32 CLKOUT4_DIVIDE
    FIELD/parameter FLOAT CLKOUT4_DUTY_CYCLE
    FIELD/parameter FLOAT CLKOUT4_PHASE
    FIELD/Ptr/parameter INTEGER_8 CLKOUT4_USE_FINE_PS
    FIELD/output INTEGER_1 CLKOUT5
    FIELD/parameter INTEGER_32 CLKOUT5_DIVIDE
    FIELD/parameter FLOAT CLKOUT5_DUTY_CYCLE
    FIELD/parameter FLOAT CLKOUT5_PHASE
    FIELD/Ptr/parameter INTEGER_8 CLKOUT5_USE_FINE_PS
    FIELD/output INTEGER_1 CLKOUT6
    FIELD/parameter INTEGER_32 CLKOUT6_DIVIDE
    FIELD/parameter FLOAT CLKOUT6_DUTY_CYCLE
    FIELD/parameter FLOAT CLKOUT6_PHASE
    FIELD/Ptr/parameter INTEGER_8 CLKOUT6_USE_FINE_PS
    FIELD/Ptr/parameter INTEGER_8 COMPENSATION
    FIELD/input INTEGER_7 DADDR
    FIELD/input INTEGER_1 DCLK
    FIELD/input INTEGER_1 DEN
    FIELD/input INTEGER_16 DI
    FIELD/parameter INTEGER_32 DIVCLK_DIVIDE
    FIELD/output INTEGER_16 DO
    FIELD/output INTEGER_1 DRDY
    FIELD/input INTEGER_1 DWE
    FIELD/parameter INTEGER_32 IS_CLKINSEL_INVERTED
    FIELD/parameter INTEGER_32 IS_PSEN_INVERTED
    FIELD/parameter INTEGER_32 IS_PSINCDEC_INVERTED
    FIELD/parameter INTEGER_32 IS_PWRDWN_INVERTED
    FIELD/parameter INTEGER_32 IS_RST_INVERTED
    FIELD/output INTEGER_1 LOCKED
    FIELD/input INTEGER_1 PSCLK
    FIELD/output INTEGER_1 PSDONE
    FIELD/input INTEGER_1 PSEN
    FIELD/input INTEGER_1 PSINCDEC
    FIELD/input INTEGER_1 PWRDWN
    FIELD/parameter FLOAT REF_JITTER1
    FIELD/parameter FLOAT REF_JITTER2
    FIELD/input INTEGER_1 RST
    FIELD/Ptr/parameter INTEGER_8 SS_EN
    FIELD/Ptr/parameter INTEGER_8 SS_MODE
    FIELD/parameter INTEGER_32 SS_MOD_PERIOD
    FIELD/Ptr/parameter INTEGER_8 STARTUP_WAIT
}
EMODULE l_ainterface_OC_PipeIn {
    METHOD enq__ENA ( l_struct_OC_NOCData v )
}
EMODULE l_ainterface_OC_PipeInB {
    METHOD enq__ENA ( INTEGER_32 v , INTEGER_1 last )
}
EMODULE l_ainterface_OC_PipeInH {
    METHOD enq__ENA ( l_struct_OC_NOCData v , INTEGER_16 length )
}
EMODULE l_ainterface_OC_PipeOut {
    METHOD deq__ENA
    METHOD first l_struct_OC_NOCData
}
EMODULE l_module_OC_Fifo {
    INTERFACE l_ainterface_OC_PipeIn in
    INTERFACE l_ainterface_OC_PipeOut out
}
EMODULE l_module_OC_MMCME2_ADV {
    INTERFACE l_ainterface_OC_Mmcme2MMCME2_ADV _
}
MODULE l_module_OC_AdapterFromBus {
    INTERFACE l_ainterface_OC_PipeInB in
    INTERFACE/Ptr l_ainterface_OC_PipeInH out
    FIELD INTEGER_1 waitForEnq
    FIELD INTEGER_128 buffer
    METHOD in$enq__ENA ( INTEGER_32 v , INTEGER_1 last ) if (((waitForEnq) ^ (1))) {
        STORE :buffer = (in$enq$v) | ((buffer) << (32))
        STORE (in$enq$last):waitForEnq = 1
    }
    METHOD/Rule pushValue__ENA if ((waitForEnq)) {
        ALLOCA l_struct_OC_NOCData pushValue__ENA$agg_2e_tmp
        LET INTEGER_128 :pushValue__ENA$agg_2e_tmp = buffer
        CALL/Action :out$enq__ENA{pushValue__ENA$agg_2e_tmp,0}
        STORE :waitForEnq = 0
    }
}
MODULE l_module_OC_AdapterToBus {
    INTERFACE l_ainterface_OC_PipeInH in
    INTERFACE/Ptr l_ainterface_OC_PipeInB out
    FIELD INTEGER_16 remain
    FIELD INTEGER_128 buffer
    METHOD/Rule copyRule__ENA if (((remain) != (0))) {
        CALL/Action :out$enq__ENA{buffer,(remain) == (1)}
        STORE :remain = (remain) + (-1)
        STORE :buffer = (buffer)  >>  (32)
    }
    METHOD in$enq__ENA ( l_struct_OC_NOCData v , INTEGER_16 length ) if (((remain) == (0))) {
        STORE :buffer = in$enq$v
        STORE :remain = (in$enq$length) + (1)
    }
}
MODULE l_module_OC_CONNECTNET2 {
    INTERFACE l_ainterface_OC_CNCONNECTNET2 _
    METHOD/Rule assign__ENA {
        LET INTEGER_1 :OUT1 = IN1
        LET INTEGER_1 :OUT2 = IN2
    }
}
MODULE l_module_OC_Echo {
    SOFTWARE request
    SOFTWARE indication
    INTERFACE l_ainterface_OC_EchoRequest request
    INTERFACE/Ptr l_ainterface_OC_EchoIndication indication
    FIELD INTEGER_32 busy
    FIELD INTEGER_32 v_temp
    FIELD INTEGER_32 v_delay
    FIELD INTEGER_16 a_temp
    FIELD INTEGER_16 b_temp
    FIELD INTEGER_16 a_delay
    FIELD INTEGER_16 b_delay
    FIELD INTEGER_18 xxx
    FIELD INTEGER_32 busy_delay
    FIELD INTEGER_32 v_type
    FIELD l_module_OC_MMCME2_ADV mmcm
    METHOD/Rule delay_rule__ENA if (((((busy) != (0)) & ((busy_delay) == (0))) != (0))) {
        PRINTF :printf{"[delay_rule:%d]Echo\n",5}
        STORE :busy = 0
        STORE :busy_delay = 1
        STORE :v_delay = v_temp
        STORE :a_delay = a_temp
        STORE :b_delay = b_temp
    }
    METHOD request$say2__ENA ( INTEGER_16 a , INTEGER_16 b ) if ((((busy) != (0)) ^ (1))) {
        PRINTF :printf{"[%s:%d]Echo\n","request$say2",2}
        STORE :a_temp = request$say2$a
        STORE :b_temp = request$say2$b
        STORE :busy = 1
        STORE :v_type = 2
    }
    METHOD request$say__ENA ( INTEGER_32 v ) if ((((busy) != (0)) ^ (1))) {
        PRINTF :printf{"[%s:%d]Echo\n","request$say",1}
        STORE :v_temp = request$say$v
        STORE :xxx = request$say$v
        STORE :busy = 1
        STORE :v_type = 1
    }
    METHOD request$setLeds__ENA ( INTEGER_8 v )
    METHOD request$zsay4__ENA {
        PRINTF :printf{"[%s:%d]Echo\n","request$zsay4",4}
    }
    METHOD/Rule respond_rule__ENA if (((busy_delay) != (0))) {
        PRINTF :printf{"[respond_rule:%d]Echo\n",6}
        STORE :busy_delay = 0
        CALL/Action ((v_type) == (1)):indication$heard__ENA{v_delay}
        CALL/Action (((v_type) == (1)) ^ 1):indication$heard2__ENA{a_delay,b_delay}
    }
}
MODULE l_module_OC_Fifo1 {
    INTERFACE l_ainterface_OC_PipeIn in
    INTERFACE l_ainterface_OC_PipeOut out
    FIELD l_struct_OC_NOCData element
    FIELD INTEGER_1 full
    METHOD in$enq__ENA ( l_struct_OC_NOCData v ) if (((full) ^ (1))) {
        STORE :element = in$enq$v
        STORE :full = 1
    }
    METHOD out$deq__ENA if ((full)) {
        STORE :full = 0
    }
    METHOD out$first l_struct_OC_NOCData = ((element)) if ((full))
}
MODULE l_module_OC_MuxPipe {
    INTERFACE l_ainterface_OC_PipeIn in
    INTERFACE l_ainterface_OC_PipeIn forward
    INTERFACE/Ptr l_ainterface_OC_PipeIn out
    FIELD l_module_OC_Fifo1 forwardFifo
    METHOD/Rule fifoRule__ENA {
        ALLOCA l_struct_OC_NOCData fifoRule__ENA$agg_2e_tmp
        CALL :forwardFifo$out$first{}
        LET l_struct_OC_NOCData :fifoRule__ENA$agg_2e_tmp = forwardFifo$out$first
        CALL/Action :out$enq__ENA{fifoRule__ENA$agg_2e_tmp}
        CALL/Action :forwardFifo$out$deq__ENA{}
    }
    METHOD forward$enq__ENA ( l_struct_OC_NOCData v ) {
        CALL/Action :forwardFifo$in$enq__ENA{forward$enq$v}
    }
    METHOD in$enq__ENA ( l_struct_OC_NOCData v ) {
        CALL/Action :out$enq__ENA{in$enq$v}
    }
}
