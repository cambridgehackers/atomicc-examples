EMODULE l_struct_OC_NOCData {
    FIELD/Count 4  INTEGER_32 data
}
EMODULE l_ainterface_OC_CNCONNECTNET2 {
    FIELD/input INTEGER_1 IN1
    FIELD/input INTEGER_1 IN2
    FIELD/output INTEGER_1 OUT1
    FIELD/output INTEGER_1 OUT2
}
EMODULE l_ainterface_OC_EchoIndication {
    METHOD heard2__ENA ( INTEGER_16 a , INTEGER_16 b )
    METHOD heard3__ENA ( INTEGER_16 a , INTEGER_32 b , INTEGER_32 c , INTEGER_16 d )
    METHOD heard__ENA ( INTEGER_32 v )
}
EMODULE l_ainterface_OC_EchoRequest {
    METHOD say2__ENA ( INTEGER_16 a , INTEGER_16 b )
    METHOD say__ENA ( INTEGER_32 v )
    METHOD setLeds__ENA ( INTEGER_8 v )
    METHOD zsay4__ENA
}
EMODULE l_ainterface_OC_PipeIn {
    METHOD enq__ENA ( l_struct_OC_NOCData v )
}
EMODULE l_ainterface_OC_PipeInB {
    METHOD enq__ENA ( INTEGER_32 v , INTEGER_1 last )
}
EMODULE l_ainterface_OC_PipeInH {
    METHOD enq__ENA ( l_struct_OC_NOCData v , INTEGER_16 length )
}
EMODULE l_ainterface_OC_PipeOut {
    METHOD deq__ENA
    METHOD first l_struct_OC_NOCData
}
EMODULE Fifo {
    INTERFACE l_ainterface_OC_PipeIn in
    INTERFACE l_ainterface_OC_PipeOut out
}
EMODULE l_top {
    INTERFACE l_ainterface_OC_PipeIn request
    INTERFACE/Ptr l_ainterface_OC_PipeIn indication
}
MODULE AdapterFromBus {
    INTERFACE l_ainterface_OC_PipeInB in
    INTERFACE/Ptr l_ainterface_OC_PipeInH out
    FIELD INTEGER_1 waitForEnq
    FIELD INTEGER_128 buffer
    METHOD/Rule RULEpushValue__ENA if ((waitForEnq)) {
        ALLOCA l_struct_OC_NOCData RULEpushValue__ENA$agg_2e_tmp
        LET INTEGER_128 :RULEpushValue__ENA$agg_2e_tmp = buffer
        CALL/Action :out$enq__ENA{RULEpushValue__ENA$agg_2e_tmp,0}
        STORE :waitForEnq = 0
    }
    METHOD in$enq__ENA ( INTEGER_32 v , INTEGER_1 last ) if (((waitForEnq) ^ (1))) {
        STORE :buffer = __bitconcat{__bitsubstr{buffer,127,32},in$enq$v}
        STORE (in$enq$last):waitForEnq = 1
    }
}
MODULE AdapterToBus {
    INTERFACE l_ainterface_OC_PipeInH in
    INTERFACE/Ptr l_ainterface_OC_PipeInB out
    FIELD INTEGER_16 remain
    FIELD INTEGER_128 buffer
    METHOD/Rule RULEcopyRule__ENA if (((remain) != (0))) {
        CALL/Action :out$enq__ENA{buffer,(remain) == (1)}
        STORE :remain = (remain) + (-1)
        STORE :buffer = (buffer)  >>  (32)
    }
    METHOD in$enq__ENA ( l_struct_OC_NOCData v , INTEGER_16 length ) if (((remain) == (0))) {
        STORE :buffer = in$enq$v
        STORE :remain = (in$enq$length) + (1)
    }
}
MODULE CONNECTNET2 {
    INTERFACE l_ainterface_OC_CNCONNECTNET2 _
    METHOD/Rule RULEassign__ENA {
        LET INTEGER_1 :OUT1 = IN1
        LET INTEGER_1 :OUT2 = IN2
    }
}
MODULE Echo {
    SOFTWARE request
    SOFTWARE indication
    INTERFACE l_ainterface_OC_EchoRequest request
    INTERFACE/Ptr l_ainterface_OC_EchoIndication indication
    FIELD INTEGER_32 busy
    FIELD INTEGER_32 v_temp
    FIELD INTEGER_32 v_delay
    FIELD INTEGER_16 a_temp
    FIELD INTEGER_16 b_temp
    FIELD INTEGER_16 a_delay
    FIELD INTEGER_16 b_delay
    FIELD INTEGER_32 busy_delay
    FIELD INTEGER_32 v_type
    METHOD/Rule RULEdelay_rule__ENA if (((((busy) != (0)) & ((busy_delay) == (0))) != (0))) {
        PRINTF :printf{"[delay_rule:%d]Echo\n",5}
        STORE :busy = 0
        STORE :busy_delay = 1
        STORE :v_delay = v_temp
        STORE :a_delay = a_temp
        STORE :b_delay = b_temp
    }
    METHOD/Rule RULErespond_rule__ENA if (((busy_delay) != (0))) {
        PRINTF :printf{"[respond_rule:%d]Echo\n",6}
        STORE :busy_delay = 0
        CALL/Action ((v_type) == (1)):indication$heard__ENA{v_delay}
        CALL/Action (((v_type) == (1)) ^ 1):indication$heard2__ENA{a_delay,b_delay}
    }
    METHOD request$say2__ENA ( INTEGER_16 a , INTEGER_16 b ) if ((((busy) != (0)) ^ (1))) {
        PRINTF :printf{"[%s:%d]Echo\n","request$say2",2}
        STORE :a_temp = request$say2$a
        STORE :b_temp = request$say2$b
        STORE :busy = 1
        STORE :v_type = 2
    }
    METHOD request$say__ENA ( INTEGER_32 v ) if ((((busy) != (0)) ^ (1))) {
        PRINTF :printf{"[%s:%d]Echo\n","request$say",1}
        STORE :v_temp = request$say$v
        STORE :busy = 1
        STORE :v_type = 1
    }
    METHOD request$setLeds__ENA ( INTEGER_8 v )
    METHOD request$zsay4__ENA {
        PRINTF :printf{"[%s:%d]Echo\n","request$zsay4",4}
    }
}
MODULE Fifo1 {
    INTERFACE l_ainterface_OC_PipeIn in
    INTERFACE l_ainterface_OC_PipeOut out
    FIELD l_struct_OC_NOCData element
    FIELD INTEGER_1 full
    METHOD in$enq__ENA ( l_struct_OC_NOCData v ) if (((full) ^ (1))) {
        STORE :element = in$enq$v
        STORE :full = 1
    }
    METHOD out$deq__ENA if ((full)) {
        STORE :full = 0
    }
    METHOD out$first l_struct_OC_NOCData = ((element)) if ((full))
}
MODULE MuxPipe {
    INTERFACE l_ainterface_OC_PipeIn in
    INTERFACE l_ainterface_OC_PipeIn forward
    INTERFACE/Ptr l_ainterface_OC_PipeIn out
    FIELD Fifo1 forwardFifo
    METHOD/Rule RULEfifoRule__ENA {
        ALLOCA l_struct_OC_NOCData RULEfifoRule__ENA$agg_2e_tmp
        CALL :forwardFifo$out$first{}
        LET l_struct_OC_NOCData :RULEfifoRule__ENA$agg_2e_tmp = forwardFifo$out$first
        CALL/Action :out$enq__ENA{RULEfifoRule__ENA$agg_2e_tmp}
        CALL/Action :forwardFifo$out$deq__ENA{}
    }
    METHOD forward$enq__ENA ( l_struct_OC_NOCData v ) {
        CALL/Action :forwardFifo$in$enq__ENA{forward$enq$v}
    }
    METHOD in$enq__ENA ( l_struct_OC_NOCData v ) {
        CALL/Action :out$enq__ENA{in$enq$v}
    }
}
MODULE UserTop {
    INTERFACECONNECT radapter_0$out read l_ainterface_OC_PipeInB
    INTERFACECONNECT wadapter_0$in write l_ainterface_OC_PipeInB
    INTERFACECONNECT ctop$indication ic$indication l_ainterface_OC_PipeIn
    INTERFACECONNECT radapter_0$in ic$rad l_ainterface_OC_PipeInH
    INTERFACECONNECT ctop$request rc$request l_ainterface_OC_PipeIn
    INTERFACECONNECT wadapter_0$out rc$wad l_ainterface_OC_PipeInH
    INTERFACE l_ainterface_OC_PipeInB write
    INTERFACE/Ptr l_ainterface_OC_PipeInB read
    FIELD AdapterToBus radapter_0
    FIELD AdapterFromBus wadapter_0
    FIELD indConnect ic
    FIELD reqConnect rc
    FIELD l_top ctop
}
MODULE indConnect {
    INTERFACE l_ainterface_OC_PipeIn indication
    INTERFACE/Ptr l_ainterface_OC_PipeInH rad
    METHOD indication$enq__ENA ( l_struct_OC_NOCData v ) {
        PRINTF :printf{"indConnect.enq v %llx len %lx\n",indication$enq$v,(indication$enq$v) - (1)}
        CALL/Action :rad$enq__ENA{indication$enq$v,(indication$enq$v) - (1)}
    }
}
MODULE reqConnect {
    INTERFACE l_ainterface_OC_PipeInH wad
    INTERFACE/Ptr l_ainterface_OC_PipeIn request
    METHOD wad$enq__ENA ( l_struct_OC_NOCData v , INTEGER_16 length ) {
        PRINTF :printf{"reqConnect.enq v %llx length %lx\n",wad$enq$v,wad$enq$length}
        CALL/Action :request$enq__ENA{wad$enq$v}
    }
}
