EMODULE l_ainterface_OC_EchoIndication {
    METHOD heard2__ENA ( INTEGER_16 a , INTEGER_16 b )
    METHOD heard__ENA ( INTEGER_32 v )
}
EMODULE l_ainterface_OC_EchoRequest {
    METHOD say2__ENA ( INTEGER_16 a , INTEGER_16 b )
    METHOD say__ENA ( INTEGER_32 v )
    METHOD setLeds__ENA ( INTEGER_8 v )
}
EMODULE l_ainterface_OC_PipeIn {
    METHOD enq__ENA ( l_serialize_OC_P2M_MD_EchoRequest_OD__KD__KD_Data v )
}
EMODULE l_ainterface_OC_PipeIn_OC_0 {
    METHOD enq__ENA ( l_serialize_OC_M2P_MD_EchoIndication_OD__KD__KD_Data v )
}
EMODULE l_ainterface_OC_PipeIn_OC_1 {
    METHOD enq__ENA ( l_serialize_OC_P2M_MD_EchoIndication_OD__KD__KD_Data v )
}
EMODULE l_ainterface_OC_PipeIn_OC_2 {
    METHOD enq__ENA ( l_serialize_OC_M2P_MD_EchoRequest_OD__KD__KD_Data v )
}
EMODULE l_serialize_OC_M2P_MD_EchoIndication_OD__KD__KD_Data {
    INTERFACE l_ainterface_OC_EchoIndication ifc
    FIELD INTEGER_32 unused
}
EMODULE l_serialize_OC_M2P_MD_EchoRequest_OD__KD__KD_Data {
    INTERFACE l_ainterface_OC_EchoRequest ifc
    FIELD INTEGER_32 unused
}
EMODULE l_serialize_OC_P2M_MD_EchoIndication_OD__KD__KD_Data {
    INTERFACE l_ainterface_OC_EchoIndication ifc
    FIELD INTEGER_32 unused
}
EMODULE l_serialize_OC_P2M_MD_EchoRequest_OD__KD__KD_Data {
    INTERFACE l_ainterface_OC_EchoRequest ifc
    FIELD INTEGER_32 unused
}
EMODULE l_module_OC_M2P {
    INTERFACE l_ainterface_OC_EchoIndication method
    INTERFACE/Ptr l_ainterface_OC_PipeIn_OC_0 pipe
    INTERFACE l_ainterface_OC_PipeIn_OC_0 unused
}
EMODULE l_module_OC_P2M {
    INTERFACE l_ainterface_OC_PipeIn pipe
    INTERFACE/Ptr l_ainterface_OC_EchoRequest method
}
MODULE l_module_OC_Echo {
    INTERFACE l_ainterface_OC_EchoRequest request
    INTERFACE/Ptr l_ainterface_OC_EchoIndication indication
    FIELD INTEGER_32 busy
    FIELD INTEGER_32 v_temp
    FIELD INTEGER_32 v_delay
    FIELD INTEGER_16 a_temp
    FIELD INTEGER_16 b_temp
    FIELD INTEGER_16 a_delay
    FIELD INTEGER_16 b_delay
    FIELD INTEGER_32 busy_delay
    FIELD INTEGER_32 v_type
    METHOD/Rule delay_rule__ENA if (((((busy) != (0)) & ((busy_delay) == (0))) != (0))) {
        PRINTF :printf{"[delay_rule:%d]Echo\n",65}
        STORE :busy = 0
        STORE :busy_delay = 1
        STORE :v_delay = v_temp
        STORE :a_delay = a_temp
        STORE :b_delay = b_temp
    }
    METHOD request$say2__ENA ( INTEGER_16 a , INTEGER_16 b ) if ((((busy) != (0)) ^ (1))) {
        PRINTF :printf{"[%s:%d]Echo\n",("request$say2"),55}
        STORE :a_temp = request$say2$a
        STORE :b_temp = request$say2$b
        STORE :busy = 1
        STORE :v_type = 2
    }
    METHOD request$say__ENA ( INTEGER_32 v ) if ((((busy) != (0)) ^ (1))) {
        PRINTF :printf{"[%s:%d]Echo\n",("request$say"),49}
        STORE :v_temp = request$say$v
        STORE :busy = 1
        STORE :v_type = 1
    }
    METHOD request$setLeds__ENA ( INTEGER_8 v )
    METHOD/Rule respond_rule__ENA if (((busy_delay) != (0))) {
        PRINTF :printf{"[respond_rule:%d]Echo\n",73}
        STORE :busy_delay = 0
        CALL/Action ((v_type) == (1)):indication$heard__ENA{v_delay}
        CALL/Action (((v_type) == (1)) ^ 1):indication$heard2__ENA{a_delay,b_delay}
    }
}
MODULE l_module_OC_Hardware {
    SOFTWARE request
    SOFTWARE indication
    INTERFACECONNECT lERI$method lEcho$request l_ainterface_OC_EchoRequest
    INTERFACECONNECT lEcho$indication lEIO$method l_ainterface_OC_EchoIndication
    INTERFACECONNECT request lERI$pipe l_ainterface_OC_PipeIn
    INTERFACECONNECT indication lEIO$pipe l_ainterface_OC_PipeIn_OC_0
    FIELD l_module_OC_P2M lERI
    FIELD l_module_OC_M2P lEIO
    INTERFACE l_ainterface_OC_PipeIn request
    INTERFACE/Ptr l_ainterface_OC_PipeIn_OC_0 indication
    FIELD l_module_OC_Echo lEcho
}
