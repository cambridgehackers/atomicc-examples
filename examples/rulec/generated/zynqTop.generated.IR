EMODULE l_struct_OC_AddrCount {
    FIELD INTEGER_6 id
    FIELD INTEGER_10 count
    FIELD INTEGER_5 addr
}
EMODULE l_struct_OC_BusData {
    FIELD INTEGER_32 data
}
EMODULE l_struct_OC_NOCData {
    FIELD/Count 4  INTEGER_32 data
}
EMODULE l_struct_OC_PortalInfo {
    FIELD l_struct_OC_AddrCount ac
    FIELD INTEGER_1 last
}
EMODULE l_struct_OC_ReadResp {
    FIELD INTEGER_6 id
    FIELD INTEGER_32 data
}
EMODULE l_ainterface_OC_ClockIfc {
    FIELD/parameter FLOAT CLKIN1_PERIOD
    FIELD/input INTEGER_1 userCLK
    FIELD/input INTEGER_1 usernRST
    FIELD/output INTEGER_1 clockOut
}
EMODULE l_ainterface_OC_MResetInverterResetInverter {
    FIELD/input INTEGER_1 RESET_IN
    FIELD/output INTEGER_1 RESET_OUT
}
EMODULE l_ainterface_OC_MaxiI {
    METHOD B__ENA ( INTEGER_12 id , INTEGER_2 resp )
    METHOD R__ENA ( INTEGER_32 data , INTEGER_12 id , INTEGER_1 last , INTEGER_2 resp )
}
EMODULE l_ainterface_OC_MaxiO {
    METHOD AR__ENA ( INTEGER_32 addr , INTEGER_12 id , INTEGER_4 len )
    METHOD AW__ENA ( INTEGER_32 addr , INTEGER_12 id , INTEGER_4 len )
    METHOD W__ENA ( INTEGER_32 data , INTEGER_12 id , INTEGER_1 last )
}
EMODULE l_ainterface_OC_MbufgBUFG {
    FIELD/input INTEGER_1 I
    FIELD/output INTEGER_1 O
}
EMODULE l_ainterface_OC_Mmcme2MMCME2_ADV {
    FIELD/Ptr/parameter INTEGER_8 BANDWIDTH
    FIELD/input INTEGER_1 CLKFBIN
    FIELD/output INTEGER_1 CLKFBOUT
    FIELD/output INTEGER_1 CLKFBOUTB
    FIELD/parameter FLOAT CLKFBOUT_MULT_F
    FIELD/parameter FLOAT CLKFBOUT_PHASE
    FIELD/Ptr/parameter INTEGER_8 CLKFBOUT_USE_FINE_PS
    FIELD/output INTEGER_1 CLKFBSTOPPED
    FIELD/input INTEGER_1 CLKIN1
    FIELD/parameter FLOAT CLKIN1_PERIOD
    FIELD/input INTEGER_1 CLKIN2
    FIELD/parameter FLOAT CLKIN2_PERIOD
    FIELD/input INTEGER_1 CLKINSEL
    FIELD/output INTEGER_1 CLKINSTOPPED
    FIELD/output INTEGER_1 CLKOUT0
    FIELD/output INTEGER_1 CLKOUT0B
    FIELD/parameter FLOAT CLKOUT0_DIVIDE_F
    FIELD/parameter FLOAT CLKOUT0_DUTY_CYCLE
    FIELD/parameter FLOAT CLKOUT0_PHASE
    FIELD/Ptr/parameter INTEGER_8 CLKOUT0_USE_FINE_PS
    FIELD/output INTEGER_1 CLKOUT1
    FIELD/output INTEGER_1 CLKOUT1B
    FIELD/parameter INTEGER_32 CLKOUT1_DIVIDE
    FIELD/parameter FLOAT CLKOUT1_DUTY_CYCLE
    FIELD/parameter FLOAT CLKOUT1_PHASE
    FIELD/Ptr/parameter INTEGER_8 CLKOUT1_USE_FINE_PS
    FIELD/output INTEGER_1 CLKOUT2
    FIELD/output INTEGER_1 CLKOUT2B
    FIELD/parameter INTEGER_32 CLKOUT2_DIVIDE
    FIELD/parameter FLOAT CLKOUT2_DUTY_CYCLE
    FIELD/parameter FLOAT CLKOUT2_PHASE
    FIELD/Ptr/parameter INTEGER_8 CLKOUT2_USE_FINE_PS
    FIELD/output INTEGER_1 CLKOUT3
    FIELD/output INTEGER_1 CLKOUT3B
    FIELD/parameter INTEGER_32 CLKOUT3_DIVIDE
    FIELD/parameter FLOAT CLKOUT3_DUTY_CYCLE
    FIELD/parameter FLOAT CLKOUT3_PHASE
    FIELD/Ptr/parameter INTEGER_8 CLKOUT3_USE_FINE_PS
    FIELD/output INTEGER_1 CLKOUT4
    FIELD/Ptr/parameter INTEGER_8 CLKOUT4_CASCADE
    FIELD/parameter INTEGER_32 CLKOUT4_DIVIDE
    FIELD/parameter FLOAT CLKOUT4_DUTY_CYCLE
    FIELD/parameter FLOAT CLKOUT4_PHASE
    FIELD/Ptr/parameter INTEGER_8 CLKOUT4_USE_FINE_PS
    FIELD/output INTEGER_1 CLKOUT5
    FIELD/parameter INTEGER_32 CLKOUT5_DIVIDE
    FIELD/parameter FLOAT CLKOUT5_DUTY_CYCLE
    FIELD/parameter FLOAT CLKOUT5_PHASE
    FIELD/Ptr/parameter INTEGER_8 CLKOUT5_USE_FINE_PS
    FIELD/output INTEGER_1 CLKOUT6
    FIELD/parameter INTEGER_32 CLKOUT6_DIVIDE
    FIELD/parameter FLOAT CLKOUT6_DUTY_CYCLE
    FIELD/parameter FLOAT CLKOUT6_PHASE
    FIELD/Ptr/parameter INTEGER_8 CLKOUT6_USE_FINE_PS
    FIELD/Ptr/parameter INTEGER_8 COMPENSATION
    FIELD/input INTEGER_7 DADDR
    FIELD/input INTEGER_1 DCLK
    FIELD/input INTEGER_1 DEN
    FIELD/input INTEGER_16 DI
    FIELD/parameter INTEGER_32 DIVCLK_DIVIDE
    FIELD/output INTEGER_16 DO
    FIELD/output INTEGER_1 DRDY
    FIELD/input INTEGER_1 DWE
    FIELD/parameter INTEGER_32 IS_CLKINSEL_INVERTED
    FIELD/parameter INTEGER_32 IS_PSEN_INVERTED
    FIELD/parameter INTEGER_32 IS_PSINCDEC_INVERTED
    FIELD/parameter INTEGER_32 IS_PWRDWN_INVERTED
    FIELD/parameter INTEGER_32 IS_RST_INVERTED
    FIELD/output INTEGER_1 LOCKED
    FIELD/input INTEGER_1 PSCLK
    FIELD/output INTEGER_1 PSDONE
    FIELD/input INTEGER_1 PSEN
    FIELD/input INTEGER_1 PSINCDEC
    FIELD/input INTEGER_1 PWRDWN
    FIELD/parameter FLOAT REF_JITTER1
    FIELD/parameter FLOAT REF_JITTER2
    FIELD/input INTEGER_1 RST
    FIELD/Ptr/parameter INTEGER_8 SS_EN
    FIELD/Ptr/parameter INTEGER_8 SS_MODE
    FIELD/parameter INTEGER_32 SS_MOD_PERIOD
    FIELD/Ptr/parameter INTEGER_8 STARTUP_WAIT
}
EMODULE l_ainterface_OC_PipeIn {
    METHOD enq__ENA ( l_struct_OC_NOCData v )
}
EMODULE l_ainterface_OC_PipeInB {
    METHOD enq__ENA ( INTEGER_32 v , INTEGER_1 last )
}
EMODULE l_ainterface_OC_PipeIn_OC_0 {
    METHOD enq__ENA ( l_struct_OC_AddrCount v )
}
EMODULE l_ainterface_OC_PipeIn_OC_2 {
    METHOD enq__ENA ( l_struct_OC_PortalInfo v )
}
EMODULE l_ainterface_OC_PipeIn_OC_4 {
    METHOD enq__ENA ( l_struct_OC_ReadResp v )
}
EMODULE l_ainterface_OC_PipeIn_OC_6 {
    METHOD enq__ENA ( l_struct_OC_BusData v )
}
EMODULE l_ainterface_OC_PipeIn_OC_8 {
    METHOD enq__ENA ( INTEGER_6 v )
}
EMODULE l_ainterface_OC_PipeOut {
    METHOD deq__ENA
    METHOD first l_struct_OC_NOCData
}
EMODULE l_ainterface_OC_PipeOut_OC_1 {
    METHOD deq__ENA
    METHOD first l_struct_OC_AddrCount
}
EMODULE l_ainterface_OC_PipeOut_OC_3 {
    METHOD deq__ENA
    METHOD first l_struct_OC_PortalInfo
}
EMODULE l_ainterface_OC_PipeOut_OC_5 {
    METHOD deq__ENA
    METHOD first l_struct_OC_ReadResp
}
EMODULE l_ainterface_OC_PipeOut_OC_7 {
    METHOD deq__ENA
    METHOD first l_struct_OC_BusData
}
EMODULE l_ainterface_OC_PipeOut_OC_9 {
    METHOD deq__ENA
    METHOD first INTEGER_6
}
EMODULE l_ainterface_OC_Pps7PS7 {
    INTERFACE l_ainterface_OC_Pps7ddr DDR
    INTERFACE l_ainterface_OC_Pps7dma DMA0
    INTERFACE l_ainterface_OC_Pps7dma DMA1
    INTERFACE l_ainterface_OC_Pps7dma DMA2
    INTERFACE l_ainterface_OC_Pps7dma DMA3
    INTERFACE l_ainterface_OC_Pps7emiocan EMIOCAN0
    INTERFACE l_ainterface_OC_Pps7emiocan EMIOCAN1
    INTERFACE l_ainterface_OC_Pps7emioenet EMIOENET0
    INTERFACE l_ainterface_OC_Pps7emioenet EMIOENET1
    INTERFACE l_ainterface_OC_Pps7emiogpio EMIOGPIO
    INTERFACE l_ainterface_OC_Pps7emioi2c EMIOI2C0
    INTERFACE l_ainterface_OC_Pps7emioi2c EMIOI2C1
    INTERFACE l_ainterface_OC_Pps7emiopjtag EMIOPJTAG
    INTERFACE l_ainterface_OC_Pps7emiosdio EMIOSDIO0
    INTERFACE l_ainterface_OC_Pps7emiosdio EMIOSDIO1
    INTERFACE l_ainterface_OC_Pps7emiospi EMIOSPI0
    INTERFACE l_ainterface_OC_Pps7emiospi EMIOSPI1
    INTERFACE l_ainterface_OC_Pps7emiosramint EMIOSRAMINT
    INTERFACE l_ainterface_OC_Pps7emiotrace EMIOTRACE
    INTERFACE l_ainterface_OC_Pps7emiottc EMIOTTC0
    INTERFACE l_ainterface_OC_Pps7emiottc EMIOTTC1
    INTERFACE l_ainterface_OC_Pps7emiouart EMIOUART0
    INTERFACE l_ainterface_OC_Pps7emiouart EMIOUART1
    INTERFACE l_ainterface_OC_Pps7emiousb EMIOUSB0
    INTERFACE l_ainterface_OC_Pps7emiousb EMIOUSB1
    INTERFACE l_ainterface_OC_Pps7emiowdt EMIOWDT
    INTERFACE l_ainterface_OC_Pps7event EVENT
    INTERFACE l_ainterface_OC_Pps7fclk FCLK
    INTERFACE l_ainterface_OC_Pps7fpgaid FPGAID
    INTERFACE l_ainterface_OC_Pps7ftmd FTMD
    INTERFACE l_ainterface_OC_Pps7ftmt FTMT
    INTERFACE l_ainterface_OC_Pps7irq IRQ
    INTERFACE l_ainterface_OC_Pps7maxigp MAXIGP0
    INTERFACE l_ainterface_OC_Pps7maxigp MAXIGP1
    INTERFACE l_ainterface_OC_Pps7m M
    INTERFACE l_ainterface_OC_Pps7ps PS
    INTERFACE l_ainterface_OC_Pps7saxiacp SAXIACP
    INTERFACE l_ainterface_OC_Pps7saxigp SAXIGP0
    INTERFACE l_ainterface_OC_Pps7saxigp SAXIGP1
    INTERFACE l_ainterface_OC_Pps7saxihp SAXIHP0
    INTERFACE l_ainterface_OC_Pps7saxihp SAXIHP1
    INTERFACE l_ainterface_OC_Pps7saxihp SAXIHP2
    INTERFACE l_ainterface_OC_Pps7saxihp SAXIHP3
}
EMODULE l_ainterface_OC_Pps7ddr {
    FIELD/inout INTEGER_15 A
    FIELD/input INTEGER_4 ARB
    FIELD/inout INTEGER_3 BA
    FIELD/inout INTEGER_1 CASB
    FIELD/inout INTEGER_1 CKE
    FIELD/inout INTEGER_1 CKN
    FIELD/inout INTEGER_1 CKP
    FIELD/inout INTEGER_1 CSB
    FIELD/inout INTEGER_4 DM
    FIELD/inout INTEGER_32 DQ
    FIELD/inout INTEGER_4 DQSN
    FIELD/inout INTEGER_4 DQSP
    FIELD/inout INTEGER_1 DRSTB
    FIELD/inout INTEGER_1 ODT
    FIELD/inout INTEGER_1 RASB
    FIELD/inout INTEGER_1 VRN
    FIELD/inout INTEGER_1 VRP
    FIELD/inout INTEGER_1 WEB
}
EMODULE l_ainterface_OC_Pps7dma {
    FIELD/input INTEGER_1 ACLK
    FIELD/input INTEGER_1 DAREADY
    FIELD/output INTEGER_2 DATYPE
    FIELD/output INTEGER_1 DAVALID
    FIELD/input INTEGER_1 DRLAST
    FIELD/output INTEGER_1 DRREADY
    FIELD/input INTEGER_2 DRTYPE
    FIELD/input INTEGER_1 DRVALID
    FIELD/output INTEGER_1 RSTN
}
EMODULE l_ainterface_OC_Pps7emiocan {
    FIELD/input INTEGER_1 PHYRX
    FIELD/output INTEGER_1 PHYTX
}
EMODULE l_ainterface_OC_Pps7emioenet {
    FIELD/input INTEGER_1 EXTINTIN
    FIELD/input INTEGER_1 GMIICOL
    FIELD/input INTEGER_1 GMIICRS
    FIELD/input INTEGER_1 GMIIRXCLK
    FIELD/input INTEGER_8 GMIIRXD
    FIELD/input INTEGER_1 GMIIRXDV
    FIELD/input INTEGER_1 GMIIRXER
    FIELD/input INTEGER_1 GMIITXCLK
    FIELD/output INTEGER_8 GMIITXD
    FIELD/output INTEGER_1 GMIITXEN
    FIELD/output INTEGER_1 GMIITXER
    FIELD/input INTEGER_1 MDIOI
    FIELD/output INTEGER_1 MDIOMDC
    FIELD/output INTEGER_1 MDIOO
    FIELD/output INTEGER_1 MDIOTN
    FIELD/output INTEGER_1 PTPDELAYREQRX
    FIELD/output INTEGER_1 PTPDELAYREQTX
    FIELD/output INTEGER_1 PTPPDELAYREQRX
    FIELD/output INTEGER_1 PTPPDELAYREQTX
    FIELD/output INTEGER_1 PTPPDELAYRESPRX
    FIELD/output INTEGER_1 PTPPDELAYRESPTX
    FIELD/output INTEGER_1 PTPSYNCFRAMERX
    FIELD/output INTEGER_1 PTPSYNCFRAMETX
    FIELD/output INTEGER_1 SOFRX
    FIELD/output INTEGER_1 SOFTX
}
EMODULE l_ainterface_OC_Pps7emiogpio {
    FIELD/input INTEGER_64 I
    FIELD/output INTEGER_64 O
    FIELD/output INTEGER_64 TN
}
EMODULE l_ainterface_OC_Pps7emioi2c {
    FIELD/input INTEGER_1 SCLI
    FIELD/output INTEGER_1 SCLO
    FIELD/output INTEGER_1 SCLTN
    FIELD/input INTEGER_1 SDAI
    FIELD/output INTEGER_1 SDAO
    FIELD/output INTEGER_1 SDATN
}
EMODULE l_ainterface_OC_Pps7emiopjtag {
    FIELD/input INTEGER_1 TCK
    FIELD/input INTEGER_1 TDI
    FIELD/output INTEGER_1 TDO
    FIELD/output INTEGER_1 TDTN
    FIELD/input INTEGER_1 TMS
}
EMODULE l_ainterface_OC_Pps7emiosdio {
    FIELD/output INTEGER_1 BUSPOW
    FIELD/output INTEGER_3 BUSVOLT
    FIELD/input INTEGER_1 CDN
    FIELD/output INTEGER_1 CLK
    FIELD/input INTEGER_1 CLKFB
    FIELD/input INTEGER_1 CMDI
    FIELD/output INTEGER_1 CMDO
    FIELD/output INTEGER_1 CMDTN
    FIELD/input INTEGER_4 DATAI
    FIELD/output INTEGER_4 DATAO
    FIELD/output INTEGER_4 DATATN
    FIELD/output INTEGER_1 LED
    FIELD/input INTEGER_1 WP
}
EMODULE l_ainterface_OC_Pps7emiospi {
    FIELD/input INTEGER_1 MI
    FIELD/output INTEGER_1 MO
    FIELD/output INTEGER_1 MOTN
    FIELD/input INTEGER_1 SCLKI
    FIELD/output INTEGER_1 SCLKO
    FIELD/output INTEGER_1 SCLKTN
    FIELD/input INTEGER_1 SI
    FIELD/output INTEGER_1 SO
    FIELD/input INTEGER_1 SSIN
    FIELD/output INTEGER_1 SSNTN
    FIELD/output INTEGER_3 SSON
    FIELD/output INTEGER_1 STN
}
EMODULE l_ainterface_OC_Pps7emiosramint {
    FIELD/input INTEGER_1 IN
}
EMODULE l_ainterface_OC_Pps7emiotrace {
    FIELD/input INTEGER_1 CLK
    FIELD/output INTEGER_1 CTL
    FIELD/output INTEGER_32 DATA
}
EMODULE l_ainterface_OC_Pps7emiottc {
    FIELD/input INTEGER_3 CLKI
    FIELD/output INTEGER_3 WAVEO
}
EMODULE l_ainterface_OC_Pps7emiouart {
    FIELD/input INTEGER_1 CTSN
    FIELD/input INTEGER_1 DCDN
    FIELD/input INTEGER_1 DSRN
    FIELD/output INTEGER_1 DTRN
    FIELD/input INTEGER_1 RIN
    FIELD/output INTEGER_1 RTSN
    FIELD/input INTEGER_1 RX
    FIELD/output INTEGER_1 TX
}
EMODULE l_ainterface_OC_Pps7emiousb {
    FIELD/output INTEGER_2 PORTINDCTL
    FIELD/input INTEGER_1 VBUSPWRFAULT
    FIELD/output INTEGER_1 VBUSPWRSELECT
}
EMODULE l_ainterface_OC_Pps7emiowdt {
    FIELD/input INTEGER_1 CLKI
    FIELD/output INTEGER_1 RSTO
}
EMODULE l_ainterface_OC_Pps7event {
    FIELD/input INTEGER_1 EVENTI
    FIELD/output INTEGER_1 EVENTO
    FIELD/output INTEGER_2 STANDBYWFE
    FIELD/output INTEGER_2 STANDBYWFI
}
EMODULE l_ainterface_OC_Pps7fclk {
    FIELD/output INTEGER_4 CLK
    FIELD/input INTEGER_4 CLKTRIGN
    FIELD/output INTEGER_4 RESETN
}
EMODULE l_ainterface_OC_Pps7fpgaid {
    FIELD/input INTEGER_1 LEN
}
EMODULE l_ainterface_OC_Pps7ftmd {
    FIELD/input INTEGER_4 TRACEINATID
    FIELD/input INTEGER_1 TRACEINCLOCK
    FIELD/input INTEGER_32 TRACEINDATA
    FIELD/input INTEGER_1 TRACEINVALID
}
EMODULE l_ainterface_OC_Pps7ftmt {
    FIELD/input INTEGER_32 F2PDEBUG
    FIELD/input INTEGER_4 F2PTRIG
    FIELD/output INTEGER_4 F2PTRIGACK
    FIELD/output INTEGER_32 P2FDEBUG
    FIELD/output INTEGER_4 P2FTRIG
    FIELD/input INTEGER_4 P2FTRIGACK
}
EMODULE l_ainterface_OC_Pps7irq {
    FIELD/input INTEGER_20 F2P
    FIELD/output INTEGER_29 P2F
}
EMODULE l_ainterface_OC_Pps7m {
    FIELD/inout INTEGER_54 IO
}
EMODULE l_ainterface_OC_Pps7maxigp {
    FIELD/input INTEGER_1 ACLK
    FIELD/output INTEGER_32 ARADDR
    FIELD/output INTEGER_2 ARBURST
    FIELD/output INTEGER_4 ARCACHE
    FIELD/output INTEGER_1 ARESETN
    FIELD/output INTEGER_12 ARID
    FIELD/output INTEGER_4 ARLEN
    FIELD/output INTEGER_2 ARLOCK
    FIELD/output INTEGER_3 ARPROT
    FIELD/output INTEGER_4 ARQOS
    FIELD/input INTEGER_1 ARREADY
    FIELD/output INTEGER_2 ARSIZE
    FIELD/output INTEGER_1 ARVALID
    FIELD/output INTEGER_32 AWADDR
    FIELD/output INTEGER_2 AWBURST
    FIELD/output INTEGER_4 AWCACHE
    FIELD/output INTEGER_12 AWID
    FIELD/output INTEGER_4 AWLEN
    FIELD/output INTEGER_2 AWLOCK
    FIELD/output INTEGER_3 AWPROT
    FIELD/output INTEGER_4 AWQOS
    FIELD/input INTEGER_1 AWREADY
    FIELD/output INTEGER_2 AWSIZE
    FIELD/output INTEGER_1 AWVALID
    FIELD/input INTEGER_12 BID
    FIELD/output INTEGER_1 BREADY
    FIELD/input INTEGER_2 BRESP
    FIELD/input INTEGER_1 BVALID
    FIELD/input INTEGER_32 RDATA
    FIELD/input INTEGER_12 RID
    FIELD/input INTEGER_1 RLAST
    FIELD/output INTEGER_1 RREADY
    FIELD/input INTEGER_2 RRESP
    FIELD/input INTEGER_1 RVALID
    FIELD/output INTEGER_32 WDATA
    FIELD/output INTEGER_12 WID
    FIELD/output INTEGER_1 WLAST
    FIELD/input INTEGER_1 WREADY
    FIELD/output INTEGER_4 WSTRB
    FIELD/output INTEGER_1 WVALID
}
EMODULE l_ainterface_OC_Pps7ps {
    FIELD/inout INTEGER_1 CLK
    FIELD/inout INTEGER_1 PORB
    FIELD/inout INTEGER_1 SRSTB
}
EMODULE l_ainterface_OC_Pps7saxiacp {
    FIELD/input INTEGER_1 ACLK
    FIELD/input INTEGER_32 ARADDR
    FIELD/input INTEGER_2 ARBURST
    FIELD/input INTEGER_4 ARCACHE
    FIELD/output INTEGER_1 ARESETN
    FIELD/input INTEGER_3 ARID
    FIELD/input INTEGER_4 ARLEN
    FIELD/input INTEGER_2 ARLOCK
    FIELD/input INTEGER_3 ARPROT
    FIELD/input INTEGER_4 ARQOS
    FIELD/output INTEGER_1 ARREADY
    FIELD/input INTEGER_2 ARSIZE
    FIELD/input INTEGER_5 ARUSER
    FIELD/input INTEGER_1 ARVALID
    FIELD/input INTEGER_32 AWADDR
    FIELD/input INTEGER_2 AWBURST
    FIELD/input INTEGER_4 AWCACHE
    FIELD/input INTEGER_3 AWID
    FIELD/input INTEGER_4 AWLEN
    FIELD/input INTEGER_2 AWLOCK
    FIELD/input INTEGER_3 AWPROT
    FIELD/input INTEGER_4 AWQOS
    FIELD/output INTEGER_1 AWREADY
    FIELD/input INTEGER_2 AWSIZE
    FIELD/input INTEGER_5 AWUSER
    FIELD/input INTEGER_1 AWVALID
    FIELD/output INTEGER_3 BID
    FIELD/input INTEGER_1 BREADY
    FIELD/output INTEGER_2 BRESP
    FIELD/output INTEGER_1 BVALID
    FIELD/output INTEGER_64 RDATA
    FIELD/output INTEGER_3 RID
    FIELD/output INTEGER_1 RLAST
    FIELD/input INTEGER_1 RREADY
    FIELD/output INTEGER_2 RRESP
    FIELD/output INTEGER_1 RVALID
    FIELD/input INTEGER_64 WDATA
    FIELD/input INTEGER_3 WID
    FIELD/input INTEGER_1 WLAST
    FIELD/output INTEGER_1 WREADY
    FIELD/input INTEGER_8 WSTRB
    FIELD/input INTEGER_1 WVALID
}
EMODULE l_ainterface_OC_Pps7saxigp {
    FIELD/input INTEGER_1 ACLK
    FIELD/input INTEGER_32 ARADDR
    FIELD/input INTEGER_2 ARBURST
    FIELD/input INTEGER_4 ARCACHE
    FIELD/output INTEGER_1 ARESETN
    FIELD/input INTEGER_6 ARID
    FIELD/input INTEGER_4 ARLEN
    FIELD/input INTEGER_2 ARLOCK
    FIELD/input INTEGER_3 ARPROT
    FIELD/input INTEGER_4 ARQOS
    FIELD/output INTEGER_1 ARREADY
    FIELD/input INTEGER_2 ARSIZE
    FIELD/input INTEGER_1 ARVALID
    FIELD/input INTEGER_32 AWADDR
    FIELD/input INTEGER_2 AWBURST
    FIELD/input INTEGER_4 AWCACHE
    FIELD/input INTEGER_6 AWID
    FIELD/input INTEGER_4 AWLEN
    FIELD/input INTEGER_2 AWLOCK
    FIELD/input INTEGER_3 AWPROT
    FIELD/input INTEGER_4 AWQOS
    FIELD/output INTEGER_1 AWREADY
    FIELD/input INTEGER_2 AWSIZE
    FIELD/input INTEGER_1 AWVALID
    FIELD/output INTEGER_6 BID
    FIELD/input INTEGER_1 BREADY
    FIELD/output INTEGER_2 BRESP
    FIELD/output INTEGER_1 BVALID
    FIELD/output INTEGER_32 RDATA
    FIELD/output INTEGER_6 RID
    FIELD/output INTEGER_1 RLAST
    FIELD/input INTEGER_1 RREADY
    FIELD/output INTEGER_2 RRESP
    FIELD/output INTEGER_1 RVALID
    FIELD/input INTEGER_32 WDATA
    FIELD/input INTEGER_6 WID
    FIELD/input INTEGER_1 WLAST
    FIELD/output INTEGER_1 WREADY
    FIELD/input INTEGER_4 WSTRB
    FIELD/input INTEGER_1 WVALID
}
EMODULE l_ainterface_OC_Pps7saxihp {
    FIELD/input INTEGER_1 ACLK
    FIELD/input INTEGER_32 ARADDR
    FIELD/input INTEGER_2 ARBURST
    FIELD/input INTEGER_4 ARCACHE
    FIELD/output INTEGER_1 ARESETN
    FIELD/input INTEGER_6 ARID
    FIELD/input INTEGER_4 ARLEN
    FIELD/input INTEGER_2 ARLOCK
    FIELD/input INTEGER_3 ARPROT
    FIELD/input INTEGER_4 ARQOS
    FIELD/output INTEGER_1 ARREADY
    FIELD/input INTEGER_2 ARSIZE
    FIELD/input INTEGER_1 ARVALID
    FIELD/input INTEGER_32 AWADDR
    FIELD/input INTEGER_2 AWBURST
    FIELD/input INTEGER_4 AWCACHE
    FIELD/input INTEGER_6 AWID
    FIELD/input INTEGER_4 AWLEN
    FIELD/input INTEGER_2 AWLOCK
    FIELD/input INTEGER_3 AWPROT
    FIELD/input INTEGER_4 AWQOS
    FIELD/output INTEGER_1 AWREADY
    FIELD/input INTEGER_2 AWSIZE
    FIELD/input INTEGER_1 AWVALID
    FIELD/output INTEGER_6 BID
    FIELD/input INTEGER_1 BREADY
    FIELD/output INTEGER_2 BRESP
    FIELD/output INTEGER_1 BVALID
    FIELD/output INTEGER_3 RACOUNT
    FIELD/output INTEGER_8 RCOUNT
    FIELD/output INTEGER_64 RDATA
    FIELD/input INTEGER_1 RDISSUECAP1EN
    FIELD/output INTEGER_6 RID
    FIELD/output INTEGER_1 RLAST
    FIELD/input INTEGER_1 RREADY
    FIELD/output INTEGER_2 RRESP
    FIELD/output INTEGER_1 RVALID
    FIELD/output INTEGER_6 WACOUNT
    FIELD/output INTEGER_8 WCOUNT
    FIELD/input INTEGER_64 WDATA
    FIELD/input INTEGER_6 WID
    FIELD/input INTEGER_1 WLAST
    FIELD/output INTEGER_1 WREADY
    FIELD/input INTEGER_1 WRISSUECAP1EN
    FIELD/input INTEGER_8 WSTRB
    FIELD/input INTEGER_1 WVALID
}
EMODULE l_ainterface_OC_TestPins {
    FIELD/output INTEGER_1 interrupt
}
EMODULE l_ainterface_OC_ZynqClock {
    FIELD/input INTEGER_1 CLK
    FIELD/input INTEGER_1 nRST
    FIELD/inout INTEGER_15 DDR_Addr
    FIELD/inout INTEGER_3 DDR_BankAddr
    FIELD/inout INTEGER_1 DDR_CAS_n
    FIELD/inout INTEGER_1 DDR_CKE
    FIELD/inout INTEGER_1 DDR_Clk_n
    FIELD/inout INTEGER_1 DDR_Clk_p
    FIELD/inout INTEGER_1 DDR_CS_n
    FIELD/inout INTEGER_4 DDR_DM
    FIELD/inout INTEGER_32 DDR_DQ
    FIELD/inout INTEGER_4 DDR_DQS_n
    FIELD/inout INTEGER_4 DDR_DQS_p
    FIELD/inout INTEGER_1 DDR_DRSTB
    FIELD/inout INTEGER_1 DDR_ODT
    FIELD/inout INTEGER_1 DDR_RAS_n
    FIELD/inout INTEGER_1 FIXED_IO_ddr_vrn
    FIELD/inout INTEGER_1 FIXED_IO_ddr_vrp
    FIELD/inout INTEGER_1 DDR_WEB
    FIELD/inout INTEGER_1 FIXED_IO_ps_clk
    FIELD/inout INTEGER_1 FIXED_IO_ps_porb
    FIELD/inout INTEGER_1 FIXED_IO_ps_srstb
    FIELD/input INTEGER_1 interrupt
}
EMODULE BUFG {
    INTERFACE l_ainterface_OC_MbufgBUFG _
}
EMODULE Fifo {
    INTERFACE l_ainterface_OC_PipeIn in
    INTERFACE l_ainterface_OC_PipeOut out
}
EMODULE Fifo_OC_11 {
    INTERFACE l_ainterface_OC_PipeIn_OC_0 in
    INTERFACE l_ainterface_OC_PipeOut_OC_1 out
}
EMODULE Fifo_OC_13 {
    INTERFACE l_ainterface_OC_PipeIn_OC_2 in
    INTERFACE l_ainterface_OC_PipeOut_OC_3 out
}
EMODULE Fifo_OC_15 {
    INTERFACE l_ainterface_OC_PipeIn_OC_4 in
    INTERFACE l_ainterface_OC_PipeOut_OC_5 out
}
EMODULE Fifo_OC_17 {
    INTERFACE l_ainterface_OC_PipeIn_OC_6 in
    INTERFACE l_ainterface_OC_PipeOut_OC_7 out
}
EMODULE Fifo_OC_19 {
    INTERFACE l_ainterface_OC_PipeIn_OC_8 in
    INTERFACE l_ainterface_OC_PipeOut_OC_9 out
}
EMODULE MMCME2_ADV {
    INTERFACE l_ainterface_OC_Mmcme2MMCME2_ADV _
}
EMODULE PS7 {
    INTERFACE l_ainterface_OC_Pps7PS7 _
}
EMODULE UserTop {
    INTERFACE l_ainterface_OC_PipeInB write
    INTERFACE/Ptr l_ainterface_OC_PipeInB read
}
MODULE ClockTop {
    INTERFACE l_ainterface_OC_ClockIfc _
    FIELD MMCME2_ADV ps7_clockGen_pll
    PARAMS ps7_clockGen_pll <REF_JITTER2:1.0e-2;REF_JITTER1:1.0e-2;CLKOUT6_PHASE:0.0;CLKOUT6_DUTY_CYCLE:0.5;CLKOUT6_DIVIDE:10;CLKOUT5_PHASE:0.0;CLKOUT5_DUTY_CYCLE:0.5;CLKOUT5_DIVIDE:10;CLKOUT4_PHASE:0.0;CLKOUT4_DUTY_CYCLE:0.5;CLKOUT4_DIVIDE:10;CLKOUT3_PHASE:0.0;CLKOUT3_DUTY_CYCLE:0.5;CLKOUT3_DIVIDE:10;CLKOUT2_PHASE:0.0;CLKOUT2_DUTY_CYCLE:0.5;CLKOUT2_DIVIDE:10;CLKOUT1_PHASE:0.0;CLKOUT1_DUTY_CYCLE:0.5;CLKOUT1_DIVIDE:10;CLKOUT0_PHASE:0.0;CLKOUT0_DUTY_CYCLE:0.5;CLKOUT0_DIVIDE_F:5.0;DIVCLK_DIVIDE:1;CLKIN2_PERIOD:0.0;CLKIN1_PERIOD:10.0;CLKFBOUT_PHASE:0.0;CLKFBOUT_MULT_F:10.0;STARTUP_WAIT:"FALSE";COMPENSATION:"ZHOLD";CLKOUT4_CASCADE:"FALSE";CLKOUT6_USE_FINE_PS:"FALSE";CLKOUT5_USE_FINE_PS:"FALSE";CLKOUT4_USE_FINE_PS:"FALSE";CLKOUT3_USE_FINE_PS:"FALSE";CLKOUT2_USE_FINE_PS:"FALSE";CLKOUT1_USE_FINE_PS:"FALSE";CLKOUT0_USE_FINE_PS:"FALSE";CLKFBOUT_USE_FINE_PS:"FALSE";BANDWIDTH:"OPTIMIZED">
    FIELD ResetInverter rinverter
    FIELD BUFG clkbuf
    FIELD BUFG clkbuf0
    METHOD/Rule RULEinit$100__ENA {
        LET INTEGER_1 :ps7_clockGen_pll$CLKIN2 = 0
        LET INTEGER_1 :ps7_clockGen_pll$CLKINSEL = 1
        LET INTEGER_7 :ps7_clockGen_pll$DADDR = 0
        LET INTEGER_1 :ps7_clockGen_pll$DCLK = 0
        LET INTEGER_1 :ps7_clockGen_pll$DEN = 0
        LET INTEGER_16 :ps7_clockGen_pll$DI = 0
        LET INTEGER_1 :ps7_clockGen_pll$DWE = 0
        LET INTEGER_1 :ps7_clockGen_pll$PSCLK = 0
        LET INTEGER_1 :ps7_clockGen_pll$PSEN = 0
        LET INTEGER_1 :ps7_clockGen_pll$PSINCDEC = 0
        LET INTEGER_1 :ps7_clockGen_pll$PWRDWN = 0
        LET INTEGER_1 :clkbuf$I = ps7_clockGen_pll$CLKFBOUT
        LET INTEGER_1 :clockOut = clkbuf0$O
        LET INTEGER_1 :ps7_clockGen_pll$CLKFBIN = clkbuf$O
        LET INTEGER_1 :rinverter$RESET_IN = usernRST
        LET INTEGER_1 :ps7_clockGen_pll$RST = rinverter$RESET_OUT
        LET INTEGER_1 :clkbuf0$I = ps7_clockGen_pll$CLKOUT0
        LET INTEGER_1 :ps7_clockGen_pll$CLKIN1 = userCLK
        LET INTEGER_1 :__defaultClock = userCLK
        LET INTEGER_1 :__defaultnReset = usernRST
    }
    METHOD/Rule RULEinit__ENA {
        LET INTEGER_1 :ps7_clockGen_pll$CLKIN2 = 0
        LET INTEGER_1 :ps7_clockGen_pll$CLKINSEL = 1
        LET INTEGER_7 :ps7_clockGen_pll$DADDR = 0
        LET INTEGER_1 :ps7_clockGen_pll$DCLK = 0
        LET INTEGER_1 :ps7_clockGen_pll$DEN = 0
        LET INTEGER_16 :ps7_clockGen_pll$DI = 0
        LET INTEGER_1 :ps7_clockGen_pll$DWE = 0
        LET INTEGER_1 :ps7_clockGen_pll$PSCLK = 0
        LET INTEGER_1 :ps7_clockGen_pll$PSEN = 0
        LET INTEGER_1 :ps7_clockGen_pll$PSINCDEC = 0
        LET INTEGER_1 :ps7_clockGen_pll$PWRDWN = 0
        LET INTEGER_1 :clkbuf$I = ps7_clockGen_pll$CLKFBOUT
        LET INTEGER_1 :clockOut = clkbuf0$O
        LET INTEGER_1 :ps7_clockGen_pll$CLKFBIN = clkbuf$O
        LET INTEGER_1 :rinverter$RESET_IN = usernRST
        LET INTEGER_1 :ps7_clockGen_pll$RST = rinverter$RESET_OUT
        LET INTEGER_1 :clkbuf0$I = ps7_clockGen_pll$CLKOUT0
        LET INTEGER_1 :ps7_clockGen_pll$CLKIN1 = userCLK
        LET INTEGER_1 :__defaultClock = userCLK
        LET INTEGER_1 :__defaultnReset = usernRST
    }
}
MODULE Fifo1 {
    INTERFACE l_ainterface_OC_PipeIn in
    INTERFACE l_ainterface_OC_PipeOut out
    FIELD l_struct_OC_NOCData element
    FIELD INTEGER_1 full
    METHOD in$enq__ENA ( l_struct_OC_NOCData v ) if (((full) ^ (1))) {
        STORE :element = in$enq$v
        STORE :full = 1
    }
    METHOD out$deq__ENA if ((full)) {
        STORE :full = 0
    }
    METHOD out$first l_struct_OC_NOCData = ((element)) if ((full))
}
MODULE Fifo1_OC_10 {
    INTERFACE l_ainterface_OC_PipeIn_OC_0 in
    INTERFACE l_ainterface_OC_PipeOut_OC_1 out
    FIELD l_struct_OC_AddrCount element
    FIELD INTEGER_1 full
    METHOD in$enq__ENA ( l_struct_OC_AddrCount v ) if (((full) ^ (1))) {
        STORE :element = in$enq$v
        STORE :full = 1
    }
    METHOD out$deq__ENA if ((full)) {
        STORE :full = 0
    }
    METHOD out$first l_struct_OC_AddrCount = ((element)) if ((full))
}
MODULE Fifo1_OC_12 {
    INTERFACE l_ainterface_OC_PipeIn_OC_2 in
    INTERFACE l_ainterface_OC_PipeOut_OC_3 out
    FIELD l_struct_OC_PortalInfo element
    FIELD INTEGER_1 full
    METHOD in$enq__ENA ( l_struct_OC_PortalInfo v ) if (((full) ^ (1))) {
        STORE :element = in$enq$v
        STORE :full = 1
    }
    METHOD out$deq__ENA if ((full)) {
        STORE :full = 0
    }
    METHOD out$first l_struct_OC_PortalInfo = ((element)) if ((full))
}
MODULE Fifo1_OC_14 {
    INTERFACE l_ainterface_OC_PipeIn_OC_4 in
    INTERFACE l_ainterface_OC_PipeOut_OC_5 out
    FIELD l_struct_OC_ReadResp element
    FIELD INTEGER_1 full
    METHOD in$enq__ENA ( l_struct_OC_ReadResp v ) if (((full) ^ (1))) {
        STORE :element = in$enq$v
        STORE :full = 1
    }
    METHOD out$deq__ENA if ((full)) {
        STORE :full = 0
    }
    METHOD out$first l_struct_OC_ReadResp = ((element)) if ((full))
}
MODULE Fifo1_OC_16 {
    INTERFACE l_ainterface_OC_PipeIn_OC_6 in
    INTERFACE l_ainterface_OC_PipeOut_OC_7 out
    FIELD l_struct_OC_BusData element
    FIELD INTEGER_1 full
    METHOD in$enq__ENA ( l_struct_OC_BusData v ) if (((full) ^ (1))) {
        STORE :element = in$enq$v
        STORE :full = 1
    }
    METHOD out$deq__ENA if ((full)) {
        STORE :full = 0
    }
    METHOD out$first l_struct_OC_BusData = ((element)) if ((full))
}
MODULE Fifo1_OC_18 {
    INTERFACE l_ainterface_OC_PipeIn_OC_8 in
    INTERFACE l_ainterface_OC_PipeOut_OC_9 out
    FIELD INTEGER_6 element
    FIELD INTEGER_1 full
    METHOD in$enq__ENA ( INTEGER_6 v ) if (((full) ^ (1))) {
        STORE :element = in$enq$v
        STORE :full = 1
    }
    METHOD out$deq__ENA if ((full)) {
        STORE :full = 0
    }
    METHOD out$first INTEGER_6 = ((element)) if ((full))
}
MODULE MuxPipe {
    INTERFACE l_ainterface_OC_PipeIn in
    INTERFACE l_ainterface_OC_PipeIn forward
    INTERFACE/Ptr l_ainterface_OC_PipeIn out
    FIELD Fifo1 forwardFifo
    METHOD/Rule RULEfifoRule__ENA {
        ALLOCA l_struct_OC_NOCData RULEfifoRule__ENA$agg_2e_tmp
        CALL :forwardFifo$out$first{}
        LET l_struct_OC_NOCData :RULEfifoRule__ENA$agg_2e_tmp = forwardFifo$out$first
        CALL/Action :out$enq__ENA{RULEfifoRule__ENA$agg_2e_tmp}
        CALL/Action :forwardFifo$out$deq__ENA{}
    }
    METHOD forward$enq__ENA ( l_struct_OC_NOCData v ) {
        CALL/Action :forwardFifo$in$enq__ENA{forward$enq$v}
    }
    METHOD in$enq__ENA ( l_struct_OC_NOCData v ) {
        CALL/Action :out$enq__ENA{in$enq$v}
    }
}
MODULE P7Wrap {
    INTERFACECONNECT/Forward M pps$M l_ainterface_OC_Pps7m
    INTERFACECONNECT/Forward FCLK pps$FCLK l_ainterface_OC_Pps7fclk
    INTERFACE l_ainterface_OC_ZynqClock _
    INTERFACE l_ainterface_OC_Pps7m M
    INTERFACE l_ainterface_OC_Pps7fclk FCLK
    INTERFACE/Ptr l_ainterface_OC_MaxiO MAXIGP0_O
    INTERFACE l_ainterface_OC_MaxiI MAXIGP0_I
    FIELD PS7 pps
    FIELD ClockTop pclockTop
    METHOD MAXIGP0_I$B__ENA ( INTEGER_12 id , INTEGER_2 resp ) if ((pps$MAXIGP0BREADY)) {
        LET INTEGER_12 :pps$MAXIGP0BID = MAXIGP0_I$B$id
        LET INTEGER_2 :pps$MAXIGP0BRESP = MAXIGP0_I$B$resp
    }
    METHOD MAXIGP0_I$R__ENA ( INTEGER_32 data , INTEGER_12 id , INTEGER_1 last , INTEGER_2 resp ) if ((pps$MAXIGP0RREADY)) {
        LET INTEGER_32 :pps$MAXIGP0RDATA = MAXIGP0_I$R$data
        LET INTEGER_12 :pps$MAXIGP0RID = MAXIGP0_I$R$id
        LET INTEGER_1 :pps$MAXIGP0RLAST = MAXIGP0_I$R$last
        LET INTEGER_2 :pps$MAXIGP0RRESP = MAXIGP0_I$R$resp
    }
    METHOD/Rule RULEgp0ar$100__ENA if ((pps$MAXIGP0ARVALID)) {
        CALL/Action :MAXIGP0_O$AR__ENA{pps$MAXIGP0ARADDR,pps$MAXIGP0ARID,pps$MAXIGP0ARLEN}
    }
    METHOD/Rule RULEgp0ar__ENA if ((pps$MAXIGP0ARVALID)) {
        CALL/Action :MAXIGP0_O$AR__ENA{pps$MAXIGP0ARADDR,pps$MAXIGP0ARID,pps$MAXIGP0ARLEN}
    }
    METHOD/Rule RULEgp0aw$100__ENA if ((pps$MAXIGP0AWVALID)) {
        CALL/Action :MAXIGP0_O$AW__ENA{pps$MAXIGP0AWADDR,pps$MAXIGP0AWID,pps$MAXIGP0AWLEN}
    }
    METHOD/Rule RULEgp0aw__ENA if ((pps$MAXIGP0AWVALID)) {
        CALL/Action :MAXIGP0_O$AW__ENA{pps$MAXIGP0AWADDR,pps$MAXIGP0AWID,pps$MAXIGP0AWLEN}
    }
    METHOD/Rule RULEgp0w$100__ENA if ((pps$MAXIGP0WVALID)) {
        CALL/Action :MAXIGP0_O$W__ENA{pps$MAXIGP0WDATA,pps$MAXIGP0WID,pps$MAXIGP0WLAST}
    }
    METHOD/Rule RULEgp0w__ENA if ((pps$MAXIGP0WVALID)) {
        CALL/Action :MAXIGP0_O$W__ENA{pps$MAXIGP0WDATA,pps$MAXIGP0WID,pps$MAXIGP0WLAST}
    }
    METHOD/Rule RULEinit$100__ENA {
        LET INTEGER_1 :pps$FPGAIDLEN = 1
        LET INTEGER_1 :pps$MAXIGP0ACLK = __defaultClock
        LET INTEGER_1 :pps$MAXIGP0RVALID = MAXIGP0_I$R__ENA
        LET INTEGER_1 :pps$MAXIGP0BVALID = MAXIGP0_I$B__ENA
        LET INTEGER_1 :pps$MAXIGP0ARREADY = MAXIGP0_O$AR__RDY
        LET INTEGER_1 :pps$MAXIGP0AWREADY = MAXIGP0_O$AW__RDY
        LET INTEGER_1 :pps$MAXIGP0WREADY = MAXIGP0_O$W__RDY
        LET INTEGER_15 :DDR_Addr = pps$DDRA
        LET INTEGER_3 :DDR_BankAddr = pps$DDRBA
        LET INTEGER_1 :DDR_CAS_n = pps$DDRCASB
        LET INTEGER_1 :DDR_CKE = pps$DDRCKE
        LET INTEGER_1 :DDR_Clk_n = pps$DDRCKN
        LET INTEGER_1 :DDR_Clk_p = pps$DDRCKP
        LET INTEGER_1 :DDR_CS_n = pps$DDRCSB
        LET INTEGER_4 :DDR_DM = pps$DDRDM
        LET INTEGER_32 :DDR_DQ = pps$DDRDQ
        LET INTEGER_4 :DDR_DQS_n = pps$DDRDQSN
        LET INTEGER_4 :DDR_DQS_p = pps$DDRDQSP
        LET INTEGER_1 :DDR_DRSTB = pps$DDRDRSTB
        LET INTEGER_1 :DDR_ODT = pps$DDRODT
        LET INTEGER_1 :DDR_RAS_n = pps$DDRRASB
        LET INTEGER_1 :FIXED_IO_ddr_vrn = pps$DDRVRN
        LET INTEGER_1 :FIXED_IO_ddr_vrp = pps$DDRVRP
        LET INTEGER_1 :DDR_WEB = pps$DDRWEB
        LET INTEGER_1 :FIXED_IO_ps_clk = pps$PSCLK
        LET INTEGER_1 :FIXED_IO_ps_porb = pps$PSPORB
        LET INTEGER_1 :FIXED_IO_ps_srstb = pps$PSSRSTB
        LET INTEGER_4 :pps$DDRARB = 0
        LET INTEGER_20 :pps$IRQF2P = interrupt
        LET INTEGER_1 :pclockTop$userCLK = __defaultClock
        LET INTEGER_1 :pclockTop$usernRST = __defaultnReset
    }
    METHOD/Rule RULEinit__ENA {
        LET INTEGER_1 :pps$FPGAIDLEN = 1
        LET INTEGER_1 :pps$MAXIGP0ACLK = __defaultClock
        LET INTEGER_1 :pps$MAXIGP0RVALID = MAXIGP0_I$R__ENA
        LET INTEGER_1 :pps$MAXIGP0BVALID = MAXIGP0_I$B__ENA
        LET INTEGER_1 :pps$MAXIGP0ARREADY = MAXIGP0_O$AR__RDY
        LET INTEGER_1 :pps$MAXIGP0AWREADY = MAXIGP0_O$AW__RDY
        LET INTEGER_1 :pps$MAXIGP0WREADY = MAXIGP0_O$W__RDY
        LET INTEGER_15 :DDR_Addr = pps$DDRA
        LET INTEGER_3 :DDR_BankAddr = pps$DDRBA
        LET INTEGER_1 :DDR_CAS_n = pps$DDRCASB
        LET INTEGER_1 :DDR_CKE = pps$DDRCKE
        LET INTEGER_1 :DDR_Clk_n = pps$DDRCKN
        LET INTEGER_1 :DDR_Clk_p = pps$DDRCKP
        LET INTEGER_1 :DDR_CS_n = pps$DDRCSB
        LET INTEGER_4 :DDR_DM = pps$DDRDM
        LET INTEGER_32 :DDR_DQ = pps$DDRDQ
        LET INTEGER_4 :DDR_DQS_n = pps$DDRDQSN
        LET INTEGER_4 :DDR_DQS_p = pps$DDRDQSP
        LET INTEGER_1 :DDR_DRSTB = pps$DDRDRSTB
        LET INTEGER_1 :DDR_ODT = pps$DDRODT
        LET INTEGER_1 :DDR_RAS_n = pps$DDRRASB
        LET INTEGER_1 :FIXED_IO_ddr_vrn = pps$DDRVRN
        LET INTEGER_1 :FIXED_IO_ddr_vrp = pps$DDRVRP
        LET INTEGER_1 :DDR_WEB = pps$DDRWEB
        LET INTEGER_1 :FIXED_IO_ps_clk = pps$PSCLK
        LET INTEGER_1 :FIXED_IO_ps_porb = pps$PSPORB
        LET INTEGER_1 :FIXED_IO_ps_srstb = pps$PSSRSTB
        LET INTEGER_4 :pps$DDRARB = 0
        LET INTEGER_20 :pps$IRQF2P = interrupt
        LET INTEGER_1 :pclockTop$userCLK = __defaultClock
        LET INTEGER_1 :pclockTop$usernRST = __defaultnReset
    }
}
MODULE ResetInverter {
    INTERFACE l_ainterface_OC_MResetInverterResetInverter _
    METHOD/Rule RULEinit$100__ENA {
        LET INTEGER_1 :RESET_OUT = ((RESET_IN) != (0)) ^ (1)
    }
    METHOD/Rule RULEinit__ENA {
        LET INTEGER_1 :RESET_OUT = ((RESET_IN) != (0)) ^ (1)
    }
}
MODULE TestTop {
    INTERFACECONNECT readUser user$read l_ainterface_OC_PipeInB
    INTERFACE l_ainterface_OC_TestPins _
    INTERFACE l_ainterface_OC_MaxiO MAXIGP0_O
    INTERFACE/Ptr l_ainterface_OC_MaxiI MAXIGP0_I
    FIELD INTEGER_1 intEnable
    FIELD INTEGER_1 writeFirst
    FIELD INTEGER_1 writeLast
    FIELD INTEGER_1 readFirst
    FIELD INTEGER_1 readLast
    FIELD INTEGER_1 selectRIndReq
    FIELD INTEGER_1 portalRControl
    FIELD INTEGER_1 selectWIndReq
    FIELD INTEGER_1 portalWControl
    FIELD INTEGER_10 readCount
    FIELD INTEGER_10 writeCount
    FIELD INTEGER_5 readAddr
    FIELD INTEGER_5 writeAddr
    FIELD Fifo1_OC_10 reqArs
    FIELD Fifo1_OC_10 reqAws
    FIELD Fifo1_OC_12 readBeat
    FIELD Fifo1_OC_12 writeBeat
    FIELD Fifo1_OC_14 readData
    FIELD Fifo1_OC_16 readBus
    FIELD Fifo1_OC_16 writeData
    FIELD Fifo1_OC_18 writeDone
    FIELD UserTop user
    INTERFACE l_ainterface_OC_PipeInB readUser
    METHOD MAXIGP0_O$AR__ENA ( INTEGER_32 addr , INTEGER_12 id , INTEGER_4 len ) {
        ALLOCA l_struct_OC_AddrCount MAXIGP0_O$AR__ENA$agg_2e_tmp
        LET INTEGER_6 :MAXIGP0_O$AR__ENA$agg_2e_tmp$id = MAXIGP0_O$AR$id
        LET INTEGER_10 :MAXIGP0_O$AR__ENA$agg_2e_tmp$count = ((MAXIGP0_O$AR$len) + (1)) << (2)
        LET INTEGER_5 :MAXIGP0_O$AR__ENA$agg_2e_tmp$addr = MAXIGP0_O$AR$addr
        CALL/Action :reqArs$in$enq__ENA{MAXIGP0_O$AR__ENA$agg_2e_tmp}
        STORE :portalRControl = (__bitsubstr{MAXIGP0_O$AR$addr,11,5}) == (0)
        STORE :selectRIndReq = __bitsubstr{MAXIGP0_O$AR$addr,12}
    }
    METHOD MAXIGP0_O$AW__ENA ( INTEGER_32 addr , INTEGER_12 id , INTEGER_4 len ) {
        ALLOCA l_struct_OC_AddrCount MAXIGP0_O$AW__ENA$agg_2e_tmp
        LET INTEGER_6 :MAXIGP0_O$AW__ENA$agg_2e_tmp$id = MAXIGP0_O$AW$id
        LET INTEGER_10 :MAXIGP0_O$AW__ENA$agg_2e_tmp$count = ((MAXIGP0_O$AW$len) + (1)) << (2)
        LET INTEGER_5 :MAXIGP0_O$AW__ENA$agg_2e_tmp$addr = MAXIGP0_O$AW$addr
        CALL/Action :reqAws$in$enq__ENA{MAXIGP0_O$AW__ENA$agg_2e_tmp}
        STORE :portalWControl = (__bitsubstr{MAXIGP0_O$AW$addr,11,5}) == (0)
        STORE :selectWIndReq = __bitsubstr{MAXIGP0_O$AW$addr,12}
    }
    METHOD MAXIGP0_O$W__ENA ( INTEGER_32 data , INTEGER_12 id , INTEGER_1 last ) {
        ALLOCA l_struct_OC_BusData MAXIGP0_O$W__ENA$agg_2e_tmp
        LET INTEGER_32 :MAXIGP0_O$W__ENA$agg_2e_tmp$data = MAXIGP0_O$W$data
        CALL/Action :writeData$in$enq__ENA{MAXIGP0_O$W__ENA$agg_2e_tmp}
    }
    METHOD/Rule RULEinit__ENA
    METHOD/Rule RULElR__ENA {
        ALLOCA l_struct_OC_ReadResp RULElR__ENA$temp
        CALL :readData$out$first{}
        LET l_struct_OC_ReadResp :RULElR__ENA$temp = readData$out$first
        CALL/Action :readData$out$deq__ENA{}
        CALL/Action :MAXIGP0_I$R__ENA{RULElR__ENA$temp$data,RULElR__ENA$temp$id,1,0}
    }
    METHOD/Rule RULElreadNext__ENA {
        ALLOCA l_struct_OC_PortalInfo RULElreadNext__ENA$agg_2e_tmp
        ALLOCA l_struct_OC_AddrCount RULElreadNext__ENA$temp
        CALL :reqArs$out$first{}
        LET l_struct_OC_AddrCount :RULElreadNext__ENA$temp = reqArs$out$first
        LET INTEGER_6 :RULElreadNext__ENA$agg_2e_tmp$ac$id = RULElreadNext__ENA$temp$id
        LET INTEGER_10 :RULElreadNext__ENA$agg_2e_tmp$ac$count = (((readFirst) != (0)) ^ 1) ? (RULElreadNext__ENA$temp$count):(readCount)
        LET INTEGER_5 :RULElreadNext__ENA$agg_2e_tmp$ac$addr = (((readFirst) != (0)) ^ 1) ? (RULElreadNext__ENA$temp$addr):(readAddr)
        LET INTEGER_1 :RULElreadNext__ENA$agg_2e_tmp$last = (((((((readFirst) != (0)) ^ 1) ? ((RULElreadNext__ENA$temp$count) == (1)):(readLast)) != (0)) ^ (1)) != (0)) ^ (1)
        CALL/Action :readBeat$in$enq__ENA{RULElreadNext__ENA$agg_2e_tmp}
        STORE :readAddr = ((((readFirst) != (0)) ^ 1) ? (RULElreadNext__ENA$temp$addr):(readAddr)) + (4)
        STORE :readCount = ((((readFirst) != (0)) ^ 1) ? (RULElreadNext__ENA$temp$count):(readCount)) - (1)
        STORE :readFirst = (((((readFirst) != (0)) ^ 1) ? ((RULElreadNext__ENA$temp$count) == (1)):(readLast)) != (0)) ^ (1)
        STORE :readLast = ((((readFirst) != (0)) ^ 1) ? (RULElreadNext__ENA$temp$count):(readCount)) == (2)
        CALL/Action ((((((((readFirst) != (0)) ^ 1) ? ((RULElreadNext__ENA$temp$count) == (1)):(readLast)) != (0)) ^ (1)) != (0)) ^ 1):reqArs$out$deq__ENA{}
    }
    METHOD/Rule RULElread__ENA {
        ALLOCA l_struct_OC_ReadResp RULElread__ENA$agg_2e_tmp
        ALLOCA l_struct_OC_BusData RULElread__ENA$ref_2e_tmp
        ALLOCA l_struct_OC_PortalInfo RULElread__ENA$temp
        CALL :readBeat$out$first{}
        LET l_struct_OC_PortalInfo :RULElread__ENA$temp = readBeat$out$first
        CALL/Action :readBeat$out$deq__ENA{}
        CALL (((RULElread__ENA$temp$ac$addr) == 0) & ((selectRIndReq) != (0))):readBus$out$first{}
        LET l_struct_OC_BusData (((RULElread__ENA$temp$ac$addr) == 0) & ((selectRIndReq) != (0))):RULElread__ENA$ref_2e_tmp = readBus$out$first
        CALL/Action (((RULElread__ENA$temp$ac$addr) == 0) & ((selectRIndReq) != (0))):readBus$out$deq__ENA{}
        LET INTEGER_6 :RULElread__ENA$agg_2e_tmp$id = RULElread__ENA$temp$ac$id
        LET INTEGER_32 :RULElread__ENA$agg_2e_tmp$data = ((portalRControl) != (0)) ? (0):(0)
        CALL/Action :readData$in$enq__ENA{RULElread__ENA$agg_2e_tmp}
    }
    METHOD/Rule RULElwriteNext__ENA {
        ALLOCA l_struct_OC_PortalInfo RULElwriteNext__ENA$agg_2e_tmp
        ALLOCA l_struct_OC_AddrCount RULElwriteNext__ENA$temp
        CALL :reqAws$out$first{}
        LET l_struct_OC_AddrCount :RULElwriteNext__ENA$temp = reqAws$out$first
        LET INTEGER_6 :RULElwriteNext__ENA$agg_2e_tmp$ac$id = RULElwriteNext__ENA$temp$id
        LET INTEGER_10 :RULElwriteNext__ENA$agg_2e_tmp$ac$count = (((writeFirst) != (0)) ^ 1) ? (__bitsubstr{RULElwriteNext__ENA$temp$count,9,2}):(writeCount)
        LET INTEGER_5 :RULElwriteNext__ENA$agg_2e_tmp$ac$addr = (((writeFirst) != (0)) ^ 1) ? (RULElwriteNext__ENA$temp$addr):(writeAddr)
        LET INTEGER_1 :RULElwriteNext__ENA$agg_2e_tmp$last = (((((((writeFirst) != (0)) ^ 1) ? ((RULElwriteNext__ENA$temp$count) == (4)):(writeLast)) != (0)) ^ (1)) != (0)) ^ (1)
        CALL/Action :writeBeat$in$enq__ENA{RULElwriteNext__ENA$agg_2e_tmp}
        STORE :writeAddr = ((((writeFirst) != (0)) ^ 1) ? (RULElwriteNext__ENA$temp$addr):(writeAddr)) + (4)
        STORE :writeCount = ((((writeFirst) != (0)) ^ 1) ? (__bitsubstr{RULElwriteNext__ENA$temp$count,9,2}):(writeCount)) - (1)
        STORE :writeFirst = (((((writeFirst) != (0)) ^ 1) ? ((RULElwriteNext__ENA$temp$count) == (4)):(writeLast)) != (0)) ^ (1)
        STORE :writeLast = ((((writeFirst) != (0)) ^ 1) ? (__bitsubstr{RULElwriteNext__ENA$temp$count,9,2}):(writeCount)) == (2)
        CALL/Action ((((((((writeFirst) != (0)) ^ 1) ? ((RULElwriteNext__ENA$temp$count) == (4)):(writeLast)) != (0)) ^ (1)) != (0)) ^ 1):reqAws$out$deq__ENA{}
    }
    METHOD/Rule RULElwrite__ENA {
        ALLOCA l_struct_OC_BusData RULElwrite__ENA$temp
        ALLOCA l_struct_OC_PortalInfo RULElwrite__ENA$wb
        CALL :writeBeat$out$first{}
        LET l_struct_OC_PortalInfo :RULElwrite__ENA$wb = writeBeat$out$first
        CALL/Action ((RULElwrite__ENA$wb$last) != (0)):writeDone$in$enq__ENA{RULElwrite__ENA$wb$ac$id}
        CALL/Action (((RULElwrite__ENA$wb$last) != (0)) ^ 1):writeBeat$out$deq__ENA{}
        CALL (((RULElwrite__ENA$wb$last) != (0)) ^ 1):writeData$out$first{}
        LET l_struct_OC_BusData (((RULElwrite__ENA$wb$last) != (0)) ^ 1):RULElwrite__ENA$temp = writeData$out$first
        CALL/Action (((RULElwrite__ENA$wb$last) != (0)) ^ 1):writeData$out$deq__ENA{}
        CALL/Action ((((portalWControl) != (0))^ 1) & (((RULElwrite__ENA$wb$last) != (0)) ^ 1)):user$write$enq__ENA{RULElwrite__ENA$temp$data,(RULElwrite__ENA$wb$ac$addr) != (0)}
        STORE (((RULElwrite__ENA$wb$ac$addr) == (4)) & (((portalWControl) != (0)) & (((RULElwrite__ENA$wb$last) != (0)) ^ 1))):intEnable = __bitsubstr{RULElwrite__ENA$temp$data,0,0}
    }
    METHOD/Rule RULEwriteResponse__ENA {
        CALL :writeDone$out$first{}
        CALL/Action :MAXIGP0_I$B__ENA{writeDone$out$first,0}
        CALL/Action :writeDone$out$deq__ENA{}
    }
    METHOD readUser$enq__ENA ( INTEGER_32 v ) {
        ALLOCA l_struct_OC_BusData readUser$enq__ENA$agg_2e_tmp
        LET INTEGER_32 :readUser$enq__ENA$agg_2e_tmp$data = readUser$enq$v
        CALL/Action :readBus$in$enq__ENA{readUser$enq__ENA$agg_2e_tmp}
    }
}
MODULE ZynqTop {
    INTERFACECONNECT/Forward MAXIGP0_O zt$MAXIGP0_O l_ainterface_OC_MaxiO
    INTERFACECONNECT/Forward MAXIGP0_I zt$MAXIGP0_I l_ainterface_OC_MaxiI
    INTERFACECONNECT/Forward _ zt$_ l_ainterface_OC_ZynqClock
    INTERFACECONNECT/Forward M zt$M l_ainterface_OC_Pps7m
    INTERFACECONNECT/Forward FCLK zt$FCLK l_ainterface_OC_Pps7fclk
    INTERFACE l_ainterface_OC_ZynqClock _
    INTERFACE l_ainterface_OC_Pps7m M
    INTERFACE l_ainterface_OC_Pps7fclk FCLK
    FIELD P7Wrap zt
    INTERFACE/Ptr l_ainterface_OC_MaxiO MAXIGP0_O
    INTERFACE l_ainterface_OC_MaxiI MAXIGP0_I
}
MODULE ZynqTopNew {
    INTERFACECONNECT test$MAXIGP0_O zt$MAXIGP0_O l_ainterface_OC_MaxiO
    INTERFACECONNECT test$MAXIGP0_I zt$MAXIGP0_I l_ainterface_OC_MaxiI
    INTERFACECONNECT/Forward _ zt$_ l_ainterface_OC_ZynqClock
    INTERFACECONNECT/Forward M zt$M l_ainterface_OC_Pps7m
    INTERFACECONNECT/Forward FCLK zt$FCLK l_ainterface_OC_Pps7fclk
    INTERFACE l_ainterface_OC_ZynqClock _
    INTERFACE l_ainterface_OC_Pps7m M
    INTERFACE l_ainterface_OC_Pps7fclk FCLK
    FIELD P7Wrap zt
    FIELD TestTop test
}
