INTERFACE l_ainterface_OC_PipeIn {
    METHOD/Action enq__ENA ( Bit(999999) v )
}
INTERFACE l_ainterface_OC_PipeOut {
    METHOD/Action deq__ENA
    METHOD first Bit(999999)
}
INTERFACE l_ainterface_OC_PulseWireIf {
    METHOD/Action send__ENA
    METHOD value Bit(1)
}
EMODULE Fifo {
    INTERFACE l_ainterface_OC_PipeIn in
    INTERFACE l_ainterface_OC_PipeOut out
}
EMODULE PulseWire {
    INTERFACE l_ainterface_OC_PulseWireIf _
}
MODULE SizedDFIFOF$__PARAM__$width$999999 {
    INTERFACE l_ainterface_OC_PipeIn in
    INTERFACE l_ainterface_OC_PipeOut out
    FIELD/Count 999999  Bit(999999) q
    FIELD Bit(999999) c
    FIELD/shared Bit(999999) x_wire
    FIELD PulseWire enqueueing
    FIELD PulseWire dequeueing
    METHOD/Action FOR$0Body__ENA ( Bit(32) __inst$Genvar1 ) {
        STORE :q[__inst$Genvar1] = __phi(((__inst$Genvar1) == (999998)):(0), (((__inst$Genvar1) == (999998)) ^ 1):(q[(__inst$Genvar1) + (1)]))
    }
    METHOD/Action FOR$1Body__ENA ( Bit(32) __inst$Genvar1 ) {
        STORE :q[__inst$Genvar1] = __phi((((__inst$Genvar1) == (999998)) & ((c) != ((__inst$Genvar1) + (1)))):(0), ((((__inst$Genvar1) == (999998)) ^ 1) & ((c) != ((__inst$Genvar1) + (1)))):(q[(__inst$Genvar1) + (1)]))
    }
    METHOD/Rule/Action RULE$both__ENA if (((dequeueing$value) && (enqueueing$value))) {
        GENERATE :__inst$Genvar1,(0),((__inst$Genvar1) < (999999)),((__inst$Genvar1) + (1)),FOR$1Body__ENA
        STORE :q[(c) - (1)] = x_wire
    }
    METHOD/Rule/Action RULE$decCtr__ENA if (((dequeueing$value) && ((enqueueing$value) ^ (1)))) {
        GENERATE :__inst$Genvar1,(0),((__inst$Genvar1) < (999999)),((__inst$Genvar1) + (1)),FOR$0Body__ENA
        STORE :c = (c) + (-1)
    }
    METHOD/Rule/Action RULE$incCtr__ENA if (((enqueueing$value) && ((dequeueing$value) ^ (1)))) {
        STORE :c = (c) + (1)
        STORE :q[c] = x_wire
    }
    METHOD/Action in$enq__ENA ( Bit(999999) x ) if ((((c) == (999999)) ^ (1))) {
        CALL/Action :enqueueing$send__ENA{}
        STORE :x_wire = in$enq$x
    }
    METHOD/Action out$deq__ENA if ((((c) == (0)) ^ (1))) {
        CALL/Action :dequeueing$send__ENA{}
    }
    METHOD out$first Bit(999999) = ((q[0]))
}
