INTERFACE PipeIn {
    METHOD/Action enq__ENA ( Bit(999) v )
}
INTERFACE PipeIn.1 {
    METHOD/Action enq__ENA ( Bit(999) v )
}
INTERFACE PipeOut {
    METHOD/Action deq__ENA
    METHOD first Bit(999)
}
INTERFACE PipeOut.2 {
    METHOD/Action deq__ENA
    METHOD first Bit(999)
}
INTERFACE PulseWireIf {
    METHOD/Action send__ENA
    METHOD value Bit(1)
}
EMODULE Fifo {
    INTERFACE PipeIn in
    INTERFACE PipeOut out
}
EMODULE Fifo.0 {
    INTERFACE PipeIn.1 in
    INTERFACE PipeOut.2 out
}
MODULE PulseWire {
    INTERFACE PulseWireIf ifc
    METHOD/Action ifc$send__ENA
    METHOD ifc$value Bit(1) = ((0))
}
MODULE SCounter(depth=10) {
    INTERFACE PipeIn in
    INTERFACE PipeOut out
    FIELD SCounterBase(depth=10,width=999) fifo
    METHOD/Action in$enq__ENA ( Bit(999) v ) {
        CALL/Action :fifo$in$enq__ENA{in$enq$v}
    }
    METHOD/Action out$deq__ENA {
        CALL/Action :fifo$out$deq__ENA{}
    }
    METHOD out$first Bit(999) = ((fifo$out$first)) {
        CALL :fifo$out$first{}
    }
}
MODULE SCounterBase(depth=10,width=999) {
    INTERFACE PipeIn.1 in
    INTERFACE PipeOut.2 out
    FIELD/Count 10  Bit(999) q
    FIELD Bit(10) c
    FIELD/shared Bit(999) x_wire
    FIELD PulseWire enqueueing
    FIELD PulseWire dequeueing
    METHOD/Action FOR$0Body__ENA ( Bit(32) __inst$Genvar1 ) {
        STORE :q[__inst$Genvar1] = __phi((((__inst$Genvar1) + (1)) == (10)):(0), ((((__inst$Genvar1) + (1)) == (10)) ^ 1):(q[(__inst$Genvar1) + (1)]))
    }
    METHOD/Action FOR$1Body__ENA ( Bit(32) __inst$Genvar1 ) {
        STORE :q[__inst$Genvar1] = __phi(((((__inst$Genvar1) + (1)) == (10)) & ((c) != ((__inst$Genvar1) + (1)))):(0), (((((__inst$Genvar1) + (1)) == (10)) ^ 1) & ((c) != ((__inst$Genvar1) + (1)))):(q[(__inst$Genvar1) + (1)]))
    }
    METHOD/Rule/Action RULE$both__ENA if (((dequeueing$ifc$value) && (enqueueing$ifc$value))) {
        GENERATE :__inst$Genvar1,(0),((__inst$Genvar1) < (10)),((__inst$Genvar1) + (1)),FOR$1Body__ENA
        STORE :q[(c) - (1)] = x_wire
    }
    METHOD/Rule/Action RULE$decCtr__ENA if (((dequeueing$ifc$value) && ((enqueueing$ifc$value) ^ (1)))) {
        GENERATE :__inst$Genvar1,(0),((__inst$Genvar1) < (10)),((__inst$Genvar1) + (1)),FOR$0Body__ENA
        STORE :c = (c) + (-1)
    }
    METHOD/Rule/Action RULE$incCtr__ENA if (((enqueueing$ifc$value) && ((dequeueing$ifc$value) ^ (1)))) {
        STORE :c = (c) + (1)
        STORE :q[c] = x_wire
    }
    METHOD/Action in$enq__ENA ( Bit(999) x ) if ((((c) == (10)) ^ (1))) {
        CALL/Action :enqueueing$ifc$send__ENA{}
        STORE :x_wire = in$enq$x
    }
    METHOD/Action out$deq__ENA if ((((c) == (0)) ^ (1))) {
        CALL/Action :dequeueing$ifc$send__ENA{}
    }
    METHOD out$first Bit(999) = ((q[0]))
}
