STRUCT NOCDataH  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    FIELD Bit(16) length
    FIELD Bit(128) data
}
INTERFACE EchoIfc  {
    FILE printf_OC_cpp
    SOFTWARE request
    SOFTWARE indication
    INTERFACE EchoRequest request
    INTERFACE/Ptr EchoIndication indication
}
INTERFACE EchoIndication  {
    FILE printf_OC_cpp
    METHOD/Action heard__ENA ( Bit(32) v )
    METHOD/Action heard2__ENA ( Bit(16) a , Bit(16) b )
    METHOD/Action heard3__ENA ( Bit(16) a , Bit(32) b , Bit(32) c , Bit(16) d )
}
INTERFACE EchoRequest  {
    FILE printf_OC_cpp
    METHOD/Action say__ENA ( Bit(32) v )
    METHOD/Action say2__ENA ( Bit(16) a , Bit(16) b )
    METHOD/Action setLeds__ENA ( Bit(8) v )
}
INTERFACE MuxPipeIfc  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_mux_OC_h
    INTERFACE PipeIn(width=144) in
    INTERFACE PipeIn(width=144) forward
    INTERFACE/Ptr PipeIn(width=144) out
}
INTERFACE PipeIn(width=32)  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    METHOD/Action enq__ENA ( Bit(width) v )
}
INTERFACE SelectIndexIfc(funnelWidth=20,width=14)  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    FIELD Bit(14) out
    FIELD/Ptr/Count funnelWidth  Bit(14) in
    FIELD Bit(5) index
}
EMODULE Dummy PipeIn(width=32) {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
}
EMODULE MuxPipe MuxPipeIfc {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_mux_OC_h
}
EMODULE Printf PipeIn(width=144) {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
}
EMODULE/Verilog SelectIndex(funnelWidth=20,width=14) SelectIndexIfc(funnelWidth=20,width=14) {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
}
MODULE Echo EchoIfc {
    FILE printf_OC_cpp
    FIELD Bit(1) busy
    FIELD Bit(1) busy_delay
    FIELD Bit(32) v_temp
    FIELD Bit(32) v_delay
    FIELD Bit(16) a_temp
    FIELD Bit(16) b_temp
    FIELD Bit(16) a_delay
    FIELD Bit(16) b_delay
    FIELD Bit(32) v_type
    FIELD Bit(32) clockReg
    METHOD/Action request$say__ENA ( Bit(32) v ) if ((((busy) != (0)) ^ (1))) {
        PRINTF :printf{"[%s:%d]Echo %x %x\n","request$say",46,busy_delay,clockReg}
        STORE :v_temp = request$say$v
        STORE :busy = 1
        STORE :v_type = 1
    }
    METHOD/Action request$say2__ENA ( Bit(16) a , Bit(16) b ) if ((((busy) != (0)) ^ (1))) {
        PRINTF :printf{"[%s:%d]Echo\n","request$say2",52}
        STORE :a_temp = request$say2$a
        STORE :b_temp = request$say2$b
        STORE :busy = 1
        STORE :v_type = 2
    }
    METHOD/Action request$setLeds__ENA ( Bit(8) v ) {
        PRINTF :printf{"[%s:%d]Echo\n","request$setLeds",59}
    }
    METHOD/Rule/Action RULE$delay_rule__ENA if (((((busy) != (0)) & ((busy_delay) == (0))) != (0))) {
        PRINTF :printf{"[delay_rule:%d]Echo\n",62}
        STORE :busy = 0
        STORE :busy_delay = 1
        STORE :v_delay = v_temp
        STORE :a_delay = a_temp
        STORE :b_delay = b_temp
    }
    METHOD/Rule/Action RULE$respond_rule__ENA if (((busy_delay) != (0))) {
        PRINTF :printf{"[respond_rule:%d]Echo\n",70}
        STORE :busy_delay = 0
        CALL/Action ((v_type) == (1)):indication$heard__ENA{v_delay}
        CALL/Action !((v_type) == (1)):indication$heard2__ENA{a_delay,b_delay}
    }
    METHOD/Rule/Action RULE$clockRule__ENA {
        STORE :clockReg = (clockReg) + (1)
    }
}
