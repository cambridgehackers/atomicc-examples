EMODULE l_struct_OC_NOCData {
    FIELD/Count 4  INTEGER_32 data
}
EMODULE l_ainterface_OC_EchoIndication {
    METHOD heard2__ENA ( INTEGER_16 a , INTEGER_16 b )
    METHOD heard3__ENA ( INTEGER_16 a , INTEGER_32 b , INTEGER_32 c , INTEGER_16 d )
    METHOD heard__ENA ( INTEGER_32 v )
}
EMODULE l_ainterface_OC_EchoRequest {
    METHOD say2__ENA ( INTEGER_16 a , INTEGER_16 b )
    METHOD say__ENA ( INTEGER_32 v )
    METHOD setLeds__ENA ( INTEGER_8 v )
    METHOD zsay4__ENA
}
EMODULE l_ainterface_OC_PipeIn {
    METHOD enq__ENA ( l_struct_OC_NOCData v )
}
EMODULE l_ainterface_OC_PipeOut {
    METHOD deq__ENA
    METHOD first l_struct_OC_NOCData
}
EMODULE l_module_OC_Fifo {
    INTERFACE l_ainterface_OC_PipeIn in
    INTERFACE l_ainterface_OC_PipeOut out
}
MODULE l_module_OC_Echo {
    SOFTWARE request
    SOFTWARE indication
    INTERFACE l_ainterface_OC_EchoRequest request
    INTERFACE/Ptr l_ainterface_OC_EchoIndication indication
    INTERFACE/Ptr l_ainterface_OC_PipeIn printfp
    FIELD INTEGER_32 busy
    FIELD INTEGER_32 v_temp
    FIELD INTEGER_32 v_delay
    FIELD INTEGER_16 a_temp
    FIELD INTEGER_16 b_temp
    FIELD INTEGER_16 a_delay
    FIELD INTEGER_16 b_delay
    FIELD INTEGER_32 busy_delay
    FIELD INTEGER_32 v_type
    FIELD INTEGER_32 clockReg
    METHOD/Rule clockRule__ENA if ((1)) {
        STORE :clockReg = (clockReg) + (1)
    }
    METHOD/Rule delay_rule__ENA if (((((busy) != (0)) & ((busy_delay) == (0))) != (0))) {
        PRINTF :printf{"[delay_rule:%d]Echo\n",80}
        STORE :busy = 0
        STORE :busy_delay = 1
        STORE :v_delay = v_temp
        STORE :a_delay = a_temp
        STORE :b_delay = b_temp
    }
    METHOD request$say2__ENA ( INTEGER_16 a , INTEGER_16 b ) if ((((busy) != (0)) ^ (1))) {
        PRINTF :printf{"[%s:%d]Echo\n",("request$say2"),61}
        STORE :a_temp = request$say2$a
        STORE :b_temp = request$say2$b
        STORE :busy = 1
        STORE :v_type = 2
    }
    METHOD request$say__ENA ( INTEGER_32 v ) if ((((busy) != (0)) ^ (1))) {
        PRINTF :printf{"[%s:%d]Echo %x %x\n",("request$say"),55,busy_delay,clockReg}
        STORE :v_temp = request$say$v
        STORE :busy = 1
        STORE :v_type = 1
    }
    METHOD request$setLeds__ENA ( INTEGER_8 v ) {
        PRINTF :printf{"[%s:%d]Echo\n",("request$setLeds"),76}
    }
    METHOD request$zsay4__ENA {
        PRINTF :printf{"[%s:%d]Echo\n",("request$zsay4"),73}
    }
    METHOD/Rule respond_rule__ENA if (((busy_delay) != (0))) {
        PRINTF :printf{"[respond_rule:%d]Echo\n",88}
        STORE :busy_delay = 0
        CALL/Action ((v_type) == (1)):indication$heard__ENA{v_delay}
        CALL/Action (((v_type) == (1)) ^ 1):indication$heard2__ENA{a_delay,b_delay}
    }
}
MODULE l_module_OC_Fifo1 {
    INTERFACE l_ainterface_OC_PipeIn in
    INTERFACE l_ainterface_OC_PipeOut out
    FIELD l_struct_OC_NOCData element
    FIELD INTEGER_1 full
    METHOD in$enq__ENA ( l_struct_OC_NOCData v ) if (((full) ^ (1))) {
        STORE :element = in$enq$v
        STORE :full = 1
    }
    METHOD out$deq__ENA if ((full)) {
        STORE :full = 0
    }
    METHOD out$first l_struct_OC_NOCData = ((element)) if ((full))
}
MODULE l_module_OC_MuxPipe {
    INTERFACE l_ainterface_OC_PipeIn in
    INTERFACE l_ainterface_OC_PipeIn forward
    INTERFACE/Ptr l_ainterface_OC_PipeIn out
    FIELD l_module_OC_Fifo1 forwardFifo
    METHOD/Rule fifoRule__ENA if ((1)) {
        ALLOCA l_struct_OC_NOCData fifoRule__ENA$agg_2e_tmp
        CALL :forwardFifo$out$first{}
        LET l_struct_OC_NOCData :fifoRule__ENA$agg_2e_tmp = forwardFifo$out$first
        CALL/Action :out$enq__ENA{fifoRule__ENA$agg_2e_tmp}
        CALL/Action :forwardFifo$out$deq__ENA{}
    }
    METHOD forward$enq__ENA ( l_struct_OC_NOCData v ) {
        CALL/Action :forwardFifo$in$enq__ENA{forward$enq$v}
    }
    METHOD in$enq__ENA ( l_struct_OC_NOCData v ) {
        CALL/Action :out$enq__ENA{in$enq$v}
    }
}
