EMODULE l_struct_OC_NOCData {
    FIELD/Count 4  INTEGER_32 data
}
EMODULE l_ainterface_OC_EchoIndication {
    METHOD heard2__ENA ( INTEGER_16 a , INTEGER_16 b )
    METHOD heard3__ENA ( INTEGER_16 a , INTEGER_32 b , INTEGER_32 c , INTEGER_16 d )
    METHOD heard__ENA ( INTEGER_32 v )
}
EMODULE l_ainterface_OC_EchoRequest {
    METHOD say2__ENA ( INTEGER_16 a , INTEGER_16 b )
    METHOD say__ENA ( INTEGER_32 v )
    METHOD setLeds__ENA ( INTEGER_8 v )
    METHOD zsay4__ENA
}
EMODULE l_ainterface_OC_PipeIn {
    METHOD enq__ENA ( l_struct_OC_NOCData v )
}
EMODULE l_ainterface_OC_PipeInB {
    METHOD enq__ENA ( INTEGER_32 v , INTEGER_16 length )
}
EMODULE MuxPipe {
    INTERFACE l_ainterface_OC_PipeIn in
    INTERFACE l_ainterface_OC_PipeIn forward
    INTERFACE/Ptr l_ainterface_OC_PipeIn out
}
EMODULE UserTop {
    INTERFACE l_ainterface_OC_PipeInB write
    INTERFACE/Ptr l_ainterface_OC_PipeInB read
}
EMODULE l_top {
    INTERFACE l_ainterface_OC_PipeIn request
    INTERFACE/Ptr l_ainterface_OC_PipeIn indication
}
MODULE Echo {
    SOFTWARE request
    SOFTWARE indication
    INTERFACE l_ainterface_OC_EchoRequest request
    INTERFACE/Ptr l_ainterface_OC_EchoIndication indication
    INTERFACE/Ptr l_ainterface_OC_PipeIn printfp
    FIELD INTEGER_32 busy
    FIELD INTEGER_32 v_temp
    FIELD INTEGER_32 v_delay
    FIELD INTEGER_16 a_temp
    FIELD INTEGER_16 b_temp
    FIELD INTEGER_16 a_delay
    FIELD INTEGER_16 b_delay
    FIELD INTEGER_32 busy_delay
    FIELD INTEGER_32 v_type
    FIELD INTEGER_32 clockReg
    METHOD/Rule RULEclockRule__ENA {
        STORE :clockReg = (clockReg) + (1)
    }
    METHOD/Rule RULEdelay_rule__ENA if (((((busy) != (0)) & ((busy_delay) == (0))) != (0))) {
        PRINTF :printf{"[delay_rule:%d]Echo\n",82}
        STORE :busy = 0
        STORE :busy_delay = 1
        STORE :v_delay = v_temp
        STORE :a_delay = a_temp
        STORE :b_delay = b_temp
    }
    METHOD/Rule RULErespond_rule__ENA if (((busy_delay) != (0))) {
        PRINTF :printf{"[respond_rule:%d]Echo\n",90}
        STORE :busy_delay = 0
        CALL/Action ((v_type) == (1)):indication$heard__ENA{v_delay}
        CALL/Action (((v_type) == (1)) ^ 1):indication$heard2__ENA{a_delay,b_delay}
    }
    METHOD request$say2__ENA ( INTEGER_16 a , INTEGER_16 b ) if ((((busy) != (0)) ^ (1))) {
        PRINTF :printf{"[%s:%d]Echo\n","request$say2",63}
        STORE :a_temp = request$say2$a
        STORE :b_temp = request$say2$b
        STORE :busy = 1
        STORE :v_type = 2
    }
    METHOD request$say__ENA ( INTEGER_32 v ) if ((((busy) != (0)) ^ (1))) {
        PRINTF :printf{"[%s:%d]Echo %x %x\n","request$say",57,busy_delay,clockReg}
        STORE :v_temp = request$say$v
        STORE :busy = 1
        STORE :v_type = 1
    }
    METHOD request$setLeds__ENA ( INTEGER_8 v ) {
        PRINTF :printf{"[%s:%d]Echo\n","request$setLeds",78}
    }
    METHOD request$zsay4__ENA {
        PRINTF :printf{"[%s:%d]Echo\n","request$zsay4",75}
    }
}
