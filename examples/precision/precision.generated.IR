EMODULE l_ainterface_OC_IVectorIndication (
    METHOD heard__ENA (
        PARAM meth INTEGER_6
        PARAM v INTEGER_4
    )
)
EMODULE l_ainterface_OC_IVectorRequest (
    METHOD say__ENA (
        PARAM meth INTEGER_6
        PARAM v INTEGER_4
    )
)
EMODULE l_ainterface_OC_PipeIn (
    METHOD enq__ENA (
        PARAM v INTEGER_32
    )
)
EMODULE l_struct_OC_ValueType (
    FIELD a INTEGER_6
    FIELD b INTEGER_4
)
EMODULE l_ainterface_OC_PipeIn_OC_2 (
    METHOD enq__ENA (
        PARAM v l_struct_OC_ValueType
    )
)
EMODULE l_ainterface_OC_PipeOut (
    METHOD deq__ENA
    METHOD first INTEGER_32
)
EMODULE l_ainterface_OC_PipeOut_OC_3 (
    METHOD deq__ENA
    METHOD first l_struct_OC_ValueType
)
EMODULE l_module_OC_Fifo_OC_1 (
    FIELD in l_ainterface_OC_PipeIn_OC_2
    FIELD out l_ainterface_OC_PipeOut_OC_3
)
MODULE l_module_OC_Fifo1_OC_0 (
    FIELD in l_ainterface_OC_PipeIn_OC_2
    FIELD out l_ainterface_OC_PipeOut_OC_3
    FIELD element l_struct_OC_ValueType
    FIELD full INTEGER_8
    METHOD in$enq__ENA (
        PARAM v l_struct_OC_ValueType
        STORE :element = in$enq$v
        STORE :full = 1
    )
    METHOD in$enq__RDY INTEGER_1 = (full ^ 1)
    METHOD out$deq__ENA (
        STORE :full = 0
    )
    METHOD out$deq__RDY INTEGER_1 = (full)
    METHOD out$first l_struct_OC_ValueType = (element)
    METHOD out$first__RDY INTEGER_1 = (full)
)
MODULE l_module_OC_IVector (
    FIELD request l_ainterface_OC_IVectorRequest
    OUTCALL ind l_ainterface_OC_IVectorIndication
    FIELD fifo l_module_OC_Fifo1_OC_0
    FIELD fcounter INTEGER_8
    FIELD counter INTEGER_9
    FIELD gcounter INTEGER_9
    METHOD request$say__ENA (
        PARAM meth INTEGER_6
        PARAM v INTEGER_4
        LET INTEGER_6 :request$say__ENA$temp$a = request$say$meth
        LET INTEGER_4 :request$say__ENA$temp$b = request$say$v
        CALL/Action :fifo$in$enq__ENA{request$say__ENA$temp}
        ALLOCA request$say__ENA$temp l_struct_OC_ValueType
    )
    METHOD/Rule respond__ENA (
        CALL :fifo$out$first{}
        LET l_struct_OC_ValueType :respond__ENA$temp = fifo$out$first{}
        CALL/Action :fifo$out$deq__ENA{}
        CALL/Action :ind$heard__ENA{respond__ENA$temp$a,respond__ENA$temp$b}
        ALLOCA respond__ENA$temp l_struct_OC_ValueType
    )
)
EMODULE l_class_OC_IVectorTest (
    FIELD ivector l_module_OC_IVector
)
EMODULE l_module_OC_Fifo (
    FIELD in l_ainterface_OC_PipeIn
    FIELD out l_ainterface_OC_PipeOut
)
MODULE l_module_OC_Fifo1 (
    FIELD in l_ainterface_OC_PipeIn
    FIELD out l_ainterface_OC_PipeOut
    FIELD element INTEGER_32
    FIELD full INTEGER_8
    METHOD in$enq__ENA (
        PARAM v INTEGER_32
        STORE :element = in$enq$v
        STORE :full = 1
    )
    METHOD in$enq__RDY INTEGER_1 = (full ^ 1)
    METHOD out$deq__ENA (
        STORE :full = 0
    )
    METHOD out$deq__RDY INTEGER_1 = (full)
    METHOD out$first INTEGER_32 = (element)
    METHOD out$first__RDY INTEGER_1 = (full)
)
MODULE l_module_OC_IVectorInd (
    FIELD ind l_ainterface_OC_IVectorIndication
    METHOD ind$heard__ENA (
        PARAM meth INTEGER_6
        PARAM v INTEGER_4
    )
)
