STRUCT NOCDataH  {
    FIELD Bit(16) length
    FIELD Bit(128) data
}
STRUCT ValueType  {
    FIELD Bit(6) a
    FIELD Bit(4) b
}
STRUCT IVectorTest  {
    FIELD IVector ivector
}
INTERFACE Fifo  {
    INTERFACE PipeIn.0 in
    INTERFACE PipeOut out
}
INTERFACE Fifo.1  {
    INTERFACE PipeIn.2 in
    INTERFACE PipeOut.3 out
}
INTERFACE IVectorIFC  {
    INTERFACE IVectorRequest request
    INTERFACE/Ptr IVectorIndication ind
}
INTERFACE IVectorIndication  {
    METHOD/Action heard__ENA ( Bit(6) meth , Bit(4) v )
}
INTERFACE IVectorRequest  {
    METHOD/Action say__ENA ( Bit(6) meth , Bit(4) v )
}
INTERFACE MuxPipeIfc  {
    INTERFACE PipeIn in
    INTERFACE PipeIn forward
    INTERFACE/Ptr PipeIn out
}
INTERFACE PipeIn  {
    METHOD/Action enq__ENA ( NOCDataH v )
}
INTERFACE PipeIn.0  {
    METHOD/Action enq__ENA ( Bit(10) v )
}
INTERFACE PipeIn.2  {
    METHOD/Action enq__ENA ( ValueType v )
}
INTERFACE PipeOut  {
    METHOD/Action deq__ENA
    METHOD first Bit(10)
}
INTERFACE PipeOut.3  {
    METHOD/Action deq__ENA
    METHOD first ValueType
}
INTERFACE l_topIfc  {
    INTERFACE PipeIn request
    INTERFACE/Ptr PipeIn indication
}
EMODULE Fifo1Base(width=10) Fifo {
}
EMODULE IVectorInd IVectorIndication {
}
EMODULE MuxPipe MuxPipeIfc {
}
EMODULE l_top l_topIfc {
}
MODULE Fifo1 Fifo.1 {
    FIELD Fifo1Base(width=10) fifo
    METHOD/Action in$enq__ENA ( ValueType v ) {
        CALL/Action :fifo$in$enq__ENA{in$enq$v}
    }
    METHOD/Action out$deq__ENA {
        CALL/Action :fifo$out$deq__ENA{}
    }
    METHOD out$first ValueType = ((out$first$retval)) {
        ALLOCA ValueType out$first$retval
        CALL :fifo$out$first{}
        LET Bit(10) :out$first$retval = fifo$out$first
    }
}
MODULE IVector IVectorIFC {
    FIELD Fifo1 fifo
    FIELD Bit(((14U / 7) + (3 * 2))) fcounter
    FIELD Bit(9) counter
    FIELD Bit(9) gcounter
    METHOD/Action request$say__ENA ( Bit(6) meth , Bit(4) v ) if ((1)) {
        ALLOCA ValueType request$say$temp
        LET Bit(6) :request$say$temp$a = request$say$meth
        LET Bit(4) :request$say$temp$b = request$say$v
        CALL/Action :fifo$in$enq__ENA{request$say$temp}
    }
    METHOD/Rule/Action RULE$respond__ENA {
        ALLOCA ValueType RULE$respond$temp
        CALL :fifo$out$first{}
        LET ValueType :RULE$respond$temp = fifo$out$first
        CALL/Action :fifo$out$deq__ENA{}
        CALL/Action :ind$heard__ENA{RULE$respond$temp$a,RULE$respond$temp$b}
    }
}
