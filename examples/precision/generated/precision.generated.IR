STRUCT NOCDataH  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    FIELD Bit(16) length
    FIELD Bit(128) data
}
STRUCT ValueType  {
    FILE precision_OC_cpp
    FIELD Bit(6) a
    FIELD Bit(4) b
}
STRUCT IVectorTest  {
    FILE precision_OC_cpp
    FIELD IVector ivector
}
INTERFACE Fifo(width=10)  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    INTERFACE PipeIn(width=10) in
    INTERFACE PipeOut(width=10) out
}
INTERFACE Fifo(width=144)  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    INTERFACE PipeIn(width=144) in
    INTERFACE PipeOut(width=144) out
}
INTERFACE FunnelBaseIfc(funnelWidth=99,width=32)  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    INTERFACE/Count funnelWidth  PipeIn(width=32) in
    INTERFACE/Ptr PipeIn(width=32) out
}
INTERFACE IVectorIFC  {
    FILE precision_OC_cpp
    INTERFACE IVectorRequest request
    INTERFACE/Ptr IVectorIndication ind
}
INTERFACE IVectorIndication  {
    FILE precision_OC_cpp
    METHOD/Action heard__ENA ( Bit(6) meth , Bit(4) v )
}
INTERFACE IVectorRequest  {
    FILE precision_OC_cpp
    METHOD/Action say__ENA ( Bit(6) meth , Bit(4) v )
}
INTERFACE MuxPipeIfc  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_mux_OC_h
    INTERFACE PipeIn(width=144) in
    INTERFACE PipeIn(width=144) forward
    INTERFACE/Ptr PipeIn(width=144) out
}
INTERFACE PipeIn(width=10)  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    METHOD/Action enq__ENA ( Bit(width) v )
}
INTERFACE PipeIn(width=144)  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    METHOD/Action enq__ENA ( Bit(width) v )
}
INTERFACE PipeIn(width=32)  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    METHOD/Action enq__ENA ( Bit(width) v )
}
INTERFACE PipeOut(width=10)  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    METHOD/Action deq__ENA
    METHOD first Bit(width)
}
INTERFACE PipeOut(width=144)  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    METHOD/Action deq__ENA
    METHOD first Bit(width)
}
EMODULE Fifo1Base(width=10) Fifo(width=10) {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_fifo_OC_h
}
EMODULE FunnelBufferedBase(funnelWidth=99,width=32) FunnelBaseIfc(funnelWidth=99,width=32) {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
}
EMODULE IVectorInd IVectorIndication {
    FILE precision_OC_cpp
}
EMODULE MuxPipe MuxPipeIfc {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_mux_OC_h
}
MODULE Fifo1(width=144) Fifo(width=144) {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_fifo_OC_h
    FIELD Fifo1Base(width=10) fifo
    METHOD/Action in$enq__ENA ( ValueType v ) {
        CALL/Action :fifo$in$enq__ENA{in$enq$v}
    }
    METHOD/Action out$deq__ENA {
        CALL/Action :fifo$out$deq__ENA{}
    }
    METHOD out$first ValueType = ((out$first$retval)) {
        ALLOCA ValueType out$first$retval
        CALL :fifo$out$first{}
        LET Bit(10) :out$first$retval = fifo$out$first
    }
}
MODULE IVector IVectorIFC {
    FILE precision_OC_cpp
    FIELD Fifo1(width=144) fifo
    FIELD Bit(((14 / 7) + (3 * 2))) fcounter
    FIELD Bit(9) counter
    FIELD Bit(9) gcounter
    METHOD/Action request$say__ENA ( Bit(6) meth , Bit(4) v ) if ((1)) {
        ALLOCA ValueType request$say$temp
        LET Bit(6) :request$say$temp$a = request$say$meth
        LET Bit(4) :request$say$temp$b = request$say$v
        CALL/Action :fifo$in$enq__ENA{request$say$temp}
    }
    METHOD/Rule/Action RULE$respond__ENA {
        ALLOCA ValueType RULE$respond$temp
        CALL :fifo$out$first{}
        LET ValueType :RULE$respond$temp = fifo$out$first
        CALL/Action :fifo$out$deq__ENA{}
        CALL/Action :ind$heard__ENA{RULE$respond$temp$a,RULE$respond$temp$b}
    }
}
