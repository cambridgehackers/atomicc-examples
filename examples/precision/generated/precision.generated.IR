EMODULE l_struct_OC_NOCData {
    FIELD/Count 4  INTEGER_32 data
}
EMODULE l_struct_OC_ValueType {
    FIELD INTEGER_6 a
    FIELD INTEGER_4 b
}
EMODULE l_class_OC_IVectorTest {
    FIELD IVector ivector
}
EMODULE l_ainterface_OC_IVectorIndication {
    METHOD heard__ENA ( INTEGER_6 meth , INTEGER_4 v )
}
EMODULE l_ainterface_OC_IVectorRequest {
    METHOD say__ENA ( INTEGER_6 meth , INTEGER_4 v )
}
EMODULE l_ainterface_OC_PipeIn {
    METHOD enq__ENA ( l_struct_OC_NOCData v )
}
EMODULE l_ainterface_OC_PipeIn_OC_0 {
    METHOD enq__ENA ( INTEGER_128 v )
}
EMODULE l_ainterface_OC_PipeIn_OC_3 {
    METHOD enq__ENA ( l_struct_OC_ValueType v )
}
EMODULE l_ainterface_OC_PipeIn_OC_5 {
    METHOD enq__ENA ( INTEGER_16 v )
}
EMODULE l_ainterface_OC_PipeOut {
    METHOD deq__ENA
    METHOD first l_struct_OC_NOCData
}
EMODULE l_ainterface_OC_PipeOut_OC_1 {
    METHOD deq__ENA
    METHOD first INTEGER_128
}
EMODULE l_ainterface_OC_PipeOut_OC_4 {
    METHOD deq__ENA
    METHOD first l_struct_OC_ValueType
}
EMODULE l_ainterface_OC_PipeOut_OC_6 {
    METHOD deq__ENA
    METHOD first INTEGER_16
}
EMODULE Fifo {
    INTERFACE l_ainterface_OC_PipeIn in
    INTERFACE l_ainterface_OC_PipeOut out
}
EMODULE Fifo_OC_10 {
    INTERFACE l_ainterface_OC_PipeIn_OC_5 in
    INTERFACE l_ainterface_OC_PipeOut_OC_6 out
}
EMODULE Fifo_OC_2 {
    INTERFACE l_ainterface_OC_PipeIn_OC_0 in
    INTERFACE l_ainterface_OC_PipeOut_OC_1 out
}
EMODULE Fifo_OC_8 {
    INTERFACE l_ainterface_OC_PipeIn_OC_3 in
    INTERFACE l_ainterface_OC_PipeOut_OC_4 out
}
EMODULE IVectorInd {
    INTERFACE l_ainterface_OC_IVectorIndication ind
    METHOD ind$heard__ENA ( INTEGER_6 meth , INTEGER_4 v ) {
        PRINTF :printf{"Heard an ivector: %d %d\n",0,0}
    }
}
MODULE Fifo1 {
    INTERFACE l_ainterface_OC_PipeIn in
    INTERFACE l_ainterface_OC_PipeOut out
    FIELD Fifo1Base fifo
    METHOD in$enq__ENA ( l_struct_OC_NOCData v ) {
        CALL/Action :fifo$in$enq__ENA{in$enq$v}
    }
    METHOD out$deq__ENA {
        CALL/Action :fifo$out$deq__ENA{}
    }
    METHOD out$first l_struct_OC_NOCData = ((out$first$retval)) {
        ALLOCA l_struct_OC_NOCData out$first$retval
        CALL :fifo$out$first{}
        LET INTEGER_128 :out$first$retval = fifo$out$first
    }
}
MODULE Fifo1Base {
    INTERFACE l_ainterface_OC_PipeIn_OC_0 in
    INTERFACE l_ainterface_OC_PipeOut_OC_1 out
    FIELD INTEGER_128 element
    FIELD INTEGER_1 full
    METHOD in$enq__ENA ( INTEGER_128 v ) if (((full) ^ (1))) {
        STORE :element = in$enq$v
        STORE :full = 1
    }
    METHOD out$deq__ENA if ((full)) {
        STORE :full = 0
    }
    METHOD out$first INTEGER_128 = ((element)) if ((full))
}
MODULE Fifo1Base_OC_9 {
    INTERFACE l_ainterface_OC_PipeIn_OC_5 in
    INTERFACE l_ainterface_OC_PipeOut_OC_6 out
    FIELD INTEGER_16 element
    FIELD INTEGER_1 full
    METHOD in$enq__ENA ( INTEGER_16 v ) if (((full) ^ (1))) {
        STORE :element = in$enq$v
        STORE :full = 1
    }
    METHOD out$deq__ENA if ((full)) {
        STORE :full = 0
    }
    METHOD out$first INTEGER_16 = ((element)) if ((full))
}
MODULE Fifo1_OC_7 {
    INTERFACE l_ainterface_OC_PipeIn_OC_3 in
    INTERFACE l_ainterface_OC_PipeOut_OC_4 out
    FIELD Fifo1Base_OC_9 fifo
    METHOD in$enq__ENA ( l_struct_OC_ValueType v ) {
        CALL/Action :fifo$in$enq__ENA{in$enq$v}
    }
    METHOD out$deq__ENA {
        CALL/Action :fifo$out$deq__ENA{}
    }
    METHOD out$first l_struct_OC_ValueType = ((out$first$retval)) {
        ALLOCA l_struct_OC_ValueType out$first$retval
        CALL :fifo$out$first{}
        LET INTEGER_16 :out$first$retval = fifo$out$first
    }
}
MODULE IVector {
    INTERFACE l_ainterface_OC_IVectorRequest request
    INTERFACE/Ptr l_ainterface_OC_IVectorIndication ind
    FIELD Fifo1_OC_7 fifo
    FIELD INTEGER_8 fcounter
    FIELD INTEGER_9 counter
    FIELD INTEGER_9 gcounter
    METHOD/Rule RULErespond__ENA {
        ALLOCA l_struct_OC_ValueType RULErespond__ENA$temp
        CALL :fifo$out$first{}
        LET l_struct_OC_ValueType :RULErespond__ENA$temp = fifo$out$first
        CALL/Action :fifo$out$deq__ENA{}
        CALL/Action :ind$heard__ENA{RULErespond__ENA$temp$a,RULErespond__ENA$temp$b}
    }
    METHOD request$say__ENA ( INTEGER_6 meth , INTEGER_4 v ) if ((1)) {
        ALLOCA l_struct_OC_ValueType request$say__ENA$temp
        LET INTEGER_6 :request$say__ENA$temp$a = request$say$meth
        LET INTEGER_4 :request$say__ENA$temp$b = request$say$v
        CALL/Action :fifo$in$enq__ENA{request$say__ENA$temp}
    }
}
MODULE MuxPipe {
    INTERFACE l_ainterface_OC_PipeIn in
    INTERFACE l_ainterface_OC_PipeIn forward
    INTERFACE/Ptr l_ainterface_OC_PipeIn out
    FIELD Fifo1 forwardFifo
    METHOD/Rule RULEfifoRule__ENA {
        ALLOCA l_struct_OC_NOCData RULEfifoRule__ENA$agg_2e_tmp
        CALL :forwardFifo$out$first{}
        LET l_struct_OC_NOCData :RULEfifoRule__ENA$agg_2e_tmp = forwardFifo$out$first
        CALL/Action :out$enq__ENA{RULEfifoRule__ENA$agg_2e_tmp}
        CALL/Action :forwardFifo$out$deq__ENA{}
    }
    METHOD forward$enq__ENA ( l_struct_OC_NOCData v ) {
        CALL/Action :forwardFifo$in$enq__ENA{forward$enq$v}
    }
    METHOD in$enq__ENA ( l_struct_OC_NOCData v ) {
        CALL/Action :out$enq__ENA{in$enq$v}
    }
}
