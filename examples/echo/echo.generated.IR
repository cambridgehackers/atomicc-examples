EMODULE l_ainterface_OC_EchoIndication {
    METHOD heard__ENA ( INTEGER_32 v )
}
EMODULE l_ainterface_OC_EchoRequest {
    METHOD say__ENA ( INTEGER_32 v )
}
EMODULE l_ainterface_OC_PipeIn {
    METHOD enq__ENA ( INTEGER_32 v )
}
EMODULE l_ainterface_OC_PipeOut {
    METHOD deq__ENA
    METHOD first INTEGER_32
}
EMODULE l_class_OC_EchoTest {
    FIELD echo l_module_OC_Echo
    FIELD x INTEGER_32
}
MODULE l_module_OC_Echo {
    SOFTWARE sout
    SOFTWARE ind
    INTERFACE sout l_ainterface_OC_EchoRequest
    EINTERFACE ind l_ainterface_OC_EchoIndication
    FIELD fifo l_module_OC_Fifo1
    METHOD/Rule respond_rule__ENA {
        CALL/Action :fifo$out$deq__ENA{}
        CALL :fifo$out$first{}
        CALL/Action :ind$heard__ENA{fifo$out$first{}}
    }
    METHOD sout$say__ENA ( INTEGER_32 v ) {
        CALL/Action :fifo$in$enq__ENA{sout$say$v}
    }
}
EMODULE l_module_OC_EchoInd {
    INTERFACE hout l_ainterface_OC_EchoIndication
}
EMODULE l_module_OC_Fifo {
    INTERFACE in l_ainterface_OC_PipeIn
    INTERFACE out l_ainterface_OC_PipeOut
}
EMODULE l_module_OC_Fifo1 {
    INTERFACE in l_ainterface_OC_PipeIn
    INTERFACE out l_ainterface_OC_PipeOut
}
