MODULE l_ainterface_OC_EchoIndication = 5 (
    METHOD Action heard__ENA  (
        PARAM heard$v [31:0]
    )
    METHOD heard__RDY 
)
MODULE l_ainterface_OC_EchoRequest = 4 (
    METHOD Action say__ENA  (
        PARAM say$v [31:0]
    )
    METHOD say__RDY 
)
MODULE l_ainterface_OC_PipeIn = 3 (
    METHOD Action enq__ENA  (
        PARAM enq$v [31:0]
    )
    METHOD enq__RDY 
)
MODULE l_ainterface_OC_PipeOut = 7 (
    METHOD Action deq__ENA 
    METHOD deq__RDY 
    METHOD first RANGE [31:0]
    METHOD first__RDY 
)
MODULE l_module_OC_Fifo1 = 9 (
    METHOD Action in$enq__ENA  (
        PARAM in$enq$v [31:0]
    )
    METHOD in$enq__RDY 
    METHOD Action out$deq__ENA 
    METHOD out$deq__RDY 
    METHOD out$first RANGE [31:0]
    METHOD out$first__RDY 
)
MODULE l_module_OC_Echo = 1 (
    SOFTWARE ind
    SOFTWARE sout
    OUTCALL ind = 5
    RULE respond_rule
    FIELD 4:sout  FORMAT 
    FIELD 5:ind PTR  FORMAT 
    FIELD 9:fifo  FORMAT 
    METHOD Action respond_rule__ENA  (
        CALL Action :fifo$out$deq__ENA{}
        CALL Action :ind$heard__ENA{ind$heard$v;fifo$out$first{}}
        METAINVOKE fifo$out$deq__ENA 
        METAINVOKE fifo$out$first 
        METAINVOKE ind$heard__ENA 
    )
    METHOD respond_rule__RDY  = ((fifo$out$deq__RDY & fifo$out$first__RDY) & ind$heard__RDY) (
        METAINVOKE fifo$out$deq__RDY 
        METAINVOKE fifo$out$first__RDY 
        METAINVOKE ind$heard__RDY 
    )
    METHOD Action sout$say__ENA  (
        PARAM sout$say$v [31:0]
        CALL Action :fifo$in$enq__ENA{fifo$in$enq$v;sout$say$v}
        METAINVOKE fifo$in$enq__ENA 
    )
    METHOD sout$say__RDY  = (fifo$in$enq__RDY) (
        METAINVOKE fifo$in$enq__RDY 
    )
)
MODULE l_class_OC_EchoTest = 2 (
    FIELD 1:echo  FORMAT 
    FIELD x  FORMAT reg[31:0] @
)
