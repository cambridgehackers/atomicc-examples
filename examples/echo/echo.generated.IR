EMODULE l_ainterface_OC_EchoIndication (
    METHOD heard__ENA (
        PARAM heard$v SIZE 32
    )
    METHOD heard__RDY SIZE 1
)
EMODULE l_ainterface_OC_EchoRequest (
    METHOD say__ENA (
        PARAM say$v SIZE 32
    )
    METHOD say__RDY SIZE 1
)
EMODULE l_ainterface_OC_PipeIn (
    METHOD enq__ENA (
        PARAM enq$v SIZE 32
    )
    METHOD enq__RDY SIZE 1
)
EMODULE l_ainterface_OC_PipeOut (
    METHOD deq__ENA
    METHOD deq__RDY SIZE 1
    METHOD first SIZE 32
    METHOD first__RDY SIZE 1
)
EMODULE l_module_OC_Fifo1 (
    METHOD in$enq__ENA (
        PARAM in$enq$v SIZE 32
    )
    METHOD in$enq__RDY SIZE 1
    METHOD out$deq__ENA
    METHOD out$deq__RDY SIZE 1
    METHOD out$first SIZE 32
    METHOD out$first__RDY SIZE 1
)
MODULE l_module_OC_Echo (
    SOFTWARE sout
    SOFTWARE ind
    FIELD l_ainterface_OC_EchoRequest:sout
    OUTCALL ind = l_ainterface_OC_EchoIndication
    FIELD/PTR  l_ainterface_OC_EchoIndication:ind
    FIELD l_module_OC_Fifo1:fifo
    METHOD/Rule respond_rule__ENA (
        METAINVOKE fifo$out$deq__ENA 
        CALL/Action :fifo$out$deq__ENA{}
        METAINVOKE fifo$out$first 
        METAINVOKE ind$heard__ENA 
        CALL/Action :ind$heard__ENA{ind$heard$v;fifo$out$first{}}
    )
    METHOD/Rule respond_rule__RDY SIZE 1 = ((fifo$out$deq__RDY & fifo$out$first__RDY) & ind$heard__RDY) (
        METAINVOKE fifo$out$deq__RDY 
        METAINVOKE fifo$out$first__RDY 
        METAINVOKE ind$heard__RDY 
    )
    METHOD sout$say__ENA (
        PARAM sout$say$v SIZE 32
        METAINVOKE fifo$in$enq__ENA 
        CALL/Action :fifo$in$enq__ENA{fifo$in$enq$v;sout$say$v}
    )
    METHOD sout$say__RDY SIZE 1 = (fifo$in$enq__RDY) (
        METAINVOKE fifo$in$enq__RDY 
    )
)
EMODULE l_class_OC_EchoTest (
    FIELD l_module_OC_Echo:echo
    FIELD x SIZE 32
)
