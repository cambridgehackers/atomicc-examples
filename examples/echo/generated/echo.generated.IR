EMODULE l_struct_OC_NOCData {
    FIELD/Count 4  INTEGER_32 data
}
EMODULE l_class_OC_EchoTest {
    FIELD Echo echo
    FIELD INTEGER_32 x
}
EMODULE l_ainterface_OC_EchoIndication {
    METHOD heard__ENA ( INTEGER_32 v )
}
EMODULE l_ainterface_OC_EchoRequest {
    METHOD say__ENA ( INTEGER_32 v )
}
EMODULE l_ainterface_OC_PipeIn {
    METHOD enq__ENA ( l_struct_OC_NOCData v )
}
EMODULE l_ainterface_OC_PipeIn_OC_0 {
    METHOD enq__ENA ( INTEGER_999999 v )
}
EMODULE l_ainterface_OC_PipeIn_OC_2 {
    METHOD enq__ENA ( INTEGER_128 v )
}
EMODULE l_ainterface_OC_PipeIn_OC_6 {
    METHOD enq__ENA ( INTEGER_32 v )
}
EMODULE l_ainterface_OC_PipeIn_OC_8 {
    METHOD enq__ENA ( INTEGER_32 v )
}
EMODULE l_ainterface_OC_PipeOut {
    METHOD deq__ENA
    METHOD first INTEGER_999999
}
EMODULE l_ainterface_OC_PipeOut_OC_1 {
    METHOD deq__ENA
    METHOD first l_struct_OC_NOCData
}
EMODULE l_ainterface_OC_PipeOut_OC_10 {
    METHOD deq__ENA
    METHOD first INTEGER_32
}
EMODULE l_ainterface_OC_PipeOut_OC_3 {
    METHOD deq__ENA
    METHOD first INTEGER_128
}
EMODULE l_ainterface_OC_PipeOut_OC_7 {
    METHOD deq__ENA
    METHOD first INTEGER_32
}
EMODULE EchoInd {
    INTERFACE l_ainterface_OC_EchoIndication hout
}
EMODULE Fifo {
    INTERFACE l_ainterface_OC_PipeIn_OC_0 in
    INTERFACE l_ainterface_OC_PipeOut out
}
EMODULE Fifo_OC_12 {
    INTERFACE l_ainterface_OC_PipeIn_OC_8 in
    INTERFACE l_ainterface_OC_PipeOut_OC_10 out
}
EMODULE Fifo_OC_4 {
    INTERFACE l_ainterface_OC_PipeIn in
    INTERFACE l_ainterface_OC_PipeOut_OC_1 out
}
EMODULE Fifo_OC_5 {
    INTERFACE l_ainterface_OC_PipeIn_OC_2 in
    INTERFACE l_ainterface_OC_PipeOut_OC_3 out
}
EMODULE Fifo_OC_9 {
    INTERFACE l_ainterface_OC_PipeIn_OC_6 in
    INTERFACE l_ainterface_OC_PipeOut_OC_7 out
}
MODULE Echo {
    INTERFACE l_ainterface_OC_EchoRequest sout
    INTERFACE/Ptr l_ainterface_OC_EchoIndication ind
    FIELD Fifo1_OC_11 fifo
    METHOD/Rule RULErespond_rule__ENA {
        CALL/Action :fifo$out$deq__ENA{}
        CALL :fifo$out$first{}
        CALL/Action :ind$heard__ENA{fifo$out$first}
    }
    METHOD sout$say__ENA ( INTEGER_32 v ) {
        CALL/Action :fifo$in$enq__ENA{sout$say$v}
    }
}
MODULE Fifo1 {
    INTERFACE l_ainterface_OC_PipeIn in
    INTERFACE l_ainterface_OC_PipeOut_OC_1 out
    FIELD Fifo1Base$__PARAM__$width$128 fifo
    METHOD in$enq__ENA ( l_struct_OC_NOCData v ) {
        CALL/Action :fifo$in$enq__ENA{in$enq$v}
    }
    METHOD out$deq__ENA {
        CALL/Action :fifo$out$deq__ENA{}
    }
    METHOD out$first l_struct_OC_NOCData = ((out$first$retval)) {
        ALLOCA l_struct_OC_NOCData out$first$retval
        CALL :fifo$out$first{}
        LET INTEGER_128 :out$first$retval = fifo$out$first
    }
}
MODULE Fifo1Base$__PARAM__$width$128 {
    INTERFACE l_ainterface_OC_PipeIn_OC_2 in
    INTERFACE l_ainterface_OC_PipeOut_OC_3 out
    FIELD INTEGER_128 element
    FIELD INTEGER_1 full
    METHOD in$enq__ENA ( INTEGER_128 v ) if (((full) ^ (1))) {
        STORE :element = in$enq$v
        STORE :full = 1
    }
    METHOD out$deq__ENA if ((full)) {
        STORE :full = 0
    }
    METHOD out$first INTEGER_128 = ((element)) if ((full))
}
MODULE Fifo1Base$__PARAM__$width$32 {
    INTERFACE l_ainterface_OC_PipeIn_OC_8 in
    INTERFACE l_ainterface_OC_PipeOut_OC_10 out
    FIELD INTEGER_32 element
    FIELD INTEGER_1 full
    METHOD in$enq__ENA ( INTEGER_32 v ) if (((full) ^ (1))) {
        STORE :element = in$enq$v
        STORE :full = 1
    }
    METHOD out$deq__ENA if ((full)) {
        STORE :full = 0
    }
    METHOD out$first INTEGER_32 = ((element)) if ((full))
}
MODULE Fifo1Base$__PARAM__$width$999999 {
    INTERFACE l_ainterface_OC_PipeIn_OC_0 in
    INTERFACE l_ainterface_OC_PipeOut out
    FIELD INTEGER_999999 element
    FIELD INTEGER_1 full
    METHOD in$enq__ENA ( INTEGER_999999 v ) if (((full) ^ (1))) {
        STORE :element = in$enq$v
        STORE :full = 1
    }
    METHOD out$deq__ENA if ((full)) {
        STORE :full = 0
    }
    METHOD out$first INTEGER_999999 = ((element)) if ((full))
}
MODULE Fifo1_OC_11 {
    INTERFACE l_ainterface_OC_PipeIn_OC_6 in
    INTERFACE l_ainterface_OC_PipeOut_OC_7 out
    FIELD Fifo1Base$__PARAM__$width$32 fifo
    METHOD in$enq__ENA ( INTEGER_32 v ) {
        CALL/Action :fifo$in$enq__ENA{in$enq$v}
    }
    METHOD out$deq__ENA {
        CALL/Action :fifo$out$deq__ENA{}
    }
    METHOD out$first INTEGER_32 = ((fifo$out$first)) {
        CALL :fifo$out$first{}
    }
}
MODULE MuxPipe {
    INTERFACE l_ainterface_OC_PipeIn in
    INTERFACE l_ainterface_OC_PipeIn forward
    INTERFACE/Ptr l_ainterface_OC_PipeIn out
    FIELD Fifo1 forwardFifo
    METHOD/Rule RULEfifoRule__ENA {
        ALLOCA l_struct_OC_NOCData RULEfifoRule__ENA$agg_2e_tmp
        CALL :forwardFifo$out$first{}
        LET l_struct_OC_NOCData :RULEfifoRule__ENA$agg_2e_tmp = forwardFifo$out$first
        CALL/Action :out$enq__ENA{RULEfifoRule__ENA$agg_2e_tmp}
        CALL/Action :forwardFifo$out$deq__ENA{}
    }
    METHOD forward$enq__ENA ( l_struct_OC_NOCData v ) {
        CALL/Action :forwardFifo$in$enq__ENA{forward$enq$v}
    }
    METHOD in$enq__ENA ( l_struct_OC_NOCData v ) {
        CALL/Action :out$enq__ENA{in$enq$v}
    }
}
