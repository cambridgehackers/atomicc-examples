EMODULE l_struct_OC_NOCData {
    FIELD/Count 4  INTEGER_32 data
}
EMODULE l_class_OC_EchoTest {
    FIELD Echo echo
    FIELD INTEGER_32 x
}
EMODULE l_ainterface_OC_EchoIndication {
    METHOD heard__ENA ( INTEGER_32 v )
}
EMODULE l_ainterface_OC_EchoRequest {
    METHOD say__ENA ( INTEGER_32 v )
}
EMODULE l_ainterface_OC_PipeIn {
    METHOD enq__ENA ( l_struct_OC_NOCData v )
}
EMODULE l_ainterface_OC_PipeInH {
    METHOD enq__ENA ( l_struct_OC_NOCData v , INTEGER_16 length )
}
EMODULE l_ainterface_OC_PipeIn_OC_0 {
    METHOD enq__ENA ( INTEGER_32 v )
}
EMODULE l_ainterface_OC_PipeIn_OC_1 {
    METHOD enq__ENA ( INTEGER_32 v )
}
EMODULE l_ainterface_OC_PipeOut {
    METHOD deq__ENA
    METHOD first INTEGER_32
}
EMODULE l_ainterface_OC_PipeOut_OC_2 {
    METHOD deq__ENA
    METHOD first INTEGER_32
}
EMODULE EchoInd {
    INTERFACE l_ainterface_OC_EchoIndication hout
}
EMODULE Fifo {
    INTERFACE l_ainterface_OC_PipeIn_OC_0 in
    INTERFACE l_ainterface_OC_PipeOut out
}
EMODULE Fifo1Base$__PARAM__$width$32 {
    INTERFACE l_ainterface_OC_PipeIn_OC_1 in
    INTERFACE l_ainterface_OC_PipeOut_OC_2 out
}
EMODULE Fifo_OC_3 {
    INTERFACE l_ainterface_OC_PipeIn_OC_1 in
    INTERFACE l_ainterface_OC_PipeOut_OC_2 out
}
EMODULE MuxPipe {
    INTERFACE l_ainterface_OC_PipeInH in
    INTERFACE l_ainterface_OC_PipeInH forward
    INTERFACE/Ptr l_ainterface_OC_PipeInH out
}
MODULE Echo {
    INTERFACE l_ainterface_OC_EchoRequest sout
    INTERFACE/Ptr l_ainterface_OC_EchoIndication ind
    FIELD Fifo1 fifo
    METHOD/Rule RULE$respond_rule__ENA {
        CALL/Action :fifo$out$deq__ENA{}
        CALL :fifo$out$first{}
        CALL/Action :ind$heard__ENA{fifo$out$first}
    }
    METHOD sout$say__ENA ( INTEGER_32 v ) {
        CALL/Action :fifo$in$enq__ENA{sout$say$v}
    }
}
MODULE Fifo1 {
    INTERFACE l_ainterface_OC_PipeIn_OC_0 in
    INTERFACE l_ainterface_OC_PipeOut out
    FIELD Fifo1Base$__PARAM__$width$32 fifo
    METHOD in$enq__ENA ( INTEGER_32 v ) {
        CALL/Action :fifo$in$enq__ENA{in$enq$v}
    }
    METHOD out$deq__ENA {
        CALL/Action :fifo$out$deq__ENA{}
    }
    METHOD out$first INTEGER_32 = ((fifo$out$first)) {
        CALL :fifo$out$first{}
    }
}
