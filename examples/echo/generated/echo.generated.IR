EMODULE l_struct_OC_NOCData {
    FIELD/Count 4  INTEGER_32 data
}
EMODULE l_class_OC_EchoTest {
    FIELD l_module_OC_Echo echo
    FIELD INTEGER_32 x
}
EMODULE l_ainterface_OC_EchoIndication {
    METHOD heard__ENA ( INTEGER_32 v )
}
EMODULE l_ainterface_OC_EchoRequest {
    METHOD say__ENA ( INTEGER_32 v )
}
EMODULE l_ainterface_OC_PipeIn {
    METHOD enq__ENA ( l_struct_OC_NOCData v )
}
EMODULE l_ainterface_OC_PipeIn_OC_0 {
    METHOD enq__ENA ( INTEGER_32 v )
}
EMODULE l_ainterface_OC_PipeOut {
    METHOD deq__ENA
    METHOD first INTEGER_32
}
EMODULE l_module_OC_EchoInd {
    INTERFACE l_ainterface_OC_EchoIndication hout
}
EMODULE l_module_OC_Fifo {
    INTERFACE l_ainterface_OC_PipeIn_OC_0 in
    INTERFACE l_ainterface_OC_PipeOut out
}
EMODULE l_module_OC_MuxPipe {
    INTERFACE l_ainterface_OC_PipeIn in
    INTERFACE l_ainterface_OC_PipeIn forward
    INTERFACE/Ptr l_ainterface_OC_PipeIn out
    METHOD forward$enq__ENA ( l_struct_OC_NOCData v ) {
        CALL/Action :out$enq__ENA{forward$enq$v}
    }
    METHOD in$enq__ENA ( l_struct_OC_NOCData v ) {
        CALL/Action :out$enq__ENA{in$enq$v}
    }
}
MODULE l_module_OC_Echo {
    INTERFACE l_ainterface_OC_EchoRequest sout
    INTERFACE/Ptr l_ainterface_OC_EchoIndication ind
    FIELD l_module_OC_Fifo1 fifo
    METHOD/Rule respond_rule__ENA if ((1)) {
        CALL/Action :fifo$out$deq__ENA{}
        CALL :fifo$out$first{}
        CALL/Action :ind$heard__ENA{fifo$out$first}
    }
    METHOD sout$say__ENA ( INTEGER_32 v ) {
        CALL/Action :fifo$in$enq__ENA{sout$say$v}
    }
}
MODULE l_module_OC_Fifo1 {
    INTERFACE l_ainterface_OC_PipeIn_OC_0 in
    INTERFACE l_ainterface_OC_PipeOut out
    FIELD INTEGER_32 element
    FIELD INTEGER_1 full
    METHOD in$enq__ENA ( INTEGER_32 v ) if (((full) ^ (1))) {
        STORE :element = in$enq$v
        STORE :full = 1
    }
    METHOD out$deq__ENA if ((full)) {
        STORE :full = 0
    }
    METHOD out$first INTEGER_32 = ((element)) if ((full))
}
