STRUCT NOCDataH  {
    FIELD Bit(16) length
    FIELD Bit(128) data
}
INTERFACE EchoIfc  {
    SOFTWARE sout
    SOFTWARE ind
    INTERFACE EchoRequest sout
    INTERFACE/Ptr EchoIndication ind
}
INTERFACE EchoIndication  {
    METHOD/Action heard__ENA ( Bit(32) v )
}
INTERFACE EchoRequest  {
    METHOD/Action say__ENA ( Bit(32) v )
}
INTERFACE Fifo  {
    INTERFACE PipeIn_OC_2 in
    INTERFACE PipeOut out
}
INTERFACE Fifo_OC_3  {
    INTERFACE PipeIn_OC_4 in
    INTERFACE PipeOut_OC_5 out
}
INTERFACE FunnelBaseIfc(funnelWidth=99,width=32)  {
    INTERFACE/Count funnelWidth  PipeIn_OC_0 in
    INTERFACE/Ptr PipeIn_OC_1 out
}
INTERFACE MuxPipeIfc  {
    INTERFACE PipeIn in
    INTERFACE PipeIn forward
    INTERFACE/Ptr PipeIn out
}
INTERFACE PipeIn  {
    METHOD/Action enq__ENA ( NOCDataH v )
}
INTERFACE PipeIn_OC_0  {
    METHOD/Action enq__ENA ( Bit(32) v )
}
INTERFACE PipeIn_OC_1  {
    METHOD/Action enq__ENA ( Bit(32) v )
}
INTERFACE PipeIn_OC_2  {
    METHOD/Action enq__ENA ( Bit(32) v )
}
INTERFACE PipeIn_OC_4  {
    METHOD/Action enq__ENA ( Bit(32) v )
}
INTERFACE PipeOut  {
    METHOD/Action deq__ENA
    METHOD first Bit(32)
}
INTERFACE PipeOut_OC_5  {
    METHOD/Action deq__ENA
    METHOD first Bit(32)
}
INTERFACE l_topIfc  {
    INTERFACE PipeIn request
    INTERFACE/Ptr PipeIn indication
}
EMODULE Fifo1Base(width=32) Fifo {
}
EMODULE FunnelBufferedBase(funnelWidth=99,width=32) FunnelBaseIfc(funnelWidth=99,width=32) {
}
EMODULE MuxPipe MuxPipeIfc {
}
EMODULE l_top l_topIfc {
}
MODULE Echo EchoIfc {
    FIELD Fifo1 fifo
    METHOD/Action sout$say__ENA ( Bit(32) v ) {
        CALL/Action :fifo$in$enq__ENA{sout$say$v}
    }
    METHOD/Rule/Action RULE$respond_rule__ENA {
        CALL/Action :fifo$out$deq__ENA{}
        CALL :fifo$out$first{}
        CALL/Action :ind$heard__ENA{fifo$out$first}
    }
}
MODULE Fifo1 Fifo_OC_3 {
    FIELD Fifo1Base(width=32) fifo
    METHOD/Action in$enq__ENA ( Bit(32) v ) {
        CALL/Action :fifo$in$enq__ENA{in$enq$v}
    }
    METHOD/Action out$deq__ENA {
        CALL/Action :fifo$out$deq__ENA{}
    }
    METHOD out$first Bit(32) = ((fifo$out$first)) {
        CALL :fifo$out$first{}
    }
}
