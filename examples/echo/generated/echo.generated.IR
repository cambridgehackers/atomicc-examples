STRUCT NOCData {
    FIELD Bit(128) data
}
STRUCT EchoTest {
    FIELD Echo echo
    FIELD Bit(32) x
}
INTERFACE EchoIndication {
    METHOD/Action heard__ENA ( Bit(32) v )
}
INTERFACE EchoRequest {
    METHOD/Action say__ENA ( Bit(32) v )
}
INTERFACE PipeIn {
    METHOD/Action enq__ENA ( Bit(32) v )
}
INTERFACE PipeIn.1 {
    METHOD/Action enq__ENA ( Bit(32) v )
}
INTERFACE PipeInH {
    METHOD/Action enq__ENA ( NOCData v , Bit(16) length )
}
INTERFACE PipeOut {
    METHOD/Action deq__ENA
    METHOD first Bit(32)
}
INTERFACE PipeOut.2 {
    METHOD/Action deq__ENA
    METHOD first Bit(32)
}
EMODULE EchoInd {
    INTERFACE EchoIndication hout
}
EMODULE Fifo {
    INTERFACE PipeIn in
    INTERFACE PipeOut out
}
EMODULE Fifo.0 {
    INTERFACE PipeIn.1 in
    INTERFACE PipeOut.2 out
}
EMODULE Fifo1Base(width=32) {
    INTERFACE PipeIn.1 in
    INTERFACE PipeOut.2 out
}
EMODULE MuxPipe {
    INTERFACE PipeInH in
    INTERFACE PipeInH forward
    INTERFACE/Ptr PipeInH out
}
MODULE Echo {
    INTERFACE EchoRequest sout
    INTERFACE/Ptr EchoIndication ind
    FIELD Fifo1 fifo
    METHOD/Rule/Action RULE$respond_rule__ENA {
        CALL/Action :fifo$out$deq__ENA{}
        CALL :fifo$out$first{}
        CALL/Action :ind$heard__ENA{fifo$out$first}
    }
    METHOD/Action sout$say__ENA ( Bit(32) v ) {
        CALL/Action :fifo$in$enq__ENA{sout$say$v}
    }
}
MODULE Fifo1 {
    INTERFACE PipeIn in
    INTERFACE PipeOut out
    FIELD Fifo1Base(width=32) fifo
    METHOD/Action in$enq__ENA ( Bit(32) v ) {
        CALL/Action :fifo$in$enq__ENA{in$enq$v}
    }
    METHOD/Action out$deq__ENA {
        CALL/Action :fifo$out$deq__ENA{}
    }
    METHOD out$first Bit(32) = ((fifo$out$first)) {
        CALL :fifo$out$first{}
    }
}
