
#pragma GCC system_header
#include <bits/c++config.h>
#include <new>
#include <tuple>

namespace std {
template<typename T>
   struct zzremove_reference { typedef T     type; };
template <class T>
   typename zzremove_reference<T>::type&
   zzmove(T& a)
   {
       return a;
   }

  template<typename _Signature> class function;
  template<typename _Signature, typename _Functor> class _Function_handler;
  template<typename _Res, typename _Functor, typename... _ArgTypes>
    class _Function_handler<_Res(_ArgTypes...), _Functor> {
    public:
        static _Res _M_invoke(void * __functor, _ArgTypes... __args) {
          return (*(_Functor *)__functor)( std::forward<_ArgTypes>(__args)...);
        }
    };
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)> {
    public:
      typedef _Res (*MFUN)(_ArgTypes...);
      template<typename _Functor> function(_Functor __f);
      _Res (*_M_invoker)(void *, _ArgTypes...);
      MFUN func2;
    };
  template<typename _Res, typename... _ArgTypes> template<typename _Functor> function<_Res(_ArgTypes...)>::
      function(_Functor __f) {
        _M_invoker = &_Function_handler<_Res(_ArgTypes...), _Functor>::_M_invoke;
        // uses 'placement new'
        new ((void *)func2) _Functor(zzmove(__f));
      }
} // namespace std
