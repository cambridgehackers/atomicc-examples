EMODULE l_struct_OC_EchoIndication_data {
    FIELD Bit(32) tag
    FIELD l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoIndication_union data
}
EMODULE l_struct_OC_EchoRequest_data {
    FIELD Bit(32) tag
    FIELD l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoRequest_union data
}
EMODULE l_struct_OC_NOCData {
    FIELD Bit(128) data
}
EMODULE l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoIndication_union {
    FIELD l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoIndication_union_KD__KD_EchoIndication_heard heard
}
EMODULE l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoIndication_union_KD__KD_EchoIndication_heard {
    FIELD Bit(32) meth
    FIELD Bit(32) v
}
EMODULE l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoRequest_union {
    FIELD l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoRequest_union_KD__KD_EchoRequest_say say
    FIELD l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoRequest_union_KD__KD_EchoRequest_say2 say2
}
EMODULE l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoRequest_union_KD__KD_EchoRequest_say {
    FIELD Bit(32) meth
    FIELD Bit(32) v
}
EMODULE l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoRequest_union_KD__KD_EchoRequest_say2 {
    FIELD Bit(32) meth
    FIELD Bit(32) v
    FIELD Bit(32) v2
}
INTERFACE l_ainterface_OC_EchoIndication {
    METHOD/Action heard__ENA ( Bit(32) meth , Bit(32) v )
}
INTERFACE l_ainterface_OC_EchoRequest {
    METHOD/Action say2__ENA ( Bit(32) meth , Bit(32) v )
    METHOD/Action say__ENA ( Bit(32) meth , Bit(32) v )
}
INTERFACE l_ainterface_OC_PipeIn {
    METHOD/Action enq__ENA ( l_struct_OC_EchoRequest_data v )
}
INTERFACE l_ainterface_OC_PipeInH {
    METHOD/Action enq__ENA ( l_struct_OC_NOCData v , Bit(16) length )
}
INTERFACE l_ainterface_OC_PipeIn_OC_0 {
    METHOD/Action enq__ENA ( l_struct_OC_EchoIndication_data v )
}
INTERFACE l_ainterface_OC_Swap {
    METHOD/Action x2y__ENA
    METHOD/Action y2x__ENA
    METHOD/Action y2xnull__ENA
}
EMODULE MuxPipe {
    INTERFACE l_ainterface_OC_PipeInH in
    INTERFACE l_ainterface_OC_PipeInH forward
    INTERFACE/Ptr l_ainterface_OC_PipeInH out
}
MODULE Connect {
    INTERFACECONNECT lERI$request lEcho$request l_ainterface_OC_EchoRequest
    INTERFACECONNECT lEIO$pipe lEII_test$pipe l_ainterface_OC_PipeIn_OC_0
    INTERFACECONNECT lEcho$indication lEIO$indication l_ainterface_OC_EchoIndication
    INTERFACECONNECT lERO_test$pipe lERI$pipe l_ainterface_OC_PipeIn
    INTERFACECONNECT/Forward indication lEII_test$indication l_ainterface_OC_EchoIndication
    INTERFACE l_ainterface_OC_EchoRequest request
    FIELD EchoIndicationOutput lEIO
    FIELD EchoRequestInput lERI
    FIELD Echo lEcho
    FIELD EchoRequestOutput lERO_test
    FIELD EchoIndicationInput lEII_test
    INTERFACE/Ptr l_ainterface_OC_EchoIndication indication
    METHOD/Rule/Action RULE$swap2_rule__ENA {
        PRINTF :printf{"swap2_rule:Connect\n"}
        CALL/Action :lEcho$swap$y2xnull__ENA{}
    }
    METHOD/Rule/Action RULE$swap_rule__ENA {
        PRINTF :printf{"swap_rule:Connect\n"}
        CALL/Action :lEcho$swap$x2y__ENA{}
        CALL/Action :lEcho$swap$y2x__ENA{}
    }
    METHOD/Action request$say2__ENA ( Bit(32) meth , Bit(32) v ) {
        CALL/Action :lERO_test$request$say2__ENA{request$say2$meth,request$say2$v}
    }
    METHOD/Action request$say__ENA ( Bit(32) meth , Bit(32) v ) {
        CALL/Action :lERO_test$request$say__ENA{request$say$meth,request$say$v}
    }
}
MODULE Echo {
    INTERFACE l_ainterface_OC_EchoRequest request
    INTERFACE l_ainterface_OC_Swap swap
    FIELD Bit(1) busy
    FIELD Bit(32) meth_temp
    FIELD Bit(32) v_temp
    FIELD Bit(1) busy_delay
    FIELD Bit(32) meth_delay
    FIELD Bit(32) v_delay
    FIELD Bit(32) x
    FIELD Bit(32) y
    INTERFACE/Ptr l_ainterface_OC_EchoIndication indication
    METHOD/Rule/Action RULE$delay_rule__ENA if (((((busy) != (0)) & ((busy_delay) == (0))) != (0))) {
        PRINTF :printf{"delay_rule: Echo\n"}
        STORE :busy = 0
        STORE :busy_delay = 1
        STORE :meth_delay = meth_temp
        STORE :v_delay = v_temp
    }
    METHOD/Rule/Action RULE$respond_rule__ENA if (((busy_delay) != (0))) {
        PRINTF :printf{"respond_rule: Echo\n"}
        STORE :busy_delay = 0
        CALL/Action :indication$heard__ENA{meth_delay,v_delay}
    }
    METHOD/Action request$say2__ENA ( Bit(32) meth , Bit(32) v ) if (((busy) ^ (1))) {
        PRINTF :printf{"[%s:%d]Echo\n","request$say2",194}
        STORE :meth_temp = request$say2$meth
        STORE :v_temp = request$say2$v
        STORE :busy = 1
    }
    METHOD/Action request$say__ENA ( Bit(32) meth , Bit(32) v ) if (((busy) ^ (1))) {
        PRINTF :printf{"[%s:%d]Echo\n","request$say",188}
        STORE :meth_temp = request$say$meth
        STORE :v_temp = request$say$v
        STORE :busy = 1
    }
    METHOD/Action swap$x2y__ENA {
        PRINTF :printf{"[%s:%d]Echo\n","swap$x2y",208}
        STORE :y = x
    }
    METHOD/Action swap$y2x__ENA {
        PRINTF :printf{"[%s:%d]Echo\n","swap$y2x",200}
        STORE :x = y
    }
    METHOD/Action swap$y2xnull__ENA {
        PRINTF :printf{"[%s:%d]Echo\n","swap$y2xnull",204}
    }
}
MODULE EchoIndicationInput {
    INTERFACE l_ainterface_OC_PipeIn_OC_0 pipe
    INTERFACE/Ptr l_ainterface_OC_EchoIndication indication
    FIELD Bit(1) busy_delay
    FIELD Bit(32) meth_delay
    FIELD Bit(32) v_delay
    METHOD/Rule/Action RULE$input_rule__ENA if (((busy_delay) != (0))) {
        PRINTF :printf{"input_rule: EchoIndicationInput\n"}
        STORE :busy_delay = 0
        CALL/Action :indication$heard__ENA{meth_delay,v_delay}
    }
    METHOD/Action pipe$enq__ENA ( l_struct_OC_EchoIndication_data v ) if (((busy_delay) ^ (1))) {
        ALLOCA l_struct_OC_EchoIndication_data pipe$enq__ENA$v
        LET l_struct_OC_EchoIndication_data :pipe$enq__ENA$v = pipe$enq$v
        PRINTF :printf{"%s: EchoIndicationInput tag %d\n","pipe$enq",pipe$enq__ENA$v$tag}
        STORE ((pipe$enq__ENA$v$tag) == 1):meth_delay = pipe$enq__ENA$v$data$heard$meth
        STORE ((pipe$enq__ENA$v$tag) == 1):v_delay = pipe$enq__ENA$v$data$heard$v
        STORE ((pipe$enq__ENA$v$tag) == 1):busy_delay = 1
    }
}
MODULE EchoIndicationOutput {
    INTERFACE l_ainterface_OC_EchoIndication indication
    INTERFACE/Ptr l_ainterface_OC_PipeIn_OC_0 pipe
    FIELD l_struct_OC_EchoIndication_data ind0
    FIELD l_struct_OC_EchoIndication_data ind1
    FIELD Bit(1) ind_busy
    FIELD Bit(1) even
    METHOD/Rule/Action RULE$output_rulee__ENA if (((((ind_busy) != (0)) & ((even) != (0))) != (0))) {
        ALLOCA l_struct_OC_EchoIndication_data RULE$output_rulee__ENA$agg_2e_tmp
        STORE :ind_busy = 0
        LET l_struct_OC_EchoIndication_data :RULE$output_rulee__ENA$agg_2e_tmp = ind0
        CALL/Action :pipe$enq__ENA{RULE$output_rulee__ENA$agg_2e_tmp}
    }
    METHOD/Rule/Action RULE$output_ruleo__ENA if (((((ind_busy) != (0)) & ((even) == (0))) != (0))) {
        ALLOCA l_struct_OC_EchoIndication_data RULE$output_ruleo__ENA$agg_2e_tmp
        STORE :ind_busy = 0
        LET l_struct_OC_EchoIndication_data :RULE$output_ruleo__ENA$agg_2e_tmp = ind1
        CALL/Action :pipe$enq__ENA{RULE$output_ruleo__ENA$agg_2e_tmp}
    }
    METHOD/Action indication$heard__ENA ( Bit(32) meth , Bit(32) v ) if (((ind_busy) ^ (1))) {
        PRINTF :printf{"[%s:%d]EchoIndicationOutput even %d\n","indication$heard",116,even}
        STORE (even):ind1$tag = 1
        STORE (even):ind1$data$heard$meth = indication$heard$meth
        STORE (even):ind1$data$heard$v = indication$heard$v
        STORE ((even) ^ 1):ind0$tag = 1
        STORE ((even) ^ 1):ind0$data$heard$meth = indication$heard$meth
        STORE ((even) ^ 1):ind0$data$heard$v = indication$heard$v
        STORE :ind_busy = 1
        STORE :even = (even) ^ (1)
    }
}
MODULE EchoRequestInput {
    INTERFACE l_ainterface_OC_PipeIn pipe
    INTERFACE/Ptr l_ainterface_OC_EchoRequest request
    METHOD/Action pipe$enq__ENA ( l_struct_OC_EchoRequest_data v ) {
        ALLOCA l_struct_OC_EchoRequest_data pipe$enq__ENA$v
        LET l_struct_OC_EchoRequest_data :pipe$enq__ENA$v = pipe$enq$v
        PRINTF :printf{"entered EchoRequestInput::enq tag %d\n",pipe$enq__ENA$v$tag}
        CALL/Action ((pipe$enq__ENA$v$tag) == 1):request$say__ENA{pipe$enq__ENA$v$data$say$meth,pipe$enq__ENA$v$data$say$v}
        CALL/Action ((pipe$enq__ENA$v$tag) == 2):request$say2__ENA{pipe$enq__ENA$v$data$say2$meth,pipe$enq__ENA$v$data$say2$v}
    }
}
MODULE EchoRequestOutput {
    INTERFACE l_ainterface_OC_EchoRequest request
    INTERFACE/Ptr l_ainterface_OC_PipeIn pipe
    METHOD/Action request$say2__ENA ( Bit(32) meth , Bit(32) v ) {
        ALLOCA l_struct_OC_EchoRequest_data request$say2__ENA$ind
        PRINTF :printf{"entered EchoRequestOutput::say2\n"}
        LET Bit(32) :request$say2__ENA$ind$tag = 2
        STORE :request$say2__ENA$ind$data$say2$meth = request$say2$meth
        STORE :request$say2__ENA$ind$data$say2$v = request$say2$v
        CALL/Action :pipe$enq__ENA{request$say2__ENA$ind}
    }
    METHOD/Action request$say__ENA ( Bit(32) meth , Bit(32) v ) {
        ALLOCA l_struct_OC_EchoRequest_data request$say__ENA$ind
        PRINTF :printf{"entered EchoRequestOutput::say\n"}
        LET Bit(32) :request$say__ENA$ind$tag = 1
        STORE :request$say__ENA$ind$data$say$meth = request$say$meth
        STORE :request$say__ENA$ind$data$say$v = request$say$v
        CALL/Action :pipe$enq__ENA{request$say__ENA$ind}
    }
}
