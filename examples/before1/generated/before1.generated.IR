EMODULE l_struct_OC_EchoIndication_data {
    FIELD INTEGER_32 tag
    FIELD l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoIndication_union data
}
EMODULE l_struct_OC_EchoRequest_data {
    FIELD INTEGER_32 tag
    FIELD l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoRequest_union data
}
EMODULE l_struct_OC_NOCData {
    FIELD/Count 4  INTEGER_32 data
}
EMODULE l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoIndication_union {
    FIELD l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoIndication_union_KD__KD_EchoIndication_heard heard
}
EMODULE l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoIndication_union_KD__KD_EchoIndication_heard {
    FIELD INTEGER_32 meth
    FIELD INTEGER_32 v
}
EMODULE l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoRequest_union {
    FIELD l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoRequest_union_KD__KD_EchoRequest_say say
    FIELD l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoRequest_union_KD__KD_EchoRequest_say2 say2
}
EMODULE l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoRequest_union_KD__KD_EchoRequest_say {
    FIELD INTEGER_32 meth
    FIELD INTEGER_32 v
}
EMODULE l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoRequest_union_KD__KD_EchoRequest_say2 {
    FIELD INTEGER_32 meth
    FIELD INTEGER_32 v
    FIELD INTEGER_32 v2
}
EMODULE l_ainterface_OC_EchoIndication {
    METHOD heard__ENA ( INTEGER_32 meth , INTEGER_32 v )
}
EMODULE l_ainterface_OC_EchoRequest {
    METHOD say2__ENA ( INTEGER_32 meth , INTEGER_32 v )
    METHOD say__ENA ( INTEGER_32 meth , INTEGER_32 v )
}
EMODULE l_ainterface_OC_PipeIn {
    METHOD enq__ENA ( l_struct_OC_NOCData v )
}
EMODULE l_ainterface_OC_PipeIn_OC_0 {
    METHOD enq__ENA ( l_struct_OC_EchoRequest_data v )
}
EMODULE l_ainterface_OC_PipeIn_OC_1 {
    METHOD enq__ENA ( l_struct_OC_EchoIndication_data v )
}
EMODULE l_ainterface_OC_PipeOut {
    METHOD deq__ENA
    METHOD first l_struct_OC_NOCData
}
EMODULE l_ainterface_OC_Swap {
    METHOD x2y__ENA
    METHOD y2x__ENA
    METHOD y2xnull__ENA
}
EMODULE Fifo {
    INTERFACE l_ainterface_OC_PipeIn in
    INTERFACE l_ainterface_OC_PipeOut out
}
MODULE Connect {
    INTERFACECONNECT lERI$request lEcho$request l_ainterface_OC_EchoRequest
    INTERFACECONNECT lEIO$pipe lEII_test$pipe l_ainterface_OC_PipeIn_OC_1
    INTERFACECONNECT lEcho$indication lEIO$indication l_ainterface_OC_EchoIndication
    INTERFACECONNECT lERO_test$pipe lERI$pipe l_ainterface_OC_PipeIn_OC_0
    INTERFACECONNECT lEII_test$indication indication l_ainterface_OC_EchoIndication
    INTERFACE l_ainterface_OC_EchoRequest request
    INTERFACE/Ptr l_ainterface_OC_EchoIndication indication
    FIELD EchoIndicationOutput lEIO
    FIELD EchoRequestInput lERI
    FIELD Echo lEcho
    FIELD EchoRequestOutput lERO_test
    FIELD EchoIndicationInput lEII_test
    METHOD request$say2__ENA ( INTEGER_32 meth , INTEGER_32 v ) {
        CALL/Action :lERO_test$request$say2__ENA{request$say2$meth,request$say2$v}
    }
    METHOD request$say__ENA ( INTEGER_32 meth , INTEGER_32 v ) {
        CALL/Action :lERO_test$request$say__ENA{request$say$meth,request$say$v}
    }
    METHOD/Rule swap2_rule__ENA {
        PRINTF :printf{"swap2_rule:Connect\n"}
        CALL/Action :lEcho$swap$y2xnull__ENA{}
    }
    METHOD/Rule swap_rule__ENA {
        PRINTF :printf{"swap_rule:Connect\n"}
        CALL/Action :lEcho$swap$x2y__ENA{}
        CALL/Action :lEcho$swap$y2x__ENA{}
    }
}
MODULE Echo {
    INTERFACE l_ainterface_OC_EchoRequest request
    INTERFACE l_ainterface_OC_Swap swap
    FIELD INTEGER_1 busy
    FIELD INTEGER_32 meth_temp
    FIELD INTEGER_32 v_temp
    FIELD INTEGER_1 busy_delay
    FIELD INTEGER_32 meth_delay
    FIELD INTEGER_32 v_delay
    FIELD INTEGER_32 x
    FIELD INTEGER_32 y
    INTERFACE/Ptr l_ainterface_OC_EchoIndication indication
    METHOD/Rule delay_rule__ENA if (((((busy) != (0)) & ((busy_delay) == (0))) != (0))) {
        PRINTF :printf{"delay_rule: Echo\n"}
        STORE :busy = 0
        STORE :busy_delay = 1
        STORE :meth_delay = meth_temp
        STORE :v_delay = v_temp
    }
    METHOD request$say2__ENA ( INTEGER_32 meth , INTEGER_32 v ) if (((busy) ^ (1))) {
        PRINTF :printf{"[%s:%d]Echo\n","request$say2",192}
        STORE :meth_temp = request$say2$meth
        STORE :v_temp = request$say2$v
        STORE :busy = 1
    }
    METHOD request$say__ENA ( INTEGER_32 meth , INTEGER_32 v ) if (((busy) ^ (1))) {
        PRINTF :printf{"[%s:%d]Echo\n","request$say",186}
        STORE :meth_temp = request$say$meth
        STORE :v_temp = request$say$v
        STORE :busy = 1
    }
    METHOD/Rule respond_rule__ENA if (((busy_delay) != (0))) {
        PRINTF :printf{"respond_rule: Echo\n"}
        STORE :busy_delay = 0
        CALL/Action :indication$heard__ENA{meth_delay,v_delay}
    }
    METHOD swap$x2y__ENA {
        PRINTF :printf{"[%s:%d]Echo\n","swap$x2y",206}
        STORE :y = x
    }
    METHOD swap$y2x__ENA {
        PRINTF :printf{"[%s:%d]Echo\n","swap$y2x",198}
        STORE :x = y
    }
    METHOD swap$y2xnull__ENA {
        PRINTF :printf{"[%s:%d]Echo\n","swap$y2xnull",202}
    }
}
MODULE EchoIndicationInput {
    INTERFACE l_ainterface_OC_PipeIn_OC_1 pipe
    INTERFACE/Ptr l_ainterface_OC_EchoIndication indication
    FIELD INTEGER_1 busy_delay
    FIELD INTEGER_32 meth_delay
    FIELD INTEGER_32 v_delay
    METHOD/Rule input_rule__ENA if (((busy_delay) != (0))) {
        PRINTF :printf{"input_rule: EchoIndicationInput\n"}
        STORE :busy_delay = 0
        CALL/Action :indication$heard__ENA{meth_delay,v_delay}
    }
    METHOD pipe$enq__ENA ( l_struct_OC_EchoIndication_data v ) if (((busy_delay) ^ (1))) {
        ALLOCA l_struct_OC_EchoIndication_data pipe$enq__ENA$v_2e_addr
        LET l_struct_OC_EchoIndication_data :pipe$enq__ENA$v_2e_addr = pipe$enq$v
        PRINTF :printf{"%s: EchoIndicationInput tag %d\n","pipe$enq",pipe$enq__ENA$v_2e_addr$tag}
        STORE ((pipe$enq__ENA$v_2e_addr$tag) == 1):meth_delay = pipe$enq__ENA$v_2e_addr$data$heard$meth
        STORE ((pipe$enq__ENA$v_2e_addr$tag) == 1):v_delay = pipe$enq__ENA$v_2e_addr$data$heard$v
        STORE ((pipe$enq__ENA$v_2e_addr$tag) == 1):busy_delay = 1
    }
}
MODULE EchoIndicationOutput {
    INTERFACE l_ainterface_OC_EchoIndication indication
    INTERFACE/Ptr l_ainterface_OC_PipeIn_OC_1 pipe
    FIELD l_struct_OC_EchoIndication_data ind0
    FIELD l_struct_OC_EchoIndication_data ind1
    FIELD INTEGER_1 ind_busy
    FIELD INTEGER_1 even
    METHOD indication$heard__ENA ( INTEGER_32 meth , INTEGER_32 v ) if (((ind_busy) ^ (1))) {
        PRINTF :printf{"[%s:%d]EchoIndicationOutput even %d\n","indication$heard",114,even}
        STORE (even):ind1$tag = 1
        STORE (even):ind1$data$heard$meth = indication$heard$meth
        STORE (even):ind1$data$heard$v = indication$heard$v
        STORE ((even) ^ 1):ind0$tag = 1
        STORE ((even) ^ 1):ind0$data$heard$meth = indication$heard$meth
        STORE ((even) ^ 1):ind0$data$heard$v = indication$heard$v
        STORE :ind_busy = 1
        STORE :even = (even) ^ (1)
    }
    METHOD/Rule output_rulee__ENA if (((((ind_busy) != (0)) & ((even) != (0))) != (0))) {
        STORE :ind_busy = 0
        CALL/Action :pipe$enq__ENA{ind0}
    }
    METHOD/Rule output_ruleo__ENA if (((((ind_busy) != (0)) & ((even) == (0))) != (0))) {
        STORE :ind_busy = 0
        CALL/Action :pipe$enq__ENA{ind1}
    }
}
MODULE EchoRequestInput {
    INTERFACE l_ainterface_OC_PipeIn_OC_0 pipe
    INTERFACE/Ptr l_ainterface_OC_EchoRequest request
    METHOD pipe$enq__ENA ( l_struct_OC_EchoRequest_data v ) {
        ALLOCA l_struct_OC_EchoRequest_data pipe$enq__ENA$v_2e_addr
        LET l_struct_OC_EchoRequest_data :pipe$enq__ENA$v_2e_addr = pipe$enq$v
        PRINTF :printf{"entered EchoRequestInput::enq tag %d\n",pipe$enq__ENA$v_2e_addr$tag}
        CALL/Action ((pipe$enq__ENA$v_2e_addr$tag) == 1):request$say__ENA{pipe$enq__ENA$v_2e_addr$data$say$meth,pipe$enq__ENA$v_2e_addr$data$say$v}
        CALL/Action ((pipe$enq__ENA$v_2e_addr$tag) == 2):request$say2__ENA{pipe$enq__ENA$v_2e_addr$data$say2$meth,pipe$enq__ENA$v_2e_addr$data$say2$v}
    }
}
MODULE EchoRequestOutput {
    INTERFACE l_ainterface_OC_EchoRequest request
    INTERFACE/Ptr l_ainterface_OC_PipeIn_OC_0 pipe
    METHOD request$say2__ENA ( INTEGER_32 meth , INTEGER_32 v ) {
        ALLOCA l_struct_OC_EchoRequest_data request$say2__ENA$ind
        PRINTF :printf{"entered EchoRequestOutput::say2\n"}
        LET INTEGER_32 :request$say2__ENA$ind$tag = 2
        STORE :request$say2__ENA$ind$data$say2$meth = request$say2$meth
        STORE :request$say2__ENA$ind$data$say2$v = request$say2$v
        CALL/Action :pipe$enq__ENA{request$say2__ENA$ind}
    }
    METHOD request$say__ENA ( INTEGER_32 meth , INTEGER_32 v ) {
        ALLOCA l_struct_OC_EchoRequest_data request$say__ENA$ind
        PRINTF :printf{"entered EchoRequestOutput::say\n"}
        LET INTEGER_32 :request$say__ENA$ind$tag = 1
        STORE :request$say__ENA$ind$data$say$meth = request$say$meth
        STORE :request$say__ENA$ind$data$say$v = request$say$v
        CALL/Action :pipe$enq__ENA{request$say__ENA$ind}
    }
}
MODULE Fifo1 {
    INTERFACE l_ainterface_OC_PipeIn in
    INTERFACE l_ainterface_OC_PipeOut out
    FIELD l_struct_OC_NOCData element
    FIELD INTEGER_1 full
    METHOD in$enq__ENA ( l_struct_OC_NOCData v ) if (((full) ^ (1))) {
        STORE :element = in$enq$v
        STORE :full = 1
    }
    METHOD out$deq__ENA if ((full)) {
        STORE :full = 0
    }
    METHOD out$first l_struct_OC_NOCData = ((element)) if ((full))
}
MODULE MuxPipe {
    INTERFACE l_ainterface_OC_PipeIn in
    INTERFACE l_ainterface_OC_PipeIn forward
    INTERFACE/Ptr l_ainterface_OC_PipeIn out
    FIELD Fifo1 forwardFifo
    METHOD/Rule fifoRule__ENA {
        ALLOCA l_struct_OC_NOCData fifoRule__ENA$agg_2e_tmp
        CALL :forwardFifo$out$first{}
        LET l_struct_OC_NOCData :fifoRule__ENA$agg_2e_tmp = forwardFifo$out$first
        CALL/Action :out$enq__ENA{fifoRule__ENA$agg_2e_tmp}
        CALL/Action :forwardFifo$out$deq__ENA{}
    }
    METHOD forward$enq__ENA ( l_struct_OC_NOCData v ) {
        CALL/Action :forwardFifo$in$enq__ENA{forward$enq$v}
    }
    METHOD in$enq__ENA ( l_struct_OC_NOCData v ) {
        CALL/Action :out$enq__ENA{in$enq$v}
    }
}
