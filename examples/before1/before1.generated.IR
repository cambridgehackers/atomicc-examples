EMODULE l_ainterface_OC_EchoIndication (
    METHOD heard__ENA (
        PARAM heard$meth SIZE 32
        PARAM heard$v SIZE 32
    )
    METHOD heard__RDY SIZE 1
)
EMODULE l_ainterface_OC_EchoRequest (
    METHOD say2__ENA (
        PARAM say2$meth SIZE 32
        PARAM say2$v SIZE 32
    )
    METHOD say2__RDY SIZE 1
    METHOD say__ENA (
        PARAM say$meth SIZE 32
        PARAM say$v SIZE 32
    )
    METHOD say__RDY SIZE 1
)
EMODULE l_ainterface_OC_PipeIn (
    METHOD enq__ENA (
        PARAM enq$v SIZE 192
    )
    METHOD enq__RDY SIZE 1
)
EMODULE l_ainterface_OC_PipeIn_OC_0 (
    METHOD enq__ENA (
        PARAM enq$v SIZE 96
    )
    METHOD enq__RDY SIZE 1
)
EMODULE l_class_OC_foo (
    FIELD l_ainterface_OC_EchoIndication:indication
)
MODULE l_module_OC_Echo (
    FIELD l_ainterface_OC_EchoRequest:request
    FIELD busy SIZE 32
    FIELD meth_temp SIZE 32
    FIELD v_temp SIZE 32
    FIELD busy_delay SIZE 32
    FIELD meth_delay SIZE 32
    FIELD v_delay SIZE 32
    FIELD x SIZE 32
    FIELD y SIZE 32
    OUTCALL indication = l_ainterface_OC_EchoIndication
    FIELD/PTR  l_ainterface_OC_EchoIndication:indication
    METHOD/Rule delay_rule__ENA (
        STORE :busy = 0
        STORE :busy_delay = 1
        METAREAD meth_temp 
        STORE :meth_delay = meth_temp
        METAREAD v_temp 
        STORE :v_delay = v_temp
    )
    METHOD/Rule delay_rule__RDY SIZE 1 = (((busy != 0) & (busy_delay == 0)) != 0) (
        METAREAD busy 
        METAREAD busy_delay 
    )
    METHOD request$say2__ENA (
        PARAM request$say2$meth SIZE 32
        PARAM request$say2$v SIZE 32
        STORE :meth_temp = request$say2$meth
        STORE :v_temp = request$say2$v
        STORE :busy = 1
    )
    METHOD request$say2__RDY SIZE 1 = ((busy != 0) ^ 1) (
        METAREAD busy 
    )
    METHOD request$say__ENA (
        PARAM request$say$meth SIZE 32
        PARAM request$say$v SIZE 32
        STORE :meth_temp = request$say$meth
        STORE :v_temp = request$say$v
        STORE :busy = 1
    )
    METHOD request$say__RDY SIZE 1 = ((busy != 0) ^ 1) (
        METAREAD busy 
    )
    METHOD/Rule respond_rule__ENA (
        STORE :busy_delay = 0
        METAREAD meth_delay 
        METAREAD v_delay 
        METAINVOKE indication$heard__ENA 
        CALL/Action :indication$heard__ENA{indication$heard$meth;meth_delay,indication$heard$v;v_delay}
    )
    METHOD/Rule respond_rule__RDY SIZE 1 = ((busy_delay != 0) & indication$heard__RDY) (
        METAREAD busy_delay 
        METAINVOKE indication$heard__RDY 
    )
)
EMODULE l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoIndication_union_KD__KD_EchoIndication_heard (
    FIELD meth SIZE 32
    FIELD v SIZE 32
)
EMODULE l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoIndication_union (
    FIELD l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoIndication_union_KD__KD_EchoIndication_heard:heard SIZE 64
)
EMODULE l_struct_OC_EchoIndication_data (
    FIELD tag SIZE 32
    FIELD l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoIndication_union:data SIZE 64
)
MODULE l_module_OC_EchoIndicationInput (
    FIELD l_ainterface_OC_PipeIn_OC_0:pipe
    OUTCALL indication = l_ainterface_OC_EchoIndication
    FIELD/PTR  l_ainterface_OC_EchoIndication:indication
    FIELD busy_delay SIZE 32
    FIELD meth_delay SIZE 32
    FIELD v_delay SIZE 32
    METHOD/Rule input_rule__ENA (
        STORE :busy_delay = 0
        METAREAD meth_delay 
        METAREAD v_delay 
        METAINVOKE indication$heard__ENA 
        CALL/Action :indication$heard__ENA{indication$heard$meth;meth_delay,indication$heard$v;v_delay}
    )
    METHOD/Rule input_rule__RDY SIZE 1 = ((busy_delay != 0) & indication$heard__RDY) (
        METAREAD busy_delay 
        METAINVOKE indication$heard__RDY 
    )
    METHOD pipe$enq__ENA (
        PARAM pipe$enq$v SIZE 96
        STORE/Alloca :v_2e_addr = pipe$enq$v
        METAREAD v_2e_addr$data$heard$meth v_2e_addrfoosuff$tag == 1
        STORE (v_2e_addrfoosuff$tag == 1):meth_delay = v_2e_addr$data$heard$meth
        METAREAD v_2e_addr$data$heard$v v_2e_addrfoosuff$tag == 1
        STORE (v_2e_addrfoosuff$tag == 1):v_delay = v_2e_addr$data$heard$v
        STORE (v_2e_addrfoosuff$tag == 1):busy_delay = 1
    )
    METHOD pipe$enq__RDY SIZE 1 = ((busy_delay != 0) ^ 1) (
        METAREAD busy_delay 
    )
)
MODULE l_module_OC_EchoIndicationOutput (
    FIELD l_ainterface_OC_EchoIndication:indication
    OUTCALL pipe = l_ainterface_OC_PipeIn_OC_0
    FIELD/PTR  l_ainterface_OC_PipeIn_OC_0:pipe
    FIELD l_struct_OC_EchoIndication_data:ind0 SIZE 96
    FIELD l_struct_OC_EchoIndication_data:ind1 SIZE 96
    FIELD ind_busy SIZE 32
    FIELD even SIZE 32
    METHOD indication$heard__ENA (
        PARAM indication$heard$meth SIZE 32
        PARAM indication$heard$v SIZE 32
        METAREAD even 
        METAREAD even 
        STORE (even != 0):ind1$tag = 1
        STORE (even != 0):ind1$data$heard$meth = indication$heard$meth
        STORE (even != 0):ind1$data$heard$v = indication$heard$v
        STORE ((even != 0) ^ 1):ind0$tag = 1
        STORE ((even != 0) ^ 1):ind0$data$heard$meth = indication$heard$meth
        STORE ((even != 0) ^ 1):ind0$data$heard$v = indication$heard$v
        METAREAD even (even != 0) ^ 1
        STORE :ind_busy = 1
        METAREAD even 
        STORE :even = (even != 0) ^ 1
    )
    METHOD indication$heard__RDY SIZE 1 = ((ind_busy != 0) ^ 1) (
        METAREAD ind_busy 
    )
    METHOD/Rule output_rulee__ENA (
        STORE :ind_busy = 0
        METAREAD ind0 
        METAINVOKE pipe$enq__ENA 
        CALL/Action :pipe$enq__ENA{pipe$enq$v;ind0}
    )
    METHOD/Rule output_rulee__RDY SIZE 1 = ((((ind_busy != 0) & (even != 0)) != 0) & pipe$enq__RDY) (
        METAREAD ind_busy 
        METAREAD even 
        METAINVOKE pipe$enq__RDY 
    )
    METHOD/Rule output_ruleo__ENA (
        STORE :ind_busy = 0
        METAREAD ind1 
        METAINVOKE pipe$enq__ENA 
        CALL/Action :pipe$enq__ENA{pipe$enq$v;ind1}
    )
    METHOD/Rule output_ruleo__RDY SIZE 1 = ((((ind_busy != 0) & (even == 0)) != 0) & pipe$enq__RDY) (
        METAREAD ind_busy 
        METAREAD even 
        METAINVOKE pipe$enq__RDY 
    )
)
EMODULE l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoRequest_union_KD__KD_EchoRequest_say (
    FIELD meth SIZE 32
    FIELD v SIZE 32
)
EMODULE l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoRequest_union_KD__KD_EchoRequest_say2 (
    FIELD meth SIZE 32
    FIELD v SIZE 32
    FIELD v2 SIZE 32
)
EMODULE l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoRequest_union (
    FIELD l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoRequest_union_KD__KD_EchoRequest_say:say SIZE 64
    FIELD l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoRequest_union_KD__KD_EchoRequest_say2:say2 SIZE 96
)
EMODULE l_struct_OC_EchoRequest_data (
    FIELD tag SIZE 32
    FIELD l_struct_OC__IC_anonymous_AC_struct_JC__KD__KD_EchoRequest_union:data SIZE 160
)
MODULE l_module_OC_EchoRequestInput (
    FIELD l_ainterface_OC_PipeIn:pipe
    OUTCALL request = l_ainterface_OC_EchoRequest
    FIELD/PTR  l_ainterface_OC_EchoRequest:request
    METHOD pipe$enq__ENA (
        PARAM pipe$enq$v SIZE 192
        STORE/Alloca :v_2e_addr = pipe$enq$v
        METAREAD v_2e_addr$data$say$meth v_2e_addrfoosuff$tag == 1
        METAREAD v_2e_addr$data$say$v v_2e_addrfoosuff$tag == 1
        METAINVOKE request$say__ENA v_2e_addrfoosuff$tag == 1
        CALL/Action (v_2e_addrfoosuff$tag == 1):request$say__ENA{request$say$meth;v_2e_addr$data$say$meth,request$say$v;v_2e_addr$data$say$v}
        METAREAD v_2e_addr$data$say2$meth v_2e_addrfoosuff13$tag == 2
        METAREAD v_2e_addr$data$say2$v v_2e_addrfoosuff13$tag == 2
        METAINVOKE request$say2__ENA v_2e_addrfoosuff13$tag == 2
        CALL/Action (v_2e_addrfoosuff13$tag == 2):request$say2__ENA{request$say2$meth;v_2e_addr$data$say2$meth,request$say2$v;v_2e_addr$data$say2$v}
    )
    METHOD pipe$enq__RDY SIZE 1 = ((request$say__RDY | ((v_2e_addrfoosufffoosuff$tag == 1) ^ 1)) & (request$say2__RDY | ((v_2e_addrfoosuff13foosuff$tag == 2) ^ 1))) (
        METAINVOKE request$say__RDY 
        METAINVOKE request$say2__RDY 
    )
)
MODULE l_module_OC_EchoRequestOutput (
    FIELD l_ainterface_OC_EchoRequest:request
    OUTCALL pipe = l_ainterface_OC_PipeIn
    FIELD/PTR  l_ainterface_OC_PipeIn:pipe
    METHOD request$say2__ENA (
        PARAM request$say2$meth SIZE 32
        PARAM request$say2$v SIZE 32
        STORE/Alloca :ind$tag = 2
        STORE :ind$data$say2$meth = request$say2$meth
        STORE :ind$data$say2$v = request$say2$v
        METAINVOKE pipe$enq__ENA 
        CALL/Action :pipe$enq__ENA{pipe$enq$v;ind}
    )
    METHOD request$say2__RDY SIZE 1 = (pipe$enq__RDY) (
        METAINVOKE pipe$enq__RDY 
    )
    METHOD request$say__ENA (
        PARAM request$say$meth SIZE 32
        PARAM request$say$v SIZE 32
        STORE/Alloca :ind$tag = 1
        STORE :ind$data$say$meth = request$say$meth
        STORE :ind$data$say$v = request$say$v
        METAINVOKE pipe$enq__ENA 
        CALL/Action :pipe$enq__ENA{pipe$enq$v;ind}
    )
    METHOD request$say__RDY SIZE 1 = (pipe$enq__RDY) (
        METAINVOKE pipe$enq__RDY 
    )
)
MODULE l_module_OC_Connect (
    INTERFACECONNECT lERI$request lEcho$request l_ainterface_OC_EchoRequest
    INTERFACECONNECT lEIO$pipe lEII_test$pipe l_ainterface_OC_PipeIn_OC_0
    INTERFACECONNECT lEcho$indication lEIO$indication l_ainterface_OC_EchoIndication
    INTERFACECONNECT lERO_test$pipe lERI$pipe l_ainterface_OC_PipeIn
    INTERFACECONNECT lEII_test$indication indication l_ainterface_OC_EchoIndication
    FIELD l_module_OC_EchoIndicationOutput:lEIO SIZE 256
    FIELD l_module_OC_EchoRequestInput:lERI
    FIELD l_module_OC_Echo:lEcho SIZE 256
    FIELD l_module_OC_EchoRequestOutput:lERO_test
    FIELD l_module_OC_EchoIndicationInput:lEII_test SIZE 96
    METHOD/Rule swap2_rule__ENA (
        METAINVOKE lEcho$[ERROR__ZN4Echo7y2xnullEv_ERROR] 
        CALL/Action :lEcho$[ERROR__ZN4Echo7y2xnullEv_ERROR]{}
    )
    METHOD/Rule swap2_rule__RDY SIZE 1 = (1)
    METHOD/Rule swap_rule__ENA (
        METAINVOKE lEcho$[ERROR__ZN4Echo3x2yEv_ERROR] 
        CALL/Action :lEcho$[ERROR__ZN4Echo3x2yEv_ERROR]{}
        METAINVOKE lEcho$[ERROR__ZN4Echo3y2xEv_ERROR] 
        CALL/Action :lEcho$[ERROR__ZN4Echo3y2xEv_ERROR]{}
    )
    METHOD/Rule swap_rule__RDY SIZE 1 = (1)
)
