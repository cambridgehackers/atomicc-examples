EMODULE l_struct_OC_NOCData {
    FIELD/Count 4  INTEGER_32 data
}
EMODULE l_struct_OC_ValuePair {
    FIELD INTEGER_32 a
    FIELD INTEGER_32 b
    FIELD INTEGER_32 c
}
EMODULE l_ainterface_OC_LpmIndication {
    METHOD heard__ENA ( INTEGER_32 meth , INTEGER_32 v )
}
EMODULE l_ainterface_OC_LpmMem {
    METHOD req__ENA ( l_struct_OC_ValuePair v )
    METHOD resAccept__ENA
    METHOD resValue l_struct_OC_ValuePair
}
EMODULE l_ainterface_OC_LpmRequest {
    METHOD say__ENA ( INTEGER_32 meth , INTEGER_32 v )
}
EMODULE l_ainterface_OC_PipeIn {
    METHOD enq__ENA ( l_struct_OC_NOCData v )
}
EMODULE l_ainterface_OC_PipeIn_OC_0 {
    METHOD enq__ENA ( l_struct_OC_ValuePair v )
}
EMODULE l_ainterface_OC_PipeOut {
    METHOD deq__ENA
    METHOD first l_struct_OC_NOCData
}
EMODULE l_ainterface_OC_PipeOut_OC_1 {
    METHOD deq__ENA
    METHOD first l_struct_OC_ValuePair
}
EMODULE Fifo {
    INTERFACE l_ainterface_OC_PipeIn in
    INTERFACE l_ainterface_OC_PipeOut out
}
EMODULE Fifo_OC_3 {
    INTERFACE l_ainterface_OC_PipeIn_OC_0 in
    INTERFACE l_ainterface_OC_PipeOut_OC_1 out
}
MODULE Fifo1 {
    INTERFACE l_ainterface_OC_PipeIn in
    INTERFACE l_ainterface_OC_PipeOut out
    FIELD l_struct_OC_NOCData element
    FIELD INTEGER_1 full
    METHOD in$enq__ENA ( l_struct_OC_NOCData v ) {
        STORE :element = in$enq$v
        STORE :full = 1
    }
    METHOD out$deq__ENA {
        STORE :full = 0
    }
    METHOD out$first l_struct_OC_NOCData = ((element))
}
MODULE Fifo1_OC_2 {
    INTERFACE l_ainterface_OC_PipeIn_OC_0 in
    INTERFACE l_ainterface_OC_PipeOut_OC_1 out
    FIELD l_struct_OC_ValuePair element
    FIELD INTEGER_1 full
    METHOD in$enq__ENA ( l_struct_OC_ValuePair v ) if (((full) ^ (1))) {
        STORE :element = in$enq$v
        STORE :full = 1
    }
    METHOD out$deq__ENA if ((full)) {
        STORE :full = 0
    }
    METHOD out$first l_struct_OC_ValuePair = ((element)) if ((full))
}
MODULE Fifo2 {
    INTERFACE l_ainterface_OC_PipeIn_OC_0 in
    INTERFACE l_ainterface_OC_PipeOut_OC_1 out
    FIELD/Count 2  l_struct_OC_ValuePair element
    FIELD INTEGER_32 rindex
    FIELD INTEGER_32 windex
    METHOD in$enq__ENA ( l_struct_OC_ValuePair v ) if (((((windex) + (1)) % (2)) != (rindex))) {
        STORE :element[windex] = in$enq$v
        STORE :windex = ((windex) + (1)) % (2)
    }
    METHOD out$deq__ENA if (((rindex) != (windex))) {
        STORE :rindex = ((rindex) + (1)) % (2)
    }
    METHOD out$first l_struct_OC_ValuePair = ((element[rindex])) if (((rindex) != (windex)))
}
MODULE Lpm {
    PRIORITY recirc enter;exit
    FIELD Fifo1_OC_2 inQ
    FIELD Fifo2 fifo
    FIELD Fifo1_OC_2 outQ
    FIELD LpmMemory mem
    FIELD INTEGER_32 doneCount
    INTERFACE/Ptr l_ainterface_OC_LpmIndication ind
    INTERFACE l_ainterface_OC_LpmRequest request
    METHOD/Rule enter__ENA {
        ALLOCA l_struct_OC_ValuePair enter__ENA$temp
        CALL :inQ$out$first{}
        LET l_struct_OC_ValuePair :enter__ENA$temp = inQ$out$first
        PRINTF :printf{"enter: (%d, %d)\n",enter__ENA$temp$a,enter__ENA$temp$b}
        CALL/Action :inQ$out$deq__ENA{}
        CALL/Action :fifo$in$enq__ENA{enter__ENA$temp}
        CALL/Action :mem$ifc$req__ENA{enter__ENA$temp}
    }
    METHOD/Rule exit_rule__ENA {
        ALLOCA l_struct_OC_ValuePair exit_rule__ENA$mtemp
        ALLOCA l_struct_OC_ValuePair exit_rule__ENA$temp
        CALL :fifo$out$first{}
        LET l_struct_OC_ValuePair :exit_rule__ENA$temp = fifo$out$first
        CALL :mem$ifc$resValue{}
        LET l_struct_OC_ValuePair :exit_rule__ENA$mtemp = mem$ifc$resValue
        CALL/Action :mem$ifc$resAccept__ENA{}
        CALL/Action :fifo$out$deq__ENA{}
        PRINTF :printf{"exit: (%d, %d)\n",exit_rule__ENA$temp$a,exit_rule__ENA$temp$b}
        CALL/Action :outQ$in$enq__ENA{exit_rule__ENA$temp}
    }
    METHOD/Rule recirc__ENA {
        ALLOCA l_struct_OC_ValuePair recirc__ENA$mtemp
        ALLOCA l_struct_OC_ValuePair recirc__ENA$temp
        CALL :fifo$out$first{}
        LET l_struct_OC_ValuePair :recirc__ENA$temp = fifo$out$first
        CALL :mem$ifc$resValue{}
        LET l_struct_OC_ValuePair :recirc__ENA$mtemp = mem$ifc$resValue
        CALL/Action :mem$ifc$resAccept__ENA{}
        CALL/Action :fifo$out$deq__ENA{}
        PRINTF :printf{"recirc: (%d, %d)\n",recirc__ENA$temp$a,recirc__ENA$temp$b}
        CALL/Action :fifo$in$enq__ENA{recirc__ENA$mtemp}
        CALL/Action :mem$ifc$req__ENA{recirc__ENA$temp}
    }
    METHOD request$say__ENA ( INTEGER_32 meth , INTEGER_32 v ) {
        ALLOCA l_struct_OC_ValuePair request$say__ENA$temp
        PRINTF :printf{"[%s:%d] (%d, %d)\n","request$say",90,request$say$meth,request$say$v}
        LET INTEGER_32 :request$say__ENA$temp$a = request$say$meth
        LET INTEGER_32 :request$say__ENA$temp$b = request$say$v
        CALL/Action :inQ$in$enq__ENA{request$say__ENA$temp}
    }
    METHOD/Rule respond__ENA {
        ALLOCA l_struct_OC_ValuePair respond__ENA$temp
        CALL :outQ$out$first{}
        LET l_struct_OC_ValuePair :respond__ENA$temp = outQ$out$first
        CALL/Action :outQ$out$deq__ENA{}
        PRINTF :printf{"respond: (%d, %d)\n",respond__ENA$temp$a,respond__ENA$temp$b}
        CALL/Action :ind$heard__ENA{respond__ENA$temp$a,respond__ENA$temp$b}
    }
}
MODULE LpmMemory {
    FIELD INTEGER_32 delayCount
    FIELD l_struct_OC_ValuePair saved
    INTERFACE l_ainterface_OC_LpmMem ifc
    METHOD ifc$req__ENA ( l_struct_OC_ValuePair v ) if (((delayCount) == (0))) {
        STORE :delayCount = 4
        STORE :saved = ifc$req$v
    }
    METHOD ifc$resAccept__ENA if (((delayCount) == (1))) {
        STORE :delayCount = 0
    }
    METHOD ifc$resValue l_struct_OC_ValuePair = ((saved)) if (((delayCount) == (1)))
    METHOD/Rule memdelay_rule__ENA if (((delayCount) > (1))) {
        STORE :delayCount = (delayCount) - (1)
    }
}
MODULE MuxPipe {
    INTERFACE l_ainterface_OC_PipeIn in
    INTERFACE l_ainterface_OC_PipeIn forward
    INTERFACE/Ptr l_ainterface_OC_PipeIn out
    FIELD Fifo1 forwardFifo
    METHOD/Rule fifoRule__ENA {
        ALLOCA l_struct_OC_NOCData fifoRule__ENA$agg_2e_tmp
        CALL :forwardFifo$out$first{}
        LET l_struct_OC_NOCData :fifoRule__ENA$agg_2e_tmp = forwardFifo$out$first
        CALL/Action :out$enq__ENA{fifoRule__ENA$agg_2e_tmp}
        CALL/Action :forwardFifo$out$deq__ENA{}
    }
    METHOD forward$enq__ENA ( l_struct_OC_NOCData v ) {
        CALL/Action :forwardFifo$in$enq__ENA{forward$enq$v}
    }
    METHOD in$enq__ENA ( l_struct_OC_NOCData v ) {
        CALL/Action :out$enq__ENA{in$enq$v}
    }
}
