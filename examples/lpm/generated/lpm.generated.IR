EMODULE l_struct_OC_LookupItem {
    FIELD INTEGER_32 addr
    FIELD INTEGER_32 b
    FIELD INTEGER_32 c
}
EMODULE l_struct_OC_NOCData {
    FIELD INTEGER_128 data
}
EMODULE l_ainterface_OC_LpmMem {
    METHOD req__ENA ( l_struct_OC_LookupItem v )
    METHOD resAccept__ENA
    METHOD resValue l_struct_OC_LookupItem
}
EMODULE l_ainterface_OC_LpmRequest {
    METHOD enter__ENA ( INTEGER_32 addr )
}
EMODULE l_ainterface_OC_PipeIn {
    METHOD enq__ENA ( l_struct_OC_LookupItem v )
}
EMODULE l_ainterface_OC_PipeInH {
    METHOD enq__ENA ( l_struct_OC_NOCData v , INTEGER_16 length )
}
EMODULE l_ainterface_OC_PipeIn_OC_1 {
    METHOD enq__ENA ( INTEGER_96 v )
}
EMODULE l_ainterface_OC_PipeOut {
    METHOD deq__ENA
    METHOD first l_struct_OC_LookupItem
}
EMODULE l_ainterface_OC_PipeOut_OC_2 {
    METHOD deq__ENA
    METHOD first INTEGER_96
}
EMODULE Fifo {
    INTERFACE l_ainterface_OC_PipeIn in
    INTERFACE l_ainterface_OC_PipeOut out
}
EMODULE Fifo1Base$__PARAM__$width$96 {
    INTERFACE l_ainterface_OC_PipeIn_OC_1 in
    INTERFACE l_ainterface_OC_PipeOut_OC_2 out
}
EMODULE Fifo_OC_0 {
    INTERFACE l_ainterface_OC_PipeIn_OC_1 in
    INTERFACE l_ainterface_OC_PipeOut_OC_2 out
}
EMODULE LpmMemory {
    INTERFACE l_ainterface_OC_LpmMem ifc
}
EMODULE MuxPipe {
    INTERFACE l_ainterface_OC_PipeInH in
    INTERFACE l_ainterface_OC_PipeInH forward
    INTERFACE/Ptr l_ainterface_OC_PipeInH out
}
MODULE Fifo1 {
    INTERFACE l_ainterface_OC_PipeIn in
    INTERFACE l_ainterface_OC_PipeOut out
    FIELD Fifo1Base$__PARAM__$width$96 fifo
    METHOD in$enq__ENA ( l_struct_OC_LookupItem v ) {
        CALL/Action :fifo$in$enq__ENA{in$enq$v}
    }
    METHOD out$deq__ENA {
        CALL/Action :fifo$out$deq__ENA{}
    }
    METHOD out$first l_struct_OC_LookupItem = ((out$first$retval)) {
        ALLOCA l_struct_OC_LookupItem out$first$retval
        CALL :fifo$out$first{}
        LET INTEGER_96 :out$first$retval = fifo$out$first
    }
}
MODULE Lpm {
    PRIORITY recirc enter;exit
    INTERFACE l_ainterface_OC_LpmRequest request
    FIELD Fifo1 inQ
    FIELD Fifo1 fifo
    INTERFACE/Ptr l_ainterface_OC_PipeIn outQ
    FIELD LpmMemory mem
    METHOD/Rule RULE$enter__ENA {
        ALLOCA l_struct_OC_LookupItem RULE$enter__ENA$temp
        CALL :inQ$out$first{}
        LET l_struct_OC_LookupItem :RULE$enter__ENA$temp = inQ$out$first
        PRINTF :printf{"enter: (%d, %d)\n",RULE$enter__ENA$temp$addr,RULE$enter__ENA$temp$b}
        CALL/Action :inQ$out$deq__ENA{}
        CALL/Action :fifo$in$enq__ENA{RULE$enter__ENA$temp}
        CALL/Action :mem$ifc$req__ENA{RULE$enter__ENA$temp}
    }
    METHOD/Rule RULE$exit_rule__ENA {
        ALLOCA l_struct_OC_LookupItem RULE$exit_rule__ENA$mtemp
        ALLOCA l_struct_OC_LookupItem RULE$exit_rule__ENA$temp
        CALL :fifo$out$first{}
        LET l_struct_OC_LookupItem :RULE$exit_rule__ENA$temp = fifo$out$first
        CALL :mem$ifc$resValue{}
        LET l_struct_OC_LookupItem :RULE$exit_rule__ENA$mtemp = mem$ifc$resValue
        CALL/Action :mem$ifc$resAccept__ENA{}
        CALL/Action :fifo$out$deq__ENA{}
        PRINTF :printf{"exit: (%d, %d)\n",RULE$exit_rule__ENA$temp$addr,RULE$exit_rule__ENA$temp$b}
        CALL/Action :outQ$enq__ENA{RULE$exit_rule__ENA$temp}
    }
    METHOD/Rule RULE$recirc__ENA {
        ALLOCA l_struct_OC_LookupItem RULE$recirc__ENA$mtemp
        ALLOCA l_struct_OC_LookupItem RULE$recirc__ENA$temp
        CALL :fifo$out$first{}
        LET l_struct_OC_LookupItem :RULE$recirc__ENA$temp = fifo$out$first
        CALL :mem$ifc$resValue{}
        LET l_struct_OC_LookupItem :RULE$recirc__ENA$mtemp = mem$ifc$resValue
        CALL/Action :mem$ifc$resAccept__ENA{}
        CALL/Action :fifo$out$deq__ENA{}
        PRINTF :printf{"recirc: (%d, %d)\n",RULE$recirc__ENA$temp$addr,RULE$recirc__ENA$temp$b}
        CALL/Action :fifo$in$enq__ENA{RULE$recirc__ENA$mtemp}
        CALL/Action :mem$ifc$req__ENA{RULE$recirc__ENA$temp}
    }
    METHOD request$enter__ENA ( INTEGER_32 addr ) {
        ALLOCA l_struct_OC_LookupItem request$enter__ENA$temp
        LET INTEGER_32 :request$enter__ENA$temp$addr = request$enter$addr
        CALL/Action :inQ$in$enq__ENA{request$enter__ENA$temp}
    }
}
MODULE LpmMemory {
    INTERFACE l_ainterface_OC_LpmMem ifc
    FIELD INTEGER_32 delayCount
    FIELD l_struct_OC_LookupItem saved
    METHOD/Rule RULE$memdelay_rule__ENA if (((delayCount) > (1))) {
        STORE :delayCount = (delayCount) - (1)
    }
    METHOD ifc$req__ENA ( l_struct_OC_LookupItem v ) if (((delayCount) == (0))) {
        STORE :delayCount = 4
        STORE :saved = ifc$req$v
    }
    METHOD ifc$resAccept__ENA if (((delayCount) == (1))) {
        STORE :delayCount = 0
    }
    METHOD ifc$resValue l_struct_OC_LookupItem = ((ifc$resValue$retval)) if (((delayCount) == (1))) {
        ALLOCA l_struct_OC_LookupItem ifc$resValue$retval
        LET l_struct_OC_LookupItem :ifc$resValue$retval = saved
    }
}
