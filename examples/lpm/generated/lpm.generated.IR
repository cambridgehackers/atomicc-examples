STRUCT NOCDataH  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    FIELD Bit(16) length
    FIELD Bit(128) data
}
STRUCT ProcessData  {
    FILE lpm_OC_cpp
    FIELD Bit(4) ticket
    FIELD Bit(16) IPA
    FIELD Bit(3) state
}
INTERFACE AsyncControlIfc  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    FIELD/input Bit(1) CLK
    FIELD/input Bit(1) nRST
    FIELD/input Bit(1) start
    FIELD/input Bit(1) ack
    FIELD/input Bit(1) clear
    FIELD/output Bit(1) out
    FIELD/output Bit(1) done
}
INTERFACE BRAMIfc(width=32,depth=1024)  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_bram_OC_h
    METHOD/Action write__ENA ( Bit(__builtin_clog2((depth - 1))) addr , Bit(width) data )
    METHOD/Action read__ENA ( Bit(__builtin_clog2((depth - 1))) addr )
    METHOD dataOut Bit(width)
}
INTERFACE Fifo(width=23)  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_fifo_OC_h
    INTERFACE PipeIn(width=23) in
    INTERFACE PipeOut(width=23) out
}
INTERFACE Fifo(width=32)  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_fifo_OC_h
    INTERFACE PipeIn(width=32) in
    INTERFACE PipeOut(width=32) out
}
INTERFACE LpmIfc  {
    FILE lpm_OC_cpp
    INTERFACE/Ptr PipeIn(width=32) outQ
    METHOD/Action enter__ENA ( Bit(32) x )
    METHOD/Action write__ENA ( Bit(32) addr , Bit(32) data )
}
INTERFACE LpmIndication  {
    FILE lpm_OC_cpp
    METHOD/Action out__ENA ( Bit(32) data )
}
INTERFACE LpmMemIfc(depth=1024)  {
    FILE lpm_OC_cpp
    INTERFACE PipeOut(width=32) out
    METHOD/Action read__ENA ( Bit(__builtin_clog2((depth - 1))) addr )
    METHOD/Action write__ENA ( Bit(__builtin_clog2((depth - 1))) addr , Bit(32) data )
}
INTERFACE LpmRequest  {
    FILE lpm_OC_cpp
    METHOD/Action enter__ENA ( Bit(32) data )
    METHOD/Action write__ENA ( Bit(32) addr , Bit(32) data )
}
INTERFACE LpmTestIfc  {
    FILE lpm_OC_cpp
    SOFTWARE request
    SOFTWARE indication
    INTERFACE LpmRequest request
    INTERFACE/Ptr LpmIndication indication
}
INTERFACE PipeIn(width=32)  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    METHOD/Action enq__ENA ( Bit(width) v )
}
INTERFACE PipeOut(width=32)  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    METHOD/Action deq__ENA
    METHOD first Bit(width)
}
INTERFACE SelectIndexIfc(funnelWidth=20,width=14)  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    FIELD Bit(14) out
    FIELD/Ptr/Count funnelWidth  Bit(14) in
    FIELD Bit(5) index
}
INTERFACE TickIfc  {
    FILE lpm_OC_cpp
    METHOD getTicket Bit(4)
    METHOD/Action allocateTicket__ENA
}
EMODULE AsyncControl AsyncControlIfc {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
}
EMODULE BRAM(width=32,depth=1024) BRAMIfc(width=32,depth=1024) {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_bram_OC_h
}
EMODULE Dummy PipeIn(width=32) {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
}
EMODULE Fifo1Base(width=32) Fifo(width=32) {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_fifo_OC_h
}
EMODULE FifoPipeline1Base(width=23) Fifo(width=23) {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_fifo_OC_h
    OVERRIDE in$enq out$deq
}
EMODULE/Verilog SelectIndex(funnelWidth=20,width=14) SelectIndexIfc(funnelWidth=20,width=14) {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
}
MODULE BufTicket TickIfc {
    FILE lpm_OC_cpp
    FIELD Bit(4) current
    METHOD getTicket Bit(4) = ((current))
    METHOD/Action allocateTicket__ENA {
        PRINTF :printf{"BufTicket allocateTicket %x\n",current}
        STORE :current = (current) + (1)
    }
}
MODULE Fifo1(width=32) Fifo(width=32) {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_fifo_OC_h
    FIELD Fifo1Base(width=32) fifo
    METHOD/Action in$enq__ENA ( Bit(32) v ) {
        CALL/Action :fifo$in$enq__ENA{in$enq$v}
    }
    METHOD/Action out$deq__ENA {
        CALL/Action :fifo$out$deq__ENA{}
    }
    METHOD out$first Bit(32) = ((fifo$out$first)) {
        CALL :fifo$out$first{}
    }
}
MODULE FifoPipeline1(width=23) Fifo(width=23) {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_fifo_OC_h
    FIELD FifoPipeline1Base(width=23) fifo
    OVERRIDE in$enq out$deq
    METHOD/Action in$enq__ENA ( ProcessData v ) {
        CALL/Action :fifo$in$enq__ENA{in$enq$v}
    }
    METHOD/Action out$deq__ENA {
        CALL/Action :fifo$out$deq__ENA{}
    }
    METHOD out$first ProcessData = ((fifo$out$first)) {
        CALL :fifo$out$first{}
    }
}
MODULE Lpm LpmIfc {
    FILE lpm_OC_cpp
    FIELD Fifo1(width=32) inQ
    FIELD BufTicket compBuf
    FIELD FifoPipeline1(width=23) fifo
    FIELD LpmMem(depth=1024) mem
    METHOD/Action enter__ENA ( Bit(32) x ) {
        CALL/Action :inQ$in$enq__ENA{enter$x}
    }
    METHOD/Rule/Action RULE$enterRule__ENA if ((((RULE$recircRule__ENA) != (0)) ^ (1))) {
        ALLOCA ProcessData _RULE$enterRule$agg_2e_tmp
        ALLOCA Bit(4) _RULE$enterRule$ticket
        ALLOCA Bit(32) _RULE$enterRule$x
        CALL :inQ$out$first{}
        LET Bit(32) :_RULE$enterRule$x = inQ$out$first
        CALL :compBuf$getTicket{}
        LET Bit(4) :_RULE$enterRule$ticket = compBuf$getTicket
        PRINTF :printf{"enterRule: in %x ticket %x\n",_RULE$enterRule$x,_RULE$enterRule$ticket}
        CALL/Action :compBuf$allocateTicket__ENA{}
        CALL/Action :inQ$out$deq__ENA{}
        LET Bit(4) :_RULE$enterRule$agg_2e_tmp.ticket = _RULE$enterRule$ticket
        LET Bit(16) :_RULE$enterRule$agg_2e_tmp.IPA = __bitsubstr{_RULE$enterRule$x,(6) - (1),0}
        LET Bit(3) :_RULE$enterRule$agg_2e_tmp.state = 0
        CALL/Action :fifo$in$enq__ENA{_RULE$enterRule$agg_2e_tmp}
        CALL/Action :mem$read__ENA{(0) + (__bitsubstr{_RULE$enterRule$x,9,6})}
    }
    METHOD/Rule/Action RULE$recircRule__ENA if (((((mem$out$first) & (1)) == (1)) ^ (1))) {
        ALLOCA ProcessData _RULE$recircRule$agg_2e_tmp
        ALLOCA Bit(32) _RULE$recircRule$x
        ALLOCA ProcessData _RULE$recircRule$y
        CALL :mem$out$first{}
        LET Bit(32) :_RULE$recircRule$x = mem$out$first
        CALL :fifo$out$first{}
        LET ProcessData :_RULE$recircRule$y = fifo$out$first
        PRINTF :printf{"recircRule: mem %x fifo: ticket %x IPA %x state %x\n",_RULE$recircRule$x,_RULE$recircRule$y.ticket,_RULE$recircRule$y.IPA,_RULE$recircRule$y.state}
        CALL/Action :mem$out$deq__ENA{}
        CALL/Action :mem$read__ENA{(_RULE$recircRule$x) + (__phi(((_RULE$recircRule$y.state) == (1)):(__bitsubstr{_RULE$recircRule$y.IPA,(6) - (1),3}), !((_RULE$recircRule$y.state) == (1)):(__bitsubstr{_RULE$recircRule$y.IPA,(3) - (1),0})))}
        CALL/Action :fifo$out$deq__ENA{}
        LET Bit(4) :_RULE$recircRule$agg_2e_tmp.ticket = _RULE$recircRule$y.ticket
        LET Bit(16) :_RULE$recircRule$agg_2e_tmp.IPA = _RULE$recircRule$y.IPA
        LET Bit(3) :_RULE$recircRule$agg_2e_tmp.state = (_RULE$recircRule$y.state) + (1)
        CALL/Action :fifo$in$enq__ENA{_RULE$recircRule$agg_2e_tmp}
    }
    METHOD/Rule/Action RULE$exitRule__ENA if (((((mem$out$first) & (1)) == (1)) & (((RULE$recircRule__ENA) != (0)) ^ (1)))) {
        ALLOCA Bit(32) _RULE$exitRule$x
        ALLOCA ProcessData _RULE$exitRule$y
        CALL :mem$out$first{}
        LET Bit(32) :_RULE$exitRule$x = mem$out$first
        CALL :fifo$out$first{}
        LET ProcessData :_RULE$exitRule$y = fifo$out$first
        PRINTF :printf{"exitRule: mem %x fifo: ticket %x IPA %x state %x\n",_RULE$exitRule$x,_RULE$exitRule$y.ticket,_RULE$exitRule$y.IPA,_RULE$exitRule$y.state}
        CALL/Action :outQ$enq__ENA{_RULE$exitRule$x}
        CALL/Action :mem$out$deq__ENA{}
        CALL/Action :fifo$out$deq__ENA{}
    }
    METHOD/Action write__ENA ( Bit(32) addr , Bit(32) data ) {
        CALL/Action :mem$write__ENA{write$addr,write$data}
    }
}
MODULE LpmMem(depth=1024) LpmMemIfc(depth=1024) {
    FILE lpm_OC_cpp
    FIELD BRAM(width=32,depth=1024) RAM
    FIELD Bit(1) valid
    METHOD/Action read__ENA ( Bit(__builtin_clog2((depth - 1))) addr ) if (((valid) ^ (1))) {
        PRINTF :printf{"LpmMem read: %x\n",read$addr}
        CALL/Action :RAM$read__ENA{read$addr}
        STORE :valid = 1
    }
    METHOD out$first Bit(32) = ((RAM$dataOut)) if ((valid)) {
        CALL :RAM$dataOut{}
    }
    METHOD/Action out$deq__ENA if ((valid)) {
        PRINTF :printf{"LpmMem out.deq:\n"}
        STORE :valid = 0
    }
    METHOD/Action write__ENA ( Bit(__builtin_clog2((depth - 1))) addr , Bit(32) data ) {
        CALL/Action :RAM$write__ENA{write$addr,write$data}
    }
}
MODULE LpmTest LpmTestIfc {
    FILE lpm_OC_cpp
    INTERFACECONNECT response test$outQ PipeIn(width=32)
    FIELD Lpm test
    INTERFACE PipeIn(width=32) response
    METHOD/Action request$enter__ENA ( Bit(32) data ) {
        CALL/Action :test$enter__ENA{request$enter$data}
    }
    METHOD/Action request$write__ENA ( Bit(32) addr , Bit(32) data ) {
        CALL/Action :test$write__ENA{request$write$addr,request$write$data}
    }
    METHOD/Action response$enq__ENA ( Bit(32) v ) {
        CALL/Action :indication$out__ENA{response$enq$v}
    }
}
