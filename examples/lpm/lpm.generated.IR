EMODULE l_ainterface_OC_LpmIndication = 6 (
    METHOD heard__ENA (
        PARAM heard$meth SIZE 32
        PARAM heard$v SIZE 32
    )
    METHOD heard__RDY SIZE 1
)
EMODULE l_ainterface_OC_LpmMem = 12 (
    METHOD req__ENA (
        PARAM req$v SIZE 96
    )
    METHOD req__RDY SIZE 1
    METHOD resAccept__ENA
    METHOD resAccept__RDY SIZE 1
    METHOD resValue SIZE 96
    METHOD resValue__RDY SIZE 1
)
EMODULE l_ainterface_OC_LpmRequest = 13 (
    METHOD say__ENA (
        PARAM say$meth SIZE 32
        PARAM say$v SIZE 32
    )
    METHOD say__RDY SIZE 1
)
EMODULE l_ainterface_OC_PipeIn = 7 (
    METHOD enq__ENA (
        PARAM enq$v SIZE 96
    )
    METHOD enq__RDY SIZE 1
)
EMODULE l_ainterface_OC_PipeOut = 8 (
    METHOD deq__ENA
    METHOD deq__RDY SIZE 1
    METHOD first SIZE 96
    METHOD first__RDY SIZE 1
)
EMODULE l_module_OC_Fifo1 = 10 (
    METHOD in$enq__ENA (
        PARAM in$enq$v SIZE 96
    )
    METHOD in$enq__RDY SIZE 1
    METHOD out$deq__ENA
    METHOD out$deq__RDY SIZE 1
    METHOD out$first SIZE 96
    METHOD out$first__RDY SIZE 1
)
EMODULE l_module_OC_Fifo = 3 (
    FIELD 7:in
    FIELD 8:out
    METHOD in$enq__ENA (
        PARAM in$enq$v SIZE 96
    )
    METHOD in$enq__RDY SIZE 1
    METHOD out$deq__ENA
    METHOD out$deq__RDY SIZE 1
    METHOD out$first SIZE 96
    METHOD out$first__RDY SIZE 1
)
EMODULE l_struct_OC_ValuePair = 9 (
    FIELD a SIZE 32
    FIELD b SIZE 32
    FIELD c SIZE 32
)
MODULE l_module_OC_Fifo2 = 2 (
    FIELD 9:element COUNT 2 SIZE 96
    FIELD rindex SIZE 32
    FIELD windex SIZE 32
    METHOD in$enq__ENA (
        PARAM in$enq$v SIZE 96
        METAREAD windex 
        METAREAD windex 
        METAREAD windex windex == 0
        METAREAD windex windex == 0
        STORE :*(windex == 0 ? element0:&element1) = in$enq$v
        METAREAD windex 
        STORE :windex = (windex + 1) % 2
    )
    METHOD in$enq__RDY SIZE 1 = (((windex + 1) % 2) != rindex) (
        METAREAD windex 
        METAREAD rindex 
    )
    METHOD out$deq__ENA (
        METAREAD rindex 
        STORE :rindex = (rindex + 1) % 2
    )
    METHOD out$deq__RDY SIZE 1 = (rindex != windex) (
        METAREAD rindex 
        METAREAD windex 
    )
    METHOD out$first SIZE 96 = (*(rindex == 0 ? element0:&element1)) (
        METAREAD rindex 
        METAREAD rindex 
        METAREAD rindex rindex == 0
        METAREAD rindex rindex == 0
        METAREAD *(rindex == 0 ? element0:&element1) 
    )
    METHOD out$first__RDY SIZE 1 = (rindex != windex) (
        METAREAD rindex 
        METAREAD windex 
    )
)
MODULE l_module_OC_LpmMemory = 11 (
    FIELD delayCount SIZE 32
    FIELD 9:saved SIZE 96
    FIELD 12:ifc
    METHOD ifc$req__ENA (
        PARAM ifc$req$v SIZE 96
        STORE :delayCount = 4
        STORE :saved = ifc$req$v
    )
    METHOD ifc$req__RDY SIZE 1 = (delayCount == 0) (
        METAREAD delayCount 
    )
    METHOD ifc$resAccept__ENA (
        STORE :delayCount = 0
    )
    METHOD ifc$resAccept__RDY SIZE 1 = (delayCount == 1) (
        METAREAD delayCount 
    )
    METHOD ifc$resValue SIZE 96 = (saved) (
        METAREAD saved 
    )
    METHOD ifc$resValue__RDY SIZE 1 = (delayCount == 1) (
        METAREAD delayCount 
    )
    METHOD /RULE memdelay_rule__ENA (
        METAREAD delayCount 
        STORE :delayCount = delayCount - 1
    )
    METHOD /RULE memdelay_rule__RDY SIZE 1 = (delayCount > 1) (
        METAREAD delayCount 
    )
)
MODULE l_module_OC_Lpm = 4 (
    PRIORITY recirc enter;exit
    FIELD 10:inQ
    FIELD 2:fifo SIZE 160
    FIELD 10:outQ
    FIELD 11:mem SIZE 128
    FIELD doneCount SIZE 32
    OUTCALL ind = 6
    FIELD/PTR  6:ind
    FIELD 13:request
    METHOD /RULE enter__ENA (
        METAINVOKE inQ$out$first 
        STORE/Alloca :temp = inQ$out$first{}
        METAINVOKE inQ$out$deq__ENA 
        CALL/Action :inQ$out$deq__ENA{}
        METAINVOKE fifo$in$enq__ENA 
        CALL/Action :fifo$in$enq__ENA{fifo$in$enq$v;temp}
        METAINVOKE mem$ifc$req__ENA 
        CALL/Action :mem$ifc$req__ENA{mem$ifc$req$v;temp}
    )
    METHOD /RULE enter__RDY SIZE 1 = (((inQ$out$first__RDY & inQ$out$deq__RDY) & fifo$in$enq__RDY) & mem$ifc$req__RDY) (
        METAINVOKE inQ$out$first__RDY 
        METAINVOKE inQ$out$deq__RDY 
        METAINVOKE fifo$in$enq__RDY 
        METAINVOKE mem$ifc$req__RDY 
    )
    METHOD /RULE exit_rule__ENA (
        METAINVOKE fifo$out$first 
        STORE/Alloca :temp = fifo$out$first{}
        METAINVOKE mem$ifc$resValue 
        STORE/Alloca :mtemp = mem$ifc$resValue{}
        METAINVOKE mem$ifc$resAccept__ENA 
        CALL/Action :mem$ifc$resAccept__ENA{}
        METAINVOKE fifo$out$deq__ENA 
        CALL/Action :fifo$out$deq__ENA{}
        METAINVOKE outQ$in$enq__ENA 
        CALL/Action :outQ$in$enq__ENA{outQ$in$enq$v;temp}
    )
    METHOD /RULE exit_rule__RDY SIZE 1 = ((((fifo$out$first__RDY & mem$ifc$resValue__RDY) & mem$ifc$resAccept__RDY) & fifo$out$deq__RDY) & outQ$in$enq__RDY) (
        METAINVOKE fifo$out$first__RDY 
        METAINVOKE mem$ifc$resValue__RDY 
        METAINVOKE mem$ifc$resAccept__RDY 
        METAINVOKE fifo$out$deq__RDY 
        METAINVOKE outQ$in$enq__RDY 
    )
    METHOD /RULE recirc__ENA (
        METAINVOKE fifo$out$first 
        STORE/Alloca :temp = fifo$out$first{}
        METAINVOKE mem$ifc$resValue 
        STORE/Alloca :mtemp = mem$ifc$resValue{}
        METAINVOKE mem$ifc$resAccept__ENA 
        CALL/Action :mem$ifc$resAccept__ENA{}
        METAINVOKE fifo$out$deq__ENA 
        CALL/Action :fifo$out$deq__ENA{}
        METAINVOKE fifo$in$enq__ENA 
        CALL/Action :fifo$in$enq__ENA{fifo$in$enq$v;temp}
        METAINVOKE mem$ifc$req__ENA 
        CALL/Action :mem$ifc$req__ENA{mem$ifc$req$v;temp}
    )
    METHOD /RULE recirc__RDY SIZE 1 = (((((fifo$out$first__RDY & mem$ifc$resValue__RDY) & mem$ifc$resAccept__RDY) & fifo$out$deq__RDY) & fifo$in$enq__RDY) & mem$ifc$req__RDY) (
        METAINVOKE fifo$out$first__RDY 
        METAINVOKE mem$ifc$resValue__RDY 
        METAINVOKE mem$ifc$resAccept__RDY 
        METAINVOKE fifo$out$deq__RDY 
        METAINVOKE fifo$in$enq__RDY 
        METAINVOKE mem$ifc$req__RDY 
    )
    METHOD request$say__ENA (
        PARAM request$say$meth SIZE 32
        PARAM request$say$v SIZE 32
        STORE/Alloca :temp$a = request$say$meth
        STORE/Alloca :temp$b = request$say$v
        METAINVOKE inQ$in$enq__ENA 
        CALL/Action :inQ$in$enq__ENA{inQ$in$enq$v;temp}
    )
    METHOD request$say__RDY SIZE 1 = (inQ$in$enq__RDY) (
        METAINVOKE inQ$in$enq__RDY 
    )
    METHOD /RULE respond__ENA (
        METAINVOKE outQ$out$first 
        STORE/Alloca :temp = outQ$out$first{}
        METAINVOKE outQ$out$deq__ENA 
        CALL/Action :outQ$out$deq__ENA{}
        METAINVOKE ind$heard__ENA 
        CALL/Action :ind$heard__ENA{ind$heard$meth;temp$a,ind$heard$v;temp$b}
    )
    METHOD /RULE respond__RDY SIZE 1 = ((outQ$out$first__RDY & outQ$out$deq__RDY) & ind$heard__RDY) (
        METAINVOKE outQ$out$first__RDY 
        METAINVOKE outQ$out$deq__RDY 
        METAINVOKE ind$heard__RDY 
    )
)
EMODULE l_class_OC_LpmTest = 1 (
    FIELD 4:lpm SIZE 320
)
EMODULE l_class_OC_foo = 5 (
    FIELD 6:indication
)
