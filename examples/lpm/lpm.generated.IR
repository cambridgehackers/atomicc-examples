EMODULE l_ainterface_OC_LpmIndication 0 (
    METHOD heard__ENA (
        PARAM meth INTEGER_32
        PARAM v INTEGER_32
    )
    METHOD heard__RDY INTEGER_1
)
EMODULE l_struct_OC_ValuePair 96 (
    FIELD a INTEGER_32
    FIELD b INTEGER_32
    FIELD c INTEGER_32
)
EMODULE l_ainterface_OC_LpmMem 0 (
    METHOD req__ENA (
        PARAM v l_struct_OC_ValuePair
    )
    METHOD req__RDY INTEGER_1
    METHOD resAccept__ENA
    METHOD resAccept__RDY INTEGER_1
    METHOD resValue l_struct_OC_ValuePair
    METHOD resValue__RDY INTEGER_1
)
EMODULE l_ainterface_OC_LpmRequest 0 (
    METHOD say__ENA (
        PARAM meth INTEGER_32
        PARAM v INTEGER_32
    )
    METHOD say__RDY INTEGER_1
)
EMODULE l_ainterface_OC_PipeIn 0 (
    METHOD enq__ENA (
        PARAM v l_struct_OC_ValuePair
    )
    METHOD enq__RDY INTEGER_1
)
EMODULE l_ainterface_OC_PipeOut 0 (
    METHOD deq__ENA
    METHOD deq__RDY INTEGER_1
    METHOD first l_struct_OC_ValuePair
    METHOD first__RDY INTEGER_1
)
EMODULE l_module_OC_Fifo 0 (
    FIELD in l_ainterface_OC_PipeIn
    FIELD out l_ainterface_OC_PipeOut
    METHOD in$enq__ENA (
        PARAM v l_struct_OC_ValuePair
    )
    METHOD in$enq__RDY INTEGER_1
    METHOD out$deq__ENA
    METHOD out$deq__RDY INTEGER_1
    METHOD out$first l_struct_OC_ValuePair
    METHOD out$first__RDY INTEGER_1
)
EMODULE l_module_OC_Fifo1 0 (
    METHOD in$enq__ENA (
        PARAM v l_struct_OC_ValuePair
    )
    METHOD in$enq__RDY INTEGER_1
    METHOD out$deq__ENA
    METHOD out$deq__RDY INTEGER_1
    METHOD out$first l_struct_OC_ValuePair
    METHOD out$first__RDY INTEGER_1
)
MODULE l_module_OC_Fifo2 160 (
    FIELD/Count 2  element l_struct_OC_ValuePair
    FIELD rindex INTEGER_32
    FIELD windex INTEGER_32
    METHOD in$enq__ENA (
        PARAM v l_struct_OC_ValuePair
        METAREAD windex 
        METAREAD windex 
        METAREAD windex windex == 0
        METAREAD windex windex == 0
        STORE :*(windex == 0 ? element0:&element1) = in$enq$v
        METAREAD windex 
        STORE :windex = (windex + 1) % 2
    )
    METHOD in$enq__RDY INTEGER_1 = (((windex + 1) % 2) != rindex) (
        METAREAD windex 
        METAREAD rindex 
    )
    METHOD out$deq__ENA (
        METAREAD rindex 
        STORE :rindex = (rindex + 1) % 2
    )
    METHOD out$deq__RDY INTEGER_1 = (rindex != windex) (
        METAREAD rindex 
        METAREAD windex 
    )
    METHOD out$first l_struct_OC_ValuePair = (*(rindex == 0 ? element0:&element1)) (
        METAREAD rindex 
        METAREAD rindex 
        METAREAD rindex rindex == 0
        METAREAD rindex rindex == 0
        METAREAD *(rindex == 0 ? element0:&element1) 
    )
    METHOD out$first__RDY INTEGER_1 = (rindex != windex) (
        METAREAD rindex 
        METAREAD windex 
    )
)
MODULE l_module_OC_LpmMemory 128 (
    FIELD delayCount INTEGER_32
    FIELD saved l_struct_OC_ValuePair
    FIELD ifc l_ainterface_OC_LpmMem
    METHOD ifc$req__ENA (
        PARAM v l_struct_OC_ValuePair
        STORE :delayCount = 4
        STORE :saved = ifc$req$v
    )
    METHOD ifc$req__RDY INTEGER_1 = (delayCount == 0) (
        METAREAD delayCount 
    )
    METHOD ifc$resAccept__ENA (
        STORE :delayCount = 0
    )
    METHOD ifc$resAccept__RDY INTEGER_1 = (delayCount == 1) (
        METAREAD delayCount 
    )
    METHOD ifc$resValue l_struct_OC_ValuePair = (saved) (
        METAREAD saved 
    )
    METHOD ifc$resValue__RDY INTEGER_1 = (delayCount == 1) (
        METAREAD delayCount 
    )
    METHOD/Rule memdelay_rule__ENA (
        METAREAD delayCount 
        STORE :delayCount = delayCount - 1
    )
    METHOD/Rule memdelay_rule__RDY INTEGER_1 = (delayCount > 1) (
        METAREAD delayCount 
    )
)
MODULE l_module_OC_Lpm 320 (
    PRIORITY recirc enter;exit
    FIELD inQ l_module_OC_Fifo1
    FIELD fifo l_module_OC_Fifo2
    FIELD outQ l_module_OC_Fifo1
    FIELD mem l_module_OC_LpmMemory
    FIELD doneCount INTEGER_32
    OUTCALL ind = l_ainterface_OC_LpmIndication
    FIELD/Ptr ind l_ainterface_OC_LpmIndication
    FIELD request l_ainterface_OC_LpmRequest
    METHOD/Rule enter__ENA (
        METAINVOKE inQ$out$first 
        STORE/Alloca :enter__ENA$temp = inQ$out$first{}
        METAINVOKE inQ$out$deq__ENA 
        CALL/Action :inQ$out$deq__ENA{}
        METAINVOKE fifo$in$enq__ENA 
        CALL/Action :fifo$in$enq__ENA{enter__ENA$temp}
        METAINVOKE mem$ifc$req__ENA 
        CALL/Action :mem$ifc$req__ENA{enter__ENA$temp}
    )
    METHOD/Rule enter__RDY INTEGER_1 = (((inQ$out$first__RDY & inQ$out$deq__RDY) & fifo$in$enq__RDY) & mem$ifc$req__RDY) (
        METAINVOKE inQ$out$first__RDY 
        METAINVOKE inQ$out$deq__RDY 
        METAINVOKE fifo$in$enq__RDY 
        METAINVOKE mem$ifc$req__RDY 
    )
    METHOD/Rule exit_rule__ENA (
        METAINVOKE fifo$out$first 
        STORE/Alloca :exit_rule__ENA$temp = fifo$out$first{}
        METAINVOKE mem$ifc$resValue 
        STORE/Alloca :exit_rule__ENA$mtemp = mem$ifc$resValue{}
        METAINVOKE mem$ifc$resAccept__ENA 
        CALL/Action :mem$ifc$resAccept__ENA{}
        METAINVOKE fifo$out$deq__ENA 
        CALL/Action :fifo$out$deq__ENA{}
        METAINVOKE outQ$in$enq__ENA 
        CALL/Action :outQ$in$enq__ENA{exit_rule__ENA$temp}
    )
    METHOD/Rule exit_rule__RDY INTEGER_1 = ((((fifo$out$first__RDY & mem$ifc$resValue__RDY) & mem$ifc$resAccept__RDY) & fifo$out$deq__RDY) & outQ$in$enq__RDY) (
        METAINVOKE fifo$out$first__RDY 
        METAINVOKE mem$ifc$resValue__RDY 
        METAINVOKE mem$ifc$resAccept__RDY 
        METAINVOKE fifo$out$deq__RDY 
        METAINVOKE outQ$in$enq__RDY 
    )
    METHOD/Rule recirc__ENA (
        METAINVOKE fifo$out$first 
        STORE/Alloca :recirc__ENA$temp = fifo$out$first{}
        METAINVOKE mem$ifc$resValue 
        STORE/Alloca :recirc__ENA$mtemp = mem$ifc$resValue{}
        METAINVOKE mem$ifc$resAccept__ENA 
        CALL/Action :mem$ifc$resAccept__ENA{}
        METAINVOKE fifo$out$deq__ENA 
        CALL/Action :fifo$out$deq__ENA{}
        METAINVOKE fifo$in$enq__ENA 
        CALL/Action :fifo$in$enq__ENA{recirc__ENA$mtemp}
        METAINVOKE mem$ifc$req__ENA 
        CALL/Action :mem$ifc$req__ENA{recirc__ENA$temp}
    )
    METHOD/Rule recirc__RDY INTEGER_1 = (((((fifo$out$first__RDY & mem$ifc$resValue__RDY) & mem$ifc$resAccept__RDY) & fifo$out$deq__RDY) & fifo$in$enq__RDY) & mem$ifc$req__RDY) (
        METAINVOKE fifo$out$first__RDY 
        METAINVOKE mem$ifc$resValue__RDY 
        METAINVOKE mem$ifc$resAccept__RDY 
        METAINVOKE fifo$out$deq__RDY 
        METAINVOKE fifo$in$enq__RDY 
        METAINVOKE mem$ifc$req__RDY 
    )
    METHOD request$say__ENA (
        PARAM meth INTEGER_32
        PARAM v INTEGER_32
        STORE/Alloca :request$say__ENA$temp$a = request$say$meth
        STORE/Alloca :request$say__ENA$temp$b = request$say$v
        METAINVOKE inQ$in$enq__ENA 
        CALL/Action :inQ$in$enq__ENA{request$say__ENA$temp}
    )
    METHOD request$say__RDY INTEGER_1 = (inQ$in$enq__RDY) (
        METAINVOKE inQ$in$enq__RDY 
    )
    METHOD/Rule respond__ENA (
        METAINVOKE outQ$out$first 
        STORE/Alloca :respond__ENA$temp = outQ$out$first{}
        METAINVOKE outQ$out$deq__ENA 
        CALL/Action :outQ$out$deq__ENA{}
        METAINVOKE ind$heard__ENA 
        CALL/Action :ind$heard__ENA{respond__ENA$temp$a,respond__ENA$temp$b}
    )
    METHOD/Rule respond__RDY INTEGER_1 = ((outQ$out$first__RDY & outQ$out$deq__RDY) & ind$heard__RDY) (
        METAINVOKE outQ$out$first__RDY 
        METAINVOKE outQ$out$deq__RDY 
        METAINVOKE ind$heard__RDY 
    )
)
