EMODULE l_struct_OC_ValuePair {
    FIELD a INTEGER_32
    FIELD b INTEGER_32
    FIELD c INTEGER_32
}
EMODULE l_ainterface_OC_LpmIndication {
    METHOD heard__ENA ( INTEGER_32 meth , INTEGER_32 v )
}
EMODULE l_ainterface_OC_LpmMem {
    METHOD req__ENA ( l_struct_OC_ValuePair v )
    METHOD resAccept__ENA
    METHOD resValue l_struct_OC_ValuePair
}
EMODULE l_ainterface_OC_LpmRequest {
    METHOD say__ENA ( INTEGER_32 meth , INTEGER_32 v )
}
EMODULE l_ainterface_OC_PipeIn {
    METHOD enq__ENA ( l_struct_OC_ValuePair v )
}
EMODULE l_ainterface_OC_PipeOut {
    METHOD deq__ENA
    METHOD first l_struct_OC_ValuePair
}
EMODULE l_module_OC_Fifo {
    INTERFACE in l_ainterface_OC_PipeIn
    INTERFACE out l_ainterface_OC_PipeOut
}
EMODULE l_module_OC_Fifo1 {
    INTERFACE in l_ainterface_OC_PipeIn
    INTERFACE out l_ainterface_OC_PipeOut
}
MODULE l_module_OC_Fifo2 {
    INTERFACE in l_ainterface_OC_PipeIn
    INTERFACE out l_ainterface_OC_PipeOut
    FIELD/Count 2  element l_struct_OC_ValuePair
    FIELD rindex INTEGER_32
    FIELD windex INTEGER_32
    METHOD in$enq__ENA ( l_struct_OC_ValuePair v ) if (((windex + 1) % 2) != rindex) {
        STORE :*(windex == 0 ? element0:&element1) = in$enq$v
        STORE :windex = (windex + 1) % 2
    }
    METHOD out$deq__ENA if (rindex != windex) {
        STORE :rindex = (rindex + 1) % 2
    }
    METHOD out$first l_struct_OC_ValuePair = (*(rindex == 0 ? element0:&element1)) if (rindex != windex)
}
MODULE l_module_OC_Lpm {
    PRIORITY recirc enter;exit
    FIELD inQ l_module_OC_Fifo1
    FIELD fifo l_module_OC_Fifo2
    FIELD outQ l_module_OC_Fifo1
    FIELD mem l_module_OC_LpmMemory
    FIELD doneCount INTEGER_32
    EINTERFACE ind l_ainterface_OC_LpmIndication
    INTERFACE request l_ainterface_OC_LpmRequest
    METHOD/Rule enter__ENA {
        ALLOCA enter__ENA$temp l_struct_OC_ValuePair
        CALL :inQ$out$first{}
        LET l_struct_OC_ValuePair :enter__ENA$temp = inQ$out$first{}
        CALL/Action :inQ$out$deq__ENA{}
        CALL/Action :fifo$in$enq__ENA{enter__ENA$temp}
        CALL/Action :mem$ifc$req__ENA{enter__ENA$temp}
    }
    METHOD/Rule exit_rule__ENA {
        ALLOCA exit_rule__ENA$mtemp l_struct_OC_ValuePair
        ALLOCA exit_rule__ENA$temp l_struct_OC_ValuePair
        CALL :fifo$out$first{}
        LET l_struct_OC_ValuePair :exit_rule__ENA$temp = fifo$out$first{}
        CALL :mem$ifc$resValue{}
        LET l_struct_OC_ValuePair :exit_rule__ENA$mtemp = mem$ifc$resValue{}
        CALL/Action :mem$ifc$resAccept__ENA{}
        CALL/Action :fifo$out$deq__ENA{}
        CALL/Action :outQ$in$enq__ENA{exit_rule__ENA$temp}
    }
    METHOD/Rule recirc__ENA {
        ALLOCA recirc__ENA$mtemp l_struct_OC_ValuePair
        ALLOCA recirc__ENA$temp l_struct_OC_ValuePair
        CALL :fifo$out$first{}
        LET l_struct_OC_ValuePair :recirc__ENA$temp = fifo$out$first{}
        CALL :mem$ifc$resValue{}
        LET l_struct_OC_ValuePair :recirc__ENA$mtemp = mem$ifc$resValue{}
        CALL/Action :mem$ifc$resAccept__ENA{}
        CALL/Action :fifo$out$deq__ENA{}
        CALL/Action :fifo$in$enq__ENA{recirc__ENA$mtemp}
        CALL/Action :mem$ifc$req__ENA{recirc__ENA$temp}
    }
    METHOD request$say__ENA ( INTEGER_32 meth , INTEGER_32 v ) {
        ALLOCA request$say__ENA$temp l_struct_OC_ValuePair
        LET INTEGER_32 :request$say__ENA$temp$a = request$say$meth
        LET INTEGER_32 :request$say__ENA$temp$b = request$say$v
        CALL/Action :inQ$in$enq__ENA{request$say__ENA$temp}
    }
    METHOD/Rule respond__ENA {
        ALLOCA respond__ENA$temp l_struct_OC_ValuePair
        CALL :outQ$out$first{}
        LET l_struct_OC_ValuePair :respond__ENA$temp = outQ$out$first{}
        CALL/Action :outQ$out$deq__ENA{}
        CALL/Action :ind$heard__ENA{respond__ENA$temp$a,respond__ENA$temp$b}
    }
}
MODULE l_module_OC_LpmMemory {
    FIELD delayCount INTEGER_32
    FIELD saved l_struct_OC_ValuePair
    INTERFACE ifc l_ainterface_OC_LpmMem
    METHOD ifc$req__ENA ( l_struct_OC_ValuePair v ) if (delayCount == 0) {
        STORE :delayCount = 4
        STORE :saved = ifc$req$v
    }
    METHOD ifc$resAccept__ENA if (delayCount == 1) {
        STORE :delayCount = 0
    }
    METHOD ifc$resValue l_struct_OC_ValuePair = (saved) if (delayCount == 1)
    METHOD/Rule memdelay_rule__ENA if (delayCount > 1) {
        STORE :delayCount = delayCount - 1
    }
}
