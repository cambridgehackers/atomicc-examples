STRUCT ExecResult  {
    FILE MultiCycleProc_OC_cpp
    FIELD Bit(32) nextPC
    FIELD Bit(32) addr
    FIELD Bit(32) data
}
STRUCT NOCDataH  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    FIELD Bit(16) length
    FIELD Bit(128) data
}
INTERFACE AsyncControlIfc  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    FIELD/input Bit(1) CLK
    FIELD/input Bit(1) nRST
    FIELD/input Bit(1) start
    FIELD/input Bit(1) end
    FIELD/input Bit(1) clear
    FIELD/output Bit(1) out
    FIELD/output Bit(1) done
}
INTERFACE DMem  {
    FILE MultiCycleProc_OC_cpp
    METHOD/Action request__ENA ( Bit(32) write_en , Bit(32) addr , Bit(32) data )
    METHOD response Bit(32)
}
INTERFACE Decoder  {
    FILE MultiCycleProc_OC_cpp
    METHOD getOp ( Bit(32) inst ) Bit(32)
    METHOD getArithOp ( Bit(32) inst ) Bit(32)
    METHOD getSrc1 ( Bit(32) inst ) Bit(32)
    METHOD getSrc2 ( Bit(32) inst ) Bit(32)
    METHOD getDst ( Bit(32) inst ) Bit(32)
    METHOD getAddr ( Bit(32) inst ) Bit(32)
}
INTERFACE Executer  {
    FILE MultiCycleProc_OC_cpp
    METHOD basicExec ( Bit(32) op , Bit(32) src1 , Bit(32) src2 ) ExecResult
}
INTERFACE IMem  {
    FILE MultiCycleProc_OC_cpp
    METHOD read ( Bit(32) pc ) Bit(32)
}
INTERFACE MultiCycleProcIfc  {
    FILE MultiCycleProc_OC_cpp
    INTERFACE/Ptr Decoder dec
    INTERFACE/Ptr Executer exec
    INTERFACE/Ptr RegFile rf
    INTERFACE/Ptr IMem pgm
    INTERFACE/Ptr DMem dmem
}
INTERFACE PipeIn(width=32)  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    METHOD/Action enq__ENA ( Bit(width) v )
}
INTERFACE RegFile  {
    FILE MultiCycleProc_OC_cpp
    METHOD read ( Bit(32) regnum ) Bit(32)
    METHOD/Action write__ENA ( Bit(32) regnum , Bit(32) regval )
}
INTERFACE SelectIndexIfc(funnelWidth=20,width=14)  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    FIELD Bit(14) out
    FIELD/Ptr/Count funnelWidth  Bit(14) in
    FIELD Bit(5) index
}
EMODULE AsyncControl AsyncControlIfc {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
}
EMODULE Dummy PipeIn(width=32) {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
}
EMODULE/Verilog SelectIndex(funnelWidth=20,width=14) SelectIndexIfc(funnelWidth=20,width=14) {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
}
MODULE MultiCycleProc MultiCycleProcIfc {
    FILE MultiCycleProc_OC_cpp
    FIELD Bit(32) pc
    FIELD Bit(32) d2e_valid
    FIELD Bit(32) d2e_op
    FIELD Bit(32) d2e_arithOp
    FIELD Bit(32) d2e_src1
    FIELD Bit(32) d2e_src2
    FIELD Bit(32) d2e_dst
    FIELD Bit(32) d2e_addr
    FIELD Bit(32) e2w_valid
    FIELD Bit(32) e2w_dst
    FIELD Bit(32) e2w_val
    FIELD Bit(32) e2w_addr
    FIELD Bit(32) e2w_nextPC
    METHOD/Rule/Action RULE$decode__ENA if (((d2e_valid) == (0))) {
        ALLOCA Bit(32) _RULE$decode$inst
        CALL :pgm$read{pc}
        LET Bit(32) :_RULE$decode$inst = pgm$read
        CALL :dec$getOp{_RULE$decode$inst}
        STORE :d2e_op = dec$getOp
        CALL :dec$getArithOp{_RULE$decode$inst}
        STORE :d2e_arithOp = dec$getArithOp
        CALL :dec$getSrc1{_RULE$decode$inst}
        STORE :d2e_src1 = dec$getSrc1
        CALL :dec$getSrc2{_RULE$decode$inst}
        STORE :d2e_src2 = dec$getSrc2
        CALL :dec$getDst{_RULE$decode$inst}
        STORE :d2e_dst = dec$getDst
        CALL :dec$getAddr{_RULE$decode$inst}
        STORE :d2e_addr = dec$getAddr
        STORE :d2e_valid = 1
    }
    METHOD/Rule/Action RULE$execArith__ENA if ((((d2e_valid) == (1)) && ((e2w_valid) == (0)))) {
        ALLOCA ExecResult _RULE$execArith$val
        ALLOCA Bit(32) _RULE$execArith$val1
        ALLOCA Bit(32) _RULE$execArith$val2
        STORE :d2e_valid = 0
        STORE :e2w_dst = d2e_dst
        CALL :rf$read{d2e_src1}
        LET Bit(32) :_RULE$execArith$val1 = rf$read
        CALL :rf$read{d2e_src2}
        LET Bit(32) :_RULE$execArith$val2 = rf$read
        CALL :exec$basicExec{d2e_op,_RULE$execArith$val1,_RULE$execArith$val2}
        LET ExecResult :_RULE$execArith$val = exec$basicExec
        STORE :e2w_val = _RULE$execArith$val.data
        STORE :e2w_nextPC = _RULE$execArith$val.nextPC
        STORE :e2w_addr = _RULE$execArith$val.addr
        STORE :e2w_valid = 1
    }
    METHOD/Rule/Action RULE$writeBack__ENA if (((e2w_valid) == (1))) {
        ALLOCA Bit(32) _RULE$writeBack$wbval
        LET Bit(32) :_RULE$writeBack$wbval = e2w_val
        CALL/Action :rf$write__ENA{e2w_dst,_RULE$writeBack$wbval}
        STORE :e2w_valid = 0
        STORE :pc = e2w_nextPC
    }
}
