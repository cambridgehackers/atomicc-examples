INTERFACE Fifo(width=32)  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    INTERFACE PipeIn(width=32) in
    INTERFACE PipeOut(width=32) out
}
INTERFACE FifoPIfc(width=32)  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_fifo_OC_h
    INTERFACE PipeIn(width=32) in
    INTERFACE/Ptr PipeIn(width=32) out
}
INTERFACE FunnelBaseIfc(funnelWidth=4,width=32)  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    INTERFACE/Count funnelWidth  PipeIn(width=32) in
    INTERFACE/Ptr PipeIn(width=32) out
}
INTERFACE FunnelBaseIfc(funnelWidth=99,width=32)  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    INTERFACE/Count funnelWidth  PipeIn(width=32) in
    INTERFACE/Ptr PipeIn(width=32) out
}
INTERFACE FunnelIfc(funnelWidth=4,width=32)  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_funnel_OC_h
    INTERFACE/Count funnelWidth  PipeIn(width=32) in
    INTERFACE/Ptr PipeIn(width=32) out
}
INTERFACE FunnelIndication  {
    FILE funneltest_OC_cpp
    METHOD/Action heard__ENA ( Bit(32) v )
}
INTERFACE FunnelRequest  {
    FILE funneltest_OC_cpp
    METHOD/Action say__ENA ( Bit(32) v )
}
INTERFACE FunnelTestIfc  {
    FILE funneltest_OC_cpp
    SOFTWARE request
    SOFTWARE indication
    INTERFACE FunnelRequest request
    INTERFACE/Ptr FunnelIndication indication
}
INTERFACE PipeIn(width=32)  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    METHOD/Action enq__ENA ( Bit(width) v )
}
INTERFACE PipeOut(width=32)  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    METHOD/Action deq__ENA
    METHOD first Bit(width)
}
EMODULE Fifo1Base(width=32) Fifo(width=32) {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_fifo_OC_h
}
EMODULE FifoPBase(width=32) FifoPIfc(width=32) {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_fifo_OC_h
}
EMODULE FunnelBufferedBase(funnelWidth=4,width=32) FunnelBaseIfc(funnelWidth=4,width=32) {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
}
EMODULE FunnelBufferedBase(funnelWidth=99,width=32) FunnelBaseIfc(funnelWidth=99,width=32) {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
}
MODULE Fifo1(width=32) Fifo(width=32) {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_fifo_OC_h
    FIELD Fifo1Base(width=32) fifo
    METHOD/Action in$enq__ENA ( Bit(32) v ) {
        CALL/Action :fifo$in$enq__ENA{in$enq$v}
    }
    METHOD/Action out$deq__ENA {
        CALL/Action :fifo$out$deq__ENA{}
    }
    METHOD out$first Bit(32) = ((fifo$out$first)) {
        CALL :fifo$out$first{}
    }
}
MODULE FifoP(width=32) FifoPIfc(width=32) {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_fifo_OC_h
    INTERFACECONNECT fifo$in in PipeIn(width=32)
    INTERFACECONNECT fifo$out out PipeIn(width=32)
    FIELD FifoPBase(width=32) fifo
}
MODULE FunnelBuffered(funnelWidth=4,width=32) FunnelIfc(funnelWidth=4,width=32) {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_funnel_OC_h
    INTERFACECONNECT base$in in PipeIn(width=32)
    INTERFACECONNECT base$out out PipeIn(width=32)
    FIELD FunnelBufferedBase(funnelWidth=4,width=32) base
}
MODULE FunnelTest FunnelTestIfc {
    FILE funneltest_OC_cpp
    INTERFACECONNECT funnel$out result$in PipeIn(width=32)
    FIELD/Count 4  FifoP(width=32) fifo
    FIELD FunnelBuffered(funnelWidth=4,width=32) funnel
    FIELD Fifo1(width=32) result
    FIELD Bit(8) index
    METHOD/Action request$say__ENA ( Bit(32) v ) {
        PRINTF :printf{"request.say %x index %d\n",request$say$v,index}
        CALL/Action :fifo$in[index].enq__ENA{request$say$v}
        STORE ((index) >= ((4) - (1))):index = 0
        STORE !((index) >= ((4) - (1))):index = (index) + (1)
    }
    METHOD/Rule/Action RULE$respond_rule__ENA {
        PRINTF :printf{"[%s:%d] index %d\n","RULE$respond_rule_block_invoke",55,index}
        CALL :result$out$first{}
        CALL/Action :indication$heard__ENA{result$out$first}
        CALL/Action :result$out$deq__ENA{}
    }
    METHOD/Action FOR$0Body__ENA ( Bit(32) __inst$Genvar1 ) {
        INTERFACECONNECT funnel$in[__inst$Genvar1] fifo$out[__inst$Genvar1] PipeIn(width=32)
    }
    METHOD/Rule/Action RULE$init__ENA {
        GENERATE :__inst$Genvar1,(0),((__inst$Genvar1 < 4)),((__inst$Genvar1 + 1)),FOR$0Body__ENA
    }
}
