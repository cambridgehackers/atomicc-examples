STRUCT NOCDataH  {
    FIELD Bit(16) length
    FIELD Bit(128) data
}
INTERFACE Fifo  {
    INTERFACE PipeIn_OC_0 in
    INTERFACE PipeOut out
}
INTERFACE Fifo_OC_1  {
    INTERFACE PipeIn_OC_2 in
    INTERFACE PipeOut_OC_3 out
}
INTERFACE FunnelIfc(funnelWidth=4)  {
    INTERFACE/Count funnelWidth  PipeIn_OC_30 in
    INTERFACE/Ptr PipeIn_OC_30 out
}
INTERFACE FunnelIndication  {
    METHOD/Action heard__ENA ( Bit(32) v )
}
INTERFACE FunnelRequest  {
    METHOD/Action say__ENA ( Bit(32) v )
}
INTERFACE FunnelTestIfc  {
    SOFTWARE request
    SOFTWARE indication
    INTERFACE FunnelRequest request
    INTERFACE/Ptr FunnelIndication indication
}
INTERFACE Out2InIfc  {
    INTERFACE/Ptr PipeOut_OC_16 in
    INTERFACE/Ptr PipeIn_OC_17 out
}
INTERFACE PipeIn  {
    METHOD/Action enq__ENA ( NOCDataH v )
}
INTERFACE PipeIn_OC_0  {
    METHOD/Action enq__ENA ( Bit(32) v )
}
INTERFACE PipeIn_OC_17  {
    METHOD/Action enq__ENA ( Bit(32) v )
}
INTERFACE PipeIn_OC_2  {
    METHOD/Action enq__ENA ( Bit(32) v )
}
INTERFACE PipeIn_OC_21  {
    METHOD/Action enq__ENA ( Bit(32) v )
}
INTERFACE PipeIn_OC_25  {
    METHOD/Action enq__ENA ( Bit(32) v )
}
INTERFACE PipeIn_OC_29  {
    METHOD/Action enq__ENA ( Bit(32) v )
}
INTERFACE PipeIn_OC_30  {
    METHOD/Action enq__ENA ( Bit(32) v )
}
INTERFACE PipeOut  {
    METHOD/Action deq__ENA
    METHOD first Bit(32)
}
INTERFACE PipeOut_OC_16  {
    METHOD/Action deq__ENA
    METHOD first Bit(32)
}
INTERFACE PipeOut_OC_20  {
    METHOD/Action deq__ENA
    METHOD first Bit(32)
}
INTERFACE PipeOut_OC_24  {
    METHOD/Action deq__ENA
    METHOD first Bit(32)
}
INTERFACE PipeOut_OC_28  {
    METHOD/Action deq__ENA
    METHOD first Bit(32)
}
INTERFACE PipeOut_OC_3  {
    METHOD/Action deq__ENA
    METHOD first Bit(32)
}
INTERFACE l_topIfc  {
    INTERFACE PipeIn request
    INTERFACE/Ptr PipeIn indication
}
EMODULE Fifo1Base(width=32) Fifo {
}
EMODULE Funnel(funnelWidth=4) FunnelIfc(funnelWidth=4) {
}
EMODULE l_top l_topIfc {
}
MODULE Fifo1 Fifo_OC_1 {
    FIELD Fifo1Base(width=32) fifo
    METHOD/Action in$enq__ENA ( Bit(32) v ) {
        CALL/Action :fifo$in$enq__ENA{in$enq$v}
    }
    METHOD/Action out$deq__ENA {
        CALL/Action :fifo$out$deq__ENA{}
    }
    METHOD out$first Bit(32) = ((fifo$out$first)) {
        CALL :fifo$out$first{}
    }
}
MODULE FunnelTest FunnelTestIfc {
    INTERFACECONNECT iA$in fifoA$out PipeOut_OC_16
    INTERFACECONNECT iB$in fifoB$out PipeOut_OC_16
    INTERFACECONNECT iC$in fifoC$out PipeOut_OC_16
    INTERFACECONNECT iD$in fifoD$out PipeOut_OC_16
    INTERFACECONNECT funnel$in[0] iA$out PipeIn_OC_30
    INTERFACECONNECT funnel$in[1] iB$out PipeIn_OC_30
    INTERFACECONNECT funnel$in[2] iC$out PipeIn_OC_30
    INTERFACECONNECT funnel$in[3] iD$out PipeIn_OC_30
    INTERFACECONNECT funnel$out result$in PipeIn_OC_30
    FIELD Bit(1) busy
    FIELD Bit(1) busy_delay
    FIELD Fifo1 fifoA
    FIELD Fifo1 fifoB
    FIELD Fifo1 fifoC
    FIELD Fifo1 fifoD
    FIELD Out2In iA
    FIELD Out2In iB
    FIELD Out2In iC
    FIELD Out2In iD
    FIELD Bit(2) index
    FIELD Funnel(funnelWidth=4) funnel
    FIELD Fifo1 result
    METHOD/Action request$say__ENA ( Bit(32) v ) if ((((busy) != (0)) ^ (1))) {
        PRINTF :printf{"request.say %x index %d\n",request$say$v,index}
        CALL/Action ((index) == (0)):fifoA$in$enq__ENA{request$say$v}
        CALL/Action ((index) == (1)):fifoB$in$enq__ENA{request$say$v}
        CALL/Action ((index) == (2)):fifoC$in$enq__ENA{request$say$v}
        CALL/Action ((index) == (3)):fifoD$in$enq__ENA{request$say$v}
        STORE :index = (index) + (1)
    }
    METHOD/Rule/Action RULE$respond_rule__ENA {
        PRINTF :printf{"[%s:%d] index %d\n","RULE$respond_rule_block_invoke",75,index}
        CALL :result$out$first{}
        CALL/Action :indication$heard__ENA{result$out$first}
        CALL/Action :result$out$deq__ENA{}
    }
}
MODULE Out2In Out2InIfc {
    METHOD/Rule/Action RULE$copyRule__ENA {
        CALL :in$first{}
        CALL/Action :out$enq__ENA{in$first}
        CALL/Action :in$deq__ENA{}
    }
}
