STRUCT NOCDataH  {
    FILE atomicc_OC_h
    FIELD Bit(16) length
    FIELD Bit(128) data
}
INTERFACE AsyncControlIfc  {
    FILE atomicc_OC_h
    FIELD/input Bit(1) CLK
    FIELD/input Bit(1) nRST
    FIELD/input Bit(1) start
    FIELD/input Bit(1) end
    FIELD/input Bit(1) clear
    FIELD/output Bit(1) out
    FIELD/output Bit(1) done
}
INTERFACE BscanIfc(width=32)  {
    FILE bscan_OC_h
    INTERFACE PipeIn(width=32) toBscan
    INTERFACE/Ptr PipeIn(width=32) fromBscan
}
INTERFACE BscanLocalIfc(width=32)  {
    FILE bscan_OC_cpp
    FIELD/input Bit(1) CLK
    FIELD/input Bit(1) nRST
    FIELD/input Bit(1) capture
    FIELD/input Bit(1) shift
    FIELD/input Bit(1) update
    FIELD/output Bit(1) capture_out
    FIELD/output Bit(1) TDO
    FIELD/input Bit(1) TDI
    FIELD/input Bit(32) toBscan
    FIELD/output Bit(32) fromBscan
}
INTERFACE MBSCANE2IFC  {
    FILE _OC__OC__PC_xilinx_PC_VBscanE2_OC_h
    FIELD/output Bit(1) CAPTURE
    FIELD/Ptr/parameter Bit(8) DISABLE_JTAG
    FIELD/output Bit(1) DRCK
    FIELD/parameter Bit(32) JTAG_CHAIN
    FIELD/output Bit(1) RESET
    FIELD/output Bit(1) RUNTEST
    FIELD/output Bit(1) SEL
    FIELD/output Bit(1) SHIFT
    FIELD/output Bit(1) TCK
    FIELD/output Bit(1) TDI
    FIELD/input Bit(1) TDO
    FIELD/output Bit(1) TMS
    FIELD/output Bit(1) UPDATE
}
INTERFACE MbufgBUFG  {
    FILE _OC__OC__PC_xilinx_PC_VBUFG_OC_h
    FIELD/input Bit(1) I
    FIELD/output Bit(1) O
}
INTERFACE PipeIn(width=32)  {
    FILE atomicc_OC_h
    METHOD/Action enq__ENA ( Bit(width) v )
}
INTERFACE SelectIndexIfc(funnelWidth=20,width=14)  {
    FILE atomicc_OC_h
    FIELD Bit(14) out
    FIELD/Ptr/Count funnelWidth  Bit(14) in
    FIELD Bit(5) index
}
INTERFACE SyncFFIfc  {
    FILE syncFF_OC_h
    FIELD/input Bit(1) CLK
    FIELD/input Bit(1) nRST
    FIELD/output Bit(1) out
    FIELD/input Bit(1) in
}
EMODULE AsyncControl AsyncControlIfc {
    FILE atomicc_OC_h
}
EMODULE BSCANE2 MBSCANE2IFC {
    FILE _OC__OC__PC_xilinx_PC_VBscanE2_OC_h
}
EMODULE BUFG MbufgBUFG {
    FILE _OC__OC__PC_xilinx_PC_VBUFG_OC_h
}
EMODULE Dummy PipeIn(width=32) {
    FILE atomicc_OC_h
}
EMODULE/Verilog SelectIndex(funnelWidth=20,width=14) SelectIndexIfc(funnelWidth=20,width=14) {
    FILE atomicc_OC_h
}
EMODULE SyncFF SyncFFIfc {
    FILE syncFF_OC_h
}
MODULE Bscan(id=99,width=32) BscanIfc(width=32) {
    FILE bscan_OC_cpp
    FIELD BSCANE2 bscan
    PARAMS bscan JTAG_CHAIN=id
    FIELD BUFG bscan_mytck
    FIELD BscanLocal(width=32) localBscan
    FIELD SyncFF updateF
    FIELD SyncFF captureF
    METHOD/Action toBscan$enq__ENA ( Bit(width) v ) if (((captureF$out) != (0))) {
        LET Bit(32) :localBscan$toBscan = toBscan$enq$v
    }
    METHOD/Rule/Action RULE$updateRule__ENA if (((updateF$out) != (0))) {
        CALL/Action :fromBscan$enq__ENA{localBscan$fromBscan}
    }
    METHOD/Rule/Action RULE$init__ENA {
        LET Bit(1) :bscan_mytck$I = bscan$TCK
        LET Bit(1) :localBscan$CLK = bscan_mytck$O
        LET Bit(1) :localBscan$nRST = __defaultnReset
        LET Bit(1) :localBscan$TDI = bscan$TDI
        LET Bit(1) :localBscan$TDO = bscan$TDO
        LET Bit(1) :localBscan$capture = ((bscan$SEL) & (bscan$CAPTURE)) != (0)
        LET Bit(1) :localBscan$shift = ((bscan$SEL) & (bscan$SHIFT)) != (0)
        LET Bit(1) :localBscan$update = ((bscan$SEL) & (bscan$UPDATE)) != (0)
        LET Bit(1) :updateF$CLK = __defaultClock
        LET Bit(1) :updateF$nRST = __defaultnReset
        LET Bit(1) :updateF$in = localBscan$update
        LET Bit(1) :captureF$CLK = __defaultClock
        LET Bit(1) :captureF$nRST = __defaultnReset
        LET Bit(1) :captureF$in = localBscan$capture_out
    }
}
MODULE BscanLocal(width=32) BscanLocalIfc(width=32) {
    FILE bscan_OC_cpp
    FIELD Bit(32) shiftReg
    FIELD Bit(1) wasCaptured
    METHOD/Rule/Action RULE$shiftRule__ENA if ((shift)) {
        STORE :shiftReg = __bitconcat{TDI,__bitsubstr{shiftReg,(32) - (1),1}}
    }
    METHOD/Rule/Action RULE$init__ENA {
        LET Bit(1) :TDO = __bitsubstr{shiftReg,0,0}
        STORE ((capture) & ((wasCaptured) ^ (1))):shiftReg = toBscan
        LET Bit(32) :fromBscan = shiftReg
        STORE :wasCaptured = capture
        LET Bit(1) :capture_out = wasCaptured
    }
}
