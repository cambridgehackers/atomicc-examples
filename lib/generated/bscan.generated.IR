STRUCT NOCDataH  {
    FILE atomicc_OC_h
    FIELD Bit(16) length
    FIELD Bit(128) data
}
INTERFACE BscanIfc(width=32)  {
    FILE bscan_OC_h
    INTERFACE PipeIn(width=32) toBscan
    INTERFACE/Ptr PipeIn(width=32) fromBscan
}
INTERFACE BscanLocalIfc(width=32)  {
    FILE bscan_OC_cpp
    FIELD/input Bit(1) CLK
    FIELD/input Bit(1) nRST
    FIELD/input Bit(1) capture
    FIELD/input Bit(1) shift
    FIELD/input Bit(1) update
    FIELD/output Bit(1) TDO
    FIELD/input Bit(1) TDI
    INTERFACE PipeInSync(width=32) toBscan
    INTERFACE/Ptr PipeInSync(width=32) fromBscan
}
INTERFACE MBSCANE2IFC  {
    FILE _OC__OC__PC_xilinx_PC_VBscanE2_OC_h
    FIELD/output Bit(1) CAPTURE
    FIELD/Ptr/parameter Bit(8) DISABLE_JTAG
    FIELD/output Bit(1) DRCK
    FIELD/parameter Bit(32) JTAG_CHAIN
    FIELD/output Bit(1) RESET
    FIELD/output Bit(1) RUNTEST
    FIELD/output Bit(1) SEL
    FIELD/output Bit(1) SHIFT
    FIELD/output Bit(1) TCK
    FIELD/output Bit(1) TDI
    FIELD/input Bit(1) TDO
    FIELD/output Bit(1) TMS
    FIELD/output Bit(1) UPDATE
}
INTERFACE MbufgBUFG  {
    FILE _OC__OC__PC_xilinx_PC_VBUFG_OC_h
    FIELD/input Bit(1) I
    FIELD/output Bit(1) O
}
INTERFACE PipeIn(width=3)  {
    FILE atomicc_OC_h
    METHOD/Action enq__ENA ( Bit(width) v )
}
INTERFACE PipeIn(width=32)  {
    FILE atomicc_OC_h
    METHOD/Action enq__ENA ( Bit(width) v )
}
INTERFACE PipeInSync(width=3)  {
    FILE atomicc_OC_h
    INTERFACE PipeIn(width=3) _
}
INTERFACE PipeInSync(width=32)  {
    FILE atomicc_OC_h
    INTERFACE PipeIn(width=32) _
}
EMODULE BSCANE2 MBSCANE2IFC {
    FILE _OC__OC__PC_xilinx_PC_VBscanE2_OC_h
}
EMODULE BUFG MbufgBUFG {
    FILE _OC__OC__PC_xilinx_PC_VBUFG_OC_h
}
EMODULE Dummy PipeIn(width=32) {
    FILE atomicc_OC_h
}
MODULE Bscan(id=3,width=32) BscanIfc(width=32) {
    FILE bscan_OC_cpp
    INTERFACECONNECT readBscan localBscan$fromBscan PipeInSync(width=32)
    FIELD BSCANE2 bscan
    PARAMS bscan <JTAG_CHAIN:id>
    FIELD BUFG tckbuf
    FIELD BscanLocal(width=32) localBscan
    INTERFACE PipeInSync(width=32) readBscan
    METHOD/Action toBscan$enq__ENA ( Bit(width) v ) {
        CALL/Action :localBscan$toBscan$enq__ENA{toBscan$enq$v}
    }
    METHOD/Action readBscan$enq__ENA ( Bit(width) v ) {
        CALL/Action :fromBscan$enq__ENA{readBscan$enq$v}
    }
    METHOD/Rule/Action RULE$init__ENA {
        LET Bit(1) :tckbuf$I = bscan$TCK
        LET Bit(1) :localBscan$CLK = tckbuf$O
        LET Bit(1) :localBscan$nRST = __defaultnReset
        LET Bit(1) :localBscan$TDI = bscan$TDI
        LET Bit(1) :localBscan$TDO = bscan$TDO
        LET Bit(1) :localBscan$capture = ((bscan$SEL) & (bscan$CAPTURE)) != (0)
        LET Bit(1) :localBscan$shift = ((bscan$SEL) & (bscan$SHIFT)) != (0)
        LET Bit(1) :localBscan$update = ((bscan$SEL) & (bscan$UPDATE)) != (0)
    }
}
MODULE BscanLocal(width=32) BscanLocalIfc(width=32) {
    FILE bscan_OC_cpp
    FIELD Bit(32) shiftReg
    FIELD Bit(1) notReady
    METHOD/Action toBscan$enq__ENA ( Bit(width) v ) if (((capture) & ((notReady) ^ (1)))) {
        STORE :shiftReg = toBscan$enq$v
        STORE :notReady = 1
    }
    METHOD/Rule/Action RULE$shiftRule__ENA if ((shift)) {
        STORE :shiftReg = __bitconcat{TDI,__bitsubstr{shiftReg,(32) - (1),1}}
    }
    METHOD/Rule/Action RULE$updateRule__ENA if ((update)) {
        CALL/Action :fromBscan$enq__ENA{shiftReg}
        STORE :notReady = 0
    }
    METHOD/Rule/Action RULE$init__ENA {
        LET Bit(1) :TDO = __bitsubstr{shiftReg,0,0}
    }
}
