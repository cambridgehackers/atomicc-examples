STRUCT NOCData  {
    FIELD Bit(128) data
}
STRUCT NOCDataH  {
    FIELD Bit(16) length
    FIELD Bit(128) data
}
INTERFACE AfB(width=32)  {
    INTERFACE PipeInB(width=32) in
    INTERFACE/Ptr PipeInH out
}
INTERFACE AtB(width=32)  {
    INTERFACE PipeInH in
    INTERFACE/Ptr PipeInB(width=32) out
}
INTERFACE PipeIn  {
    METHOD/Action enq__ENA ( NOCDataH v )
}
INTERFACE PipeInB(width=32)  {
    METHOD/Action enq__ENA ( Bit(width) v , Bit(1) last )
}
INTERFACE PipeInH  {
    METHOD/Action enq__ENA ( NOCData v , Bit(16) length )
}
INTERFACE UserTopIfc  {
    INTERFACE PipeInB(width=32) write
    INTERFACE/Ptr PipeInB(width=32) read
}
INTERFACE l_topIfc  {
    INTERFACE PipeIn request
    INTERFACE/Ptr PipeIn indication
}
EMODULE AdapterFromBus(width=32) AfB(width=32) {
}
EMODULE AdapterToBus(width=32) AtB(width=32) {
}
EMODULE UserTop UserTopIfc {
}
EMODULE l_top l_topIfc {
}
MODULE UserTop UserTopIfc {
    INTERFACECONNECT write wadapter_0$in PipeInB(width=32)
    INTERFACECONNECT read radapter_0$out PipeInB(width=32)
    INTERFACECONNECT wad wadapter_0$out PipeInH
    INTERFACECONNECT indication ctop$indication PipeIn
    FIELD AdapterToBus(width=32) radapter_0
    FIELD AdapterFromBus(width=32) wadapter_0
    FIELD l_top ctop
    INTERFACE PipeInH wad
    INTERFACE PipeIn indication
    METHOD/Action wad$enq__ENA ( NOCData v , Bit(16) length ) {
        ALLOCA NOCDataH wad$enq$agg_2e_tmp
        PRINTF :printf{"reqConnect.enq v %llx length %lx\n",wad$enq$v,wad$enq$length}
        LET Bit(32) :wad$enq$agg_2e_tmp = __bitconcat{wad$enq$v,wad$enq$length}
        CALL/Action :ctop$request$enq__ENA{wad$enq$agg_2e_tmp}
    }
    METHOD/Action indication$enq__ENA ( NOCDataH v ) {
        ALLOCA NOCData indication$enq$agg_2e_tmp
        ALLOCA Bit(16) indication$enq$len
        ALLOCA Bit(16) indication$enq$port
        ALLOCA Bit(16) indication$enq$total_len
        ALLOCA Bit(128) indication$enq$vint
        ALLOCA Bit(144) indication$enq$vtemp
        LET Bit(144) :indication$enq$vtemp = indication$enq$v
        LET Bit(16) :indication$enq$total_len = __bitsubstr{indication$enq$vtemp,(16) - (1),0}
        LET Bit(128) :indication$enq$vint = __bitsubstr{indication$enq$vtemp,((144) - (16)) - (1),16}
        LET Bit(16) :indication$enq$len = (__bitsubstr{indication$enq$vint,15,0}) - (1)
        LET Bit(16) :indication$enq$port = 5
        PRINTF :printf{"indConnect.enq v %llx len %lx\n",indication$enq$vint,indication$enq$len}
        LET Bit(128) :indication$enq$agg_2e_tmp = indication$enq$vint
        CALL/Action :radapter_0$in$enq__ENA{indication$enq$agg_2e_tmp,indication$enq$total_len}
    }
}
