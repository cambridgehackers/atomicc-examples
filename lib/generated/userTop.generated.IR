STRUCT NOCData  {
    FIELD Bit(128) data
}
INTERFACE AfB  {
    INTERFACE PipeInB in
    INTERFACE/Ptr PipeInH out
}
INTERFACE AtB  {
    INTERFACE PipeInH in
    INTERFACE/Ptr PipeInB out
}
INTERFACE PipeIn  {
    METHOD/Action enq__ENA ( NOCData v )
}
INTERFACE PipeInB  {
    METHOD/Action enq__ENA ( Bit(32) v , Bit(16) length )
}
INTERFACE PipeInH  {
    METHOD/Action enq__ENA ( NOCData v , Bit(16) length )
}
INTERFACE UserTopIfc  {
    INTERFACE PipeInB write
    INTERFACE/Ptr PipeInB read
}
INTERFACE l_topIfc  {
    INTERFACE PipeIn request
    INTERFACE/Ptr PipeInH indication
}
EMODULE AdapterFromBus AfB {
}
EMODULE AdapterToBus AtB {
}
EMODULE UserTop UserTopIfc {
}
EMODULE l_top l_topIfc {
}
MODULE UserTop UserTopIfc {
    INTERFACECONNECT write wadapter_0$in PipeInB
    INTERFACECONNECT read radapter_0$out PipeInB
    INTERFACECONNECT wad wadapter_0$out PipeInH
    INTERFACECONNECT indication ctop$indication PipeInH
    FIELD AdapterToBus radapter_0
    FIELD AdapterFromBus wadapter_0
    FIELD l_top ctop
    INTERFACE PipeInH wad
    INTERFACE PipeInH indication
    METHOD/Action wad$enq__ENA ( NOCData v , Bit(16) length ) {
        PRINTF :printf{"reqConnect.enq v %llx length %lx\n",wad$enq$v,wad$enq$length}
        CALL/Action :ctop$request$enq__ENA{wad$enq$v}
    }
    METHOD/Action indication$enq__ENA ( NOCData v , Bit(16) length ) {
        ALLOCA Bit(16) indication$enq$len
        ALLOCA Bit(16) indication$enq$port
        ALLOCA Bit(128) indication$enq$vint
        LET Bit(128) :indication$enq$vint = indication$enq$v
        LET Bit(16) :indication$enq$len = (__bitsubstr{indication$enq$vint,15,0}) - (1)
        LET Bit(16) :indication$enq$port = 5
        PRINTF :printf{"indConnect.enq v %llx len %lx\n",indication$enq$v,indication$enq$len}
        CALL/Action :radapter_0$in$enq__ENA{indication$enq$v,indication$enq$length}
    }
}
