STRUCT NOCDataH  {
    FILE atomicc_OC_h
    FIELD Bit(16) length
    FIELD Bit(128) data
}
INTERFACE AsyncControlIfc  {
    FILE atomicc_OC_h
    FIELD/input Bit(1) CLK
    FIELD/input Bit(1) nRST
    FIELD/input Bit(1) start
    FIELD/input Bit(1) ack
    FIELD/input Bit(1) clear
    FIELD/output Bit(1) out
    FIELD/output Bit(1) done
}
INTERFACE ConfigCounterIfc(count_sz=10)  {
    FILE configCounter_OC_cpp
    METHOD/Action decrement__ENA ( Bit(count_sz) v )
    METHOD/Action maybeDecrement ( Bit(10) v ) Bit(1)
    METHOD/Action increment__ENA ( Bit(count_sz) v )
    METHOD read Bit(count_sz)
    METHOD positive Bit(1)
}
INTERFACE PipeIn(width=32)  {
    FILE atomicc_OC_h
    METHOD/Action enq__ENA ( Bit(width) v )
}
INTERFACE SelectIndexIfc(funnelWidth=20,width=14)  {
    FILE atomicc_OC_h
    FIELD Bit(14) out
    FIELD/Ptr/Count funnelWidth  Bit(14) in
    FIELD Bit(5) index
}
EMODULE AsyncControl AsyncControlIfc {
    FILE atomicc_OC_h
}
EMODULE Dummy PipeIn(width=32) {
    FILE atomicc_OC_h
}
EMODULE/Verilog SelectIndex(funnelWidth=20,width=14) SelectIndexIfc(funnelWidth=20,width=14) {
    FILE atomicc_OC_h
}
MODULE ConfigCounter(count_sz=10) ConfigCounterIfc(count_sz=10) {
    FILE configCounter_OC_cpp
    FIELD/shared Bit(10) inc_wire
    FIELD/shared Bit(10) dec_wire
    FIELD Bit(10) cnt
    FIELD Bit(1) positive_reg
    METHOD/Action decrement__ENA ( Bit(count_sz) v ) {
        LET Bit(10) :dec_wire = decrement$v
    }
    METHOD/Action maybeDecrement ( Bit(10) v ) Bit(1) = ((_maybeDecrement$retval)) {
        ALLOCA Bit(1) _maybeDecrement$retval
        LET Bit(10) ((cnt) >= (maybeDecrement$v)):dec_wire = maybeDecrement$v
        LET Bit(1) ((cnt) >= (maybeDecrement$v)):_maybeDecrement$retval = 1
        LET Bit(1) !((cnt) >= (maybeDecrement$v)):_maybeDecrement$retval = 0
    }
    METHOD/Action increment__ENA ( Bit(count_sz) v ) {
        LET Bit(10) :inc_wire = increment$v
    }
    METHOD read Bit(count_sz) = ((cnt))
    METHOD positive Bit(1) = ((positive_reg))
    METHOD/Rule/Action RULE$react__ENA {
        ALLOCA Bit(10) _RULE$react$new_count
        LET Bit(10) :_RULE$react$new_count = ((cnt) + (inc_wire)) - (dec_wire)
        STORE :cnt = _RULE$react$new_count
        STORE :positive_reg = (_RULE$react$new_count) > (0)
    }
}
