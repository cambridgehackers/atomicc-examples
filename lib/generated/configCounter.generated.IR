INTERFACE ConfigCounterIfc(count_sz=10) {
    METHOD/Action decrement__ENA ( Bit(10) v )
    METHOD/Action increment__ENA ( Bit(10) v )
    METHOD/Action maybeDecrement ( Bit(10) v ) Bit(1)
    METHOD positive Bit(1)
    METHOD read Bit(10)
}
MODULE ConfigCounter(count_sz=10) {
    INTERFACE ConfigCounterIfc(count_sz=10) ifc
    FIELD/shared Bit(10) inc_wire
    FIELD/shared Bit(10) dec_wire
    FIELD Bit(10) cnt
    FIELD Bit(1) positive_reg
    METHOD/Rule/Action RULE$react__ENA {
        ALLOCA Bit(10) RULE$react__ENA$new_count
        LET Bit(10) :RULE$react__ENA$new_count = ((cnt) + (inc_wire)) - (dec_wire)
        STORE :cnt = RULE$react__ENA$new_count
        STORE :positive_reg = (RULE$react__ENA$new_count) > (0)
    }
    METHOD/Action ifc$decrement__ENA ( Bit(10) v ) {
        STORE :dec_wire = ifc$decrement$v
    }
    METHOD/Action ifc$increment__ENA ( Bit(10) v ) {
        STORE :inc_wire = ifc$increment$v
    }
    METHOD/Action ifc$maybeDecrement ( Bit(10) v ) Bit(1) = ((ifc$maybeDecrement$retval)) {
        ALLOCA Bit(1) ifc$maybeDecrement$retval
        STORE ((cnt) >= (ifc$maybeDecr$v)):dec_wire = ifc$maybeDecr$v
        LET Bit(1) ((cnt) >= (ifc$maybeDecr$v)):ifc$maybeDecrement$retval = 1
        LET Bit(1) (((cnt) >= (ifc$maybeDecr$v)) ^ 1):ifc$maybeDecrement$retval = 0
    }
    METHOD ifc$positive Bit(1) = ((positive_reg))
    METHOD ifc$read Bit(10) = ((cnt))
}
