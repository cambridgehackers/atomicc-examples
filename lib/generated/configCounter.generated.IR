STRUCT NOCDataH  {
    FIELD Bit(16) length
    FIELD Bit(128) data
}
INTERFACE ConfigCounterIfc(count_sz=10)  {
    METHOD/Action decrement__ENA ( Bit(count_sz) v )
    METHOD/Action maybeDecrement ( Bit(10) v ) Bit(1)
    METHOD/Action increment__ENA ( Bit(count_sz) v )
    METHOD read Bit(count_sz)
    METHOD positive Bit(1)
}
INTERFACE PipeIn  {
    METHOD/Action enq__ENA ( NOCDataH v )
}
INTERFACE l_topIfc  {
    INTERFACE PipeIn request
    INTERFACE/Ptr PipeIn indication
}
EMODULE l_top l_topIfc {
}
MODULE ConfigCounter(count_sz=10) ConfigCounterIfc(count_sz=10) {
    FIELD/shared Bit(10) inc_wire
    FIELD/shared Bit(10) dec_wire
    FIELD Bit(10) cnt
    FIELD Bit(1) positive_reg
    METHOD/Action decrement__ENA ( Bit(count_sz) v ) {
        STORE :dec_wire = decrement$v
    }
    METHOD/Action maybeDecrement ( Bit(10) v ) Bit(1) = ((maybeDecrement$retval)) {
        ALLOCA Bit(1) maybeDecrement$retval
        STORE ((cnt) >= (maybeDecrement$v)):dec_wire = maybeDecrement$v
        LET Bit(1) ((cnt) >= (maybeDecrement$v)):maybeDecrement$retval = 1
        LET Bit(1) (((cnt) >= (maybeDecrement$v)) ^ 1):maybeDecrement$retval = 0
    }
    METHOD/Action increment__ENA ( Bit(count_sz) v ) {
        STORE :inc_wire = increment$v
    }
    METHOD read Bit(count_sz) = ((cnt))
    METHOD positive Bit(1) = ((positive_reg))
    METHOD/Rule/Action RULE$react__ENA {
        ALLOCA Bit(count_sz) RULE$react$new_count
        LET Bit(10) :RULE$react$new_count = ((cnt) + (inc_wire)) - (dec_wire)
        STORE :cnt = RULE$react$new_count
        STORE :positive_reg = (RULE$react$new_count) > (0)
    }
}
