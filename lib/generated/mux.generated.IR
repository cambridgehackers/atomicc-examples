STRUCT NOCData {
    FIELD Bit(128) data
}
INTERFACE PipeIn {
    METHOD/Action enq__ENA ( NOCData v )
}
INTERFACE PipeIn.1 {
    METHOD/Action enq__ENA ( Bit(128) v )
}
INTERFACE PipeIn.4 {
    METHOD/Action enq__ENA ( Bit(16) v )
}
INTERFACE PipeIn.7 {
    METHOD/Action enq__ENA ( Bit(16) v )
}
INTERFACE PipeInH {
    METHOD/Action enq__ENA ( NOCData v , Bit(16) length )
}
INTERFACE PipeOut {
    METHOD/Action deq__ENA
    METHOD first NOCData
}
INTERFACE PipeOut.2 {
    METHOD/Action deq__ENA
    METHOD first Bit(128)
}
INTERFACE PipeOut.5 {
    METHOD/Action deq__ENA
    METHOD first Bit(16)
}
INTERFACE PipeOut.8 {
    METHOD/Action deq__ENA
    METHOD first Bit(16)
}
EMODULE Fifo {
    INTERFACE PipeIn in
    INTERFACE PipeOut out
}
EMODULE Fifo.0 {
    INTERFACE PipeIn.1 in
    INTERFACE PipeOut.2 out
}
EMODULE Fifo.3 {
    INTERFACE PipeIn.4 in
    INTERFACE PipeOut.5 out
}
EMODULE Fifo.6 {
    INTERFACE PipeIn.7 in
    INTERFACE PipeOut.8 out
}
EMODULE Fifo1Base(width=128) {
    INTERFACE PipeIn.1 in
    INTERFACE PipeOut.2 out
}
EMODULE Fifo1Base(width=16) {
    INTERFACE PipeIn.7 in
    INTERFACE PipeOut.8 out
}
EMODULE MuxPipe {
    INTERFACE PipeInH in
    INTERFACE PipeInH forward
    INTERFACE/Ptr PipeInH out
}
MODULE Fifo1 {
    INTERFACE PipeIn in
    INTERFACE PipeOut out
    FIELD Fifo1Base(width=128) fifo
    METHOD/Action in$enq__ENA ( NOCData v ) {
        CALL/Action :fifo$in$enq__ENA{in$enq$v}
    }
    METHOD/Action out$deq__ENA {
        CALL/Action :fifo$out$deq__ENA{}
    }
    METHOD out$first NOCData = ((out$first$retval)) {
        ALLOCA NOCData out$first$retval
        CALL :fifo$out$first{}
        LET Bit(128) :out$first$retval = fifo$out$first
    }
}
MODULE Fifo1.9 {
    INTERFACE PipeIn.4 in
    INTERFACE PipeOut.5 out
    FIELD Fifo1Base(width=16) fifo
    METHOD/Action in$enq__ENA ( Bit(16) v ) {
        CALL/Action :fifo$in$enq__ENA{in$enq$v}
    }
    METHOD/Action out$deq__ENA {
        CALL/Action :fifo$out$deq__ENA{}
    }
    METHOD out$first Bit(16) = ((fifo$out$first)) {
        CALL :fifo$out$first{}
    }
}
MODULE MuxPipe {
    INTERFACE PipeInH in
    INTERFACE PipeInH forward
    INTERFACE/Ptr PipeInH out
    FIELD Fifo1 forwardFifo
    FIELD Fifo1.9 forwardFifol
    METHOD/Action in$enq__ENA ( NOCData v , Bit(16) length ) if ((((forwardFifo$out$first__RDY) != (0)) ^ (1))) {
        CALL/Action :out$enq__ENA{in$enq$v,in$enq$length}
    }
    METHOD/Action forward$enq__ENA ( NOCData v , Bit(16) length ) {
        CALL/Action :forwardFifo$in$enq__ENA{forward$enq$v}
        CALL/Action :forwardFifol$in$enq__ENA{forward$enq$length}
    }
    METHOD/Rule/Action RULE$fifoRule__ENA if ((((in$enq__ENA) != (0)) ^ (1))) {
        ALLOCA NOCData RULE$fifoRule$agg_2e_tmp
        CALL :forwardFifo$out$first{}
        LET NOCData :RULE$fifoRule$agg_2e_tmp = forwardFifo$out$first
        CALL :forwardFifol$out$first{}
        CALL/Action :out$enq__ENA{RULE$fifoRule$agg_2e_tmp,forwardFifol$out$first}
        CALL/Action :forwardFifo$out$deq__ENA{}
        CALL/Action :forwardFifol$out$deq__ENA{}
    }
}
