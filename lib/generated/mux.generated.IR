EMODULE l_struct_OC_NOCData {
    FIELD/Count 4  INTEGER_32 data
}
EMODULE l_ainterface_OC_PipeIn {
    METHOD enq__ENA ( l_struct_OC_NOCData v )
}
EMODULE l_ainterface_OC_PipeInH {
    METHOD enq__ENA ( l_struct_OC_NOCData v , INTEGER_16 length )
}
EMODULE l_ainterface_OC_PipeIn_OC_1 {
    METHOD enq__ENA ( INTEGER_128 v )
}
EMODULE l_ainterface_OC_PipeIn_OC_4 {
    METHOD enq__ENA ( INTEGER_16 v )
}
EMODULE l_ainterface_OC_PipeIn_OC_7 {
    METHOD enq__ENA ( INTEGER_16 v )
}
EMODULE l_ainterface_OC_PipeOut {
    METHOD deq__ENA
    METHOD first l_struct_OC_NOCData
}
EMODULE l_ainterface_OC_PipeOut_OC_2 {
    METHOD deq__ENA
    METHOD first INTEGER_128
}
EMODULE l_ainterface_OC_PipeOut_OC_5 {
    METHOD deq__ENA
    METHOD first INTEGER_16
}
EMODULE l_ainterface_OC_PipeOut_OC_8 {
    METHOD deq__ENA
    METHOD first INTEGER_16
}
EMODULE Fifo {
    INTERFACE l_ainterface_OC_PipeIn in
    INTERFACE l_ainterface_OC_PipeOut out
}
EMODULE Fifo1Base$__PARAM__$width$128 {
    INTERFACE l_ainterface_OC_PipeIn_OC_1 in
    INTERFACE l_ainterface_OC_PipeOut_OC_2 out
}
EMODULE Fifo1Base$__PARAM__$width$16 {
    INTERFACE l_ainterface_OC_PipeIn_OC_7 in
    INTERFACE l_ainterface_OC_PipeOut_OC_8 out
}
EMODULE Fifo_OC_0 {
    INTERFACE l_ainterface_OC_PipeIn_OC_1 in
    INTERFACE l_ainterface_OC_PipeOut_OC_2 out
}
EMODULE Fifo_OC_3 {
    INTERFACE l_ainterface_OC_PipeIn_OC_4 in
    INTERFACE l_ainterface_OC_PipeOut_OC_5 out
}
EMODULE Fifo_OC_6 {
    INTERFACE l_ainterface_OC_PipeIn_OC_7 in
    INTERFACE l_ainterface_OC_PipeOut_OC_8 out
}
EMODULE MuxPipe {
    INTERFACE l_ainterface_OC_PipeInH in
    INTERFACE l_ainterface_OC_PipeInH forward
    INTERFACE/Ptr l_ainterface_OC_PipeInH out
}
MODULE Fifo1 {
    INTERFACE l_ainterface_OC_PipeIn in
    INTERFACE l_ainterface_OC_PipeOut out
    FIELD Fifo1Base$__PARAM__$width$128 fifo
    METHOD in$enq__ENA ( l_struct_OC_NOCData v ) {
        CALL/Action :fifo$in$enq__ENA{in$enq$v}
    }
    METHOD out$deq__ENA {
        CALL/Action :fifo$out$deq__ENA{}
    }
    METHOD out$first l_struct_OC_NOCData = ((out$first$retval)) {
        ALLOCA l_struct_OC_NOCData out$first$retval
        CALL :fifo$out$first{}
        LET INTEGER_128 :out$first$retval = fifo$out$first
    }
}
MODULE Fifo1_OC_9 {
    INTERFACE l_ainterface_OC_PipeIn_OC_4 in
    INTERFACE l_ainterface_OC_PipeOut_OC_5 out
    FIELD Fifo1Base$__PARAM__$width$16 fifo
    METHOD in$enq__ENA ( INTEGER_16 v ) {
        CALL/Action :fifo$in$enq__ENA{in$enq$v}
    }
    METHOD out$deq__ENA {
        CALL/Action :fifo$out$deq__ENA{}
    }
    METHOD out$first INTEGER_16 = ((fifo$out$first)) {
        CALL :fifo$out$first{}
    }
}
MODULE MuxPipe {
    INTERFACE l_ainterface_OC_PipeInH in
    INTERFACE l_ainterface_OC_PipeInH forward
    INTERFACE/Ptr l_ainterface_OC_PipeInH out
    FIELD Fifo1 forwardFifo
    FIELD Fifo1_OC_9 forwardFifol
    METHOD/Rule RULE$fifoRule__ENA {
        ALLOCA l_struct_OC_NOCData RULE$fifoRule__ENA$agg_2e_tmp
        CALL :forwardFifo$out$first{}
        LET l_struct_OC_NOCData :RULE$fifoRule__ENA$agg_2e_tmp = forwardFifo$out$first
        CALL :forwardFifol$out$first{}
        CALL/Action :out$enq__ENA{RULE$fifoRule__ENA$agg_2e_tmp,forwardFifol$out$first}
        CALL/Action :forwardFifo$out$deq__ENA{}
        CALL/Action :forwardFifol$out$deq__ENA{}
    }
    METHOD forward$enq__ENA ( l_struct_OC_NOCData v , INTEGER_16 length ) {
        CALL/Action :forwardFifo$in$enq__ENA{forward$enq$v}
        CALL/Action :forwardFifol$in$enq__ENA{forward$enq$length}
    }
    METHOD in$enq__ENA ( l_struct_OC_NOCData v , INTEGER_16 length ) {
        CALL/Action :out$enq__ENA{in$enq$v,in$enq$length}
    }
}
