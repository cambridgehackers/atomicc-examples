STRUCT NOCDataH  {
    FILE atomicc_OC_h
    FIELD Bit(16) length
    FIELD Bit(128) data
}
INTERFACE Fifo(width=144)  {
    FILE fifo_OC_h
    INTERFACE PipeIn(width=144) in
    INTERFACE PipeOut(width=144) out
}
INTERFACE MuxPipeIfc  {
    FILE mux_OC_h
    INTERFACE PipeIn(width=144) in
    INTERFACE PipeIn(width=144) forward
    INTERFACE/Ptr PipeIn(width=144) out
}
INTERFACE PipeIn(width=32)  {
    FILE atomicc_OC_h
    METHOD/Action enq__ENA ( Bit(width) v )
}
INTERFACE PipeOut(width=144)  {
    FILE atomicc_OC_h
    METHOD/Action deq__ENA
    METHOD first Bit(width)
}
INTERFACE SelectIndexIfc(funnelWidth=20,width=14)  {
    FILE atomicc_OC_h
    FIELD Bit(14) out
    FIELD/Ptr/Count funnelWidth  Bit(14) in
    FIELD Bit(5) index
}
EMODULE Dummy PipeIn(width=32) {
    FILE atomicc_OC_h
}
EMODULE Fifo1Base(width=144) Fifo(width=144) {
    FILE fifo_OC_h
}
EMODULE MuxPipe MuxPipeIfc {
    FILE mux_OC_h
}
EMODULE/Verilog SelectIndex(funnelWidth=20,width=14) SelectIndexIfc(funnelWidth=20,width=14) {
    FILE atomicc_OC_h
}
MODULE Fifo1(width=144) Fifo(width=144) {
    FILE fifo_OC_h
    FIELD Fifo1Base(width=144) fifo
    METHOD/Action in$enq__ENA ( NOCDataH v ) {
        CALL/Action :fifo$in$enq__ENA{in$enq$v}
    }
    METHOD/Action out$deq__ENA {
        CALL/Action :fifo$out$deq__ENA{}
    }
    METHOD out$first NOCDataH = ((fifo$out$first)) {
        CALL :fifo$out$first{}
    }
}
MODULE MuxPipe MuxPipeIfc {
    FILE mux_OC_cpp
    FIELD Fifo1(width=144) forwardFifo
    METHOD/Action in$enq__ENA ( NOCDataH v ) if ((((forwardFifo$out$first__RDY) != (0)) ^ (1))) {
        CALL/Action :out$enq__ENA{in$enq$v}
    }
    METHOD/Action forward$enq__ENA ( NOCDataH v ) {
        CALL/Action :forwardFifo$in$enq__ENA{forward$enq$v}
    }
    METHOD/Rule/Action RULE$fifoRule__ENA if ((((in$enq__ENA) != (0)) ^ (1))) {
        ALLOCA NOCDataH _RULE$fifoRule$agg_2e_tmp
        CALL :forwardFifo$out$first{}
        LET NOCDataH :_RULE$fifoRule$agg_2e_tmp = forwardFifo$out$first
        CALL/Action :out$enq__ENA{_RULE$fifoRule$agg_2e_tmp}
        CALL/Action :forwardFifo$out$deq__ENA{}
    }
}
