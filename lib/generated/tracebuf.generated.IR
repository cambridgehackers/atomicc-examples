STRUCT NOCDataH  {
    FILE atomicc_OC_h
    FIELD Bit(16) length
    FIELD Bit(128) data
}
INTERFACE AtB(width=16,owidth=32)  {
    FILE adapter_OC_h
    INTERFACE PipeIn(width=16) in
    INTERFACE/Ptr PipeInB(width=32) out
}
INTERFACE BRAMIfc(width=64,depth=1024)  {
    FILE bram_OC_h
    METHOD/Action write__ENA ( Bit(__builtin_clog2(depth)) addr , Bit(width) data )
    METHOD/Action read__ENA ( Bit(__builtin_clog2(depth)) addr )
    METHOD dataOut Bit(width)
}
INTERFACE BscanIfc(width=32)  {
    FILE bscan_OC_h
    INTERFACE PipeIn(width=32) toBscan
    INTERFACE/Ptr PipeIn(width=32) fromBscan
}
INTERFACE Fifo(width=32)  {
    FILE fifo_OC_h
    INTERFACE PipeIn(width=32) in
    INTERFACE PipeOut(width=32) out
}
INTERFACE PipeIn(width=32)  {
    FILE atomicc_OC_h
    METHOD/Action enq__ENA ( Bit(width) v )
}
INTERFACE PipeInB(width=1024)  {
    FILE atomicc_OC_h
    METHOD/Action enq__ENA ( Bit(width) v , Bit(1) last )
}
INTERFACE PipeInB(width=32)  {
    FILE atomicc_OC_h
    METHOD/Action enq__ENA ( Bit(width) v , Bit(1) last )
}
INTERFACE PipeOut(width=32)  {
    FILE atomicc_OC_h
    METHOD/Action deq__ENA
    METHOD first Bit(width)
}
INTERFACE TraceIfc(width=64,depth=1024)  {
    FILE tracebuf_OC_h
    FIELD/input Bit(1) CLK
    FIELD/input Bit(1) nRST
    FIELD/input Bit(1) enable
    FIELD/input Bit(64) data
}
EMODULE AdapterToBus(width=16,owidth=32) AtB(width=16,owidth=32) {
    FILE adapter_OC_h
}
EMODULE BRAM(width=64,depth=1024) BRAMIfc(width=64,depth=1024) {
    FILE bram_OC_h
}
EMODULE Bscan(id=3,width=32) BscanIfc(width=32) {
    FILE bscan_OC_h
}
EMODULE Dummy PipeIn(width=32) {
    FILE atomicc_OC_h
}
EMODULE Fifo1Base(width=32) Fifo(width=32) {
    FILE fifo_OC_h
}
MODULE Fifo1(width=32) Fifo(width=32) {
    FILE fifo_OC_h
    FIELD Fifo1Base(width=32) fifo
    METHOD/Action in$enq__ENA ( Bit(32) v ) {
        CALL/Action :fifo$in$enq__ENA{in$enq$v}
    }
    METHOD/Action out$deq__ENA {
        CALL/Action :fifo$out$deq__ENA{}
    }
    METHOD out$first Bit(32) = ((fifo$out$first)) {
        CALL :fifo$out$first{}
    }
}
MODULE Trace(width=64,depth=1024) TraceIfc(width=64,depth=1024) {
    FILE tracebuf_OC_cpp
    INTERFACECONNECT readUser bscan$fromBscan PipeIn(width=32)
    INTERFACECONNECT readMem radapter$out PipeInB(width=32)
    FIELD BRAM(width=64,depth=1024) bram
    FIELD Bit(8) countFrom
    FIELD Bit(8) countTo
    FIELD Bit(8) countJtag
    FIELD Bit(8) countCB
    FIELD Bit(32) timestamp
    FIELD Bit(64) buffer
    FIELD Bit(11) addr
    FIELD Bit(1) writeNext
    FIELD Bit(11) readAddr
    FIELD Bscan(id=3,width=32) bscan
    INTERFACE PipeIn(width=32) readUser
    FIELD Bit(1) dataNotAvail
    FIELD Fifo1(width=32) dataFromMem
    FIELD AdapterToBus(width=16,owidth=32) radapter
    FIELD Bit(32) dataToJtag
    INTERFACE PipeInB(width=32) readMem
    METHOD/Rule/Action RULE$copyRule__ENA if ((((enable) != (0)) && (writeNext))) {
        CALL/Action :bram$write__ENA{addr,__bitconcat{timestamp,__bitsubstr{buffer,(64) - (32),0}}}
        STORE :addr = (addr) + (1)
    }
    METHOD/Rule/Action RULE$init__ENA {
        STORE :timestamp = (timestamp) + (1)
        STORE :buffer = data
        STORE :writeNext = (buffer) != (data)
    }
    METHOD/Action readUser$enq__ENA ( Bit(32) v ) {
        CALL/Action :dataFromMem$out$deq__ENA{}
        STORE :countJtag = (countJtag) + (1)
    }
    METHOD/Rule/Action RULE$readCallBack__ENA if (((dataNotAvail) ^ (1))) {
        ALLOCA Bit(16) _RULE$readCallBack$packetWidth
        LET Bit(16) :_RULE$readCallBack$packetWidth = 64
        CALL :bram$dataOut{}
        CALL/Action :radapter$in$enq__ENA{__bitconcat{bram$dataOut,_RULE$readCallBack$packetWidth}}
        STORE :dataNotAvail = 1
        STORE :countTo = (countTo) + (1)
    }
    METHOD/Action readMem$enq__ENA ( Bit(32) v , Bit(1) last ) {
        STORE :dataToJtag = readMem$enq$v
        CALL/Action :dataFromMem$in$enq__ENA{readMem$enq$last}
        STORE (readMem$enq$last):readAddr = (readAddr) + (1)
        CALL/Action (readMem$enq$last):bram$read__ENA{readAddr}
        STORE (readMem$enq$last):dataNotAvail = 0
        STORE :countFrom = (countFrom) + (1)
    }
    METHOD/Rule/Action RULE$callBack__ENA {
        CALL/Action :bscan$toBscan$enq__ENA{dataToJtag}
        STORE :countCB = (countCB) + (1)
    }
}
