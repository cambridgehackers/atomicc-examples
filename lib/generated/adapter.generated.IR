STRUCT NOCDataH  {
    FILE atomicc_OC_h
    FIELD Bit(16) length
    FIELD Bit(128) data
}
INTERFACE AfB(owidth=32,width=144)  {
    FILE adapter_OC_h
    INTERFACE PipeInLast(width=32) in
    INTERFACE/Ptr PipeIn(width=144) out
}
INTERFACE AsyncControlIfc  {
    FILE atomicc_OC_h
    FIELD/input Bit(1) CLK
    FIELD/input Bit(1) nRST
    FIELD/input Bit(1) start
    FIELD/input Bit(1) end
    FIELD/input Bit(1) clear
    FIELD/output Bit(1) out
    FIELD/output Bit(1) done
}
INTERFACE AtB(width=128,owidth=32)  {
    FILE adapter_OC_h
    INTERFACE PipeInLength(width=128) in
    INTERFACE PipeOutLast(width=32) out
    METHOD/Action clear__ENA
}
INTERFACE PipeIn(width=32)  {
    FILE atomicc_OC_h
    METHOD/Action enq__ENA ( Bit(width) v )
}
INTERFACE PipeInLast(width=32)  {
    FILE atomicc_OC_h
    METHOD/Action enq__ENA ( Bit(width) v , Bit(1) last )
}
INTERFACE PipeInLength(width=128)  {
    FILE atomicc_OC_h
    METHOD/Action enq__ENA ( Bit(width) v , Bit(16) size )
}
INTERFACE PipeOutLast(width=32)  {
    FILE atomicc_OC_h
    METHOD/Action deq__ENA
    METHOD first Bit(width)
    METHOD last Bit(1)
}
INTERFACE SelectIndexIfc(funnelWidth=20,width=14)  {
    FILE atomicc_OC_h
    FIELD Bit(14) out
    FIELD/Ptr/Count funnelWidth  Bit(14) in
    FIELD Bit(5) index
}
EMODULE AsyncControl AsyncControlIfc {
    FILE atomicc_OC_h
}
EMODULE Dummy PipeIn(width=32) {
    FILE atomicc_OC_h
}
EMODULE/Verilog SelectIndex(funnelWidth=20,width=14) SelectIndexIfc(funnelWidth=20,width=14) {
    FILE atomicc_OC_h
}
MODULE AdapterFromBus(owidth=32,width=144) AfB(owidth=32,width=144) {
    FILE adapter_OC_cpp
    FIELD Bit(128) buffer
    FIELD Bit(1) waitForEnq
    FIELD Bit(16) length
    METHOD/Action in$enq__ENA ( Bit(owidth) v , Bit(1) last ) if (((waitForEnq) ^ (1))) {
        PRINTF ((0) != (0)):printf{"adapterFROMin %x last %x buffer %x\n",in$enq$v,in$enq$last,buffer}
        STORE :buffer = __bitconcat{in$enq$v,__bitsubstr{buffer,(128) - (1),32}}
        STORE :length = (length) + (32)
        STORE (in$enq$last):waitForEnq = 1
    }
    METHOD/Rule/Action RULE$pushValue__ENA if ((waitForEnq)) {
        ALLOCA NOCDataH _RULE$pushValue$agg_2e_tmp
        STORE :length = 0
        PRINTF ((0) != (0)):printf{"adapterFROMout %x\n",buffer}
        LET Bit(16) :_RULE$pushValue$agg_2e_tmp.length = length
        LET Bit(128) :_RULE$pushValue$agg_2e_tmp.data = buffer
        CALL/Action :out$enq__ENA{_RULE$pushValue$agg_2e_tmp}
        STORE :waitForEnq = 0
    }
}
MODULE AdapterToBus(width=128,owidth=32) AtB(width=128,owidth=32) {
    FILE adapter_OC_cpp
    FIELD Bit(128) buffer
    FIELD Bit(16) remain
    METHOD/Action clear__ENA {
        STORE :remain = 0
    }
    METHOD/Action in$enq__ENA ( Bit(width) v , Bit(16) size ) if ((((clear__ENA) != (0)) || ((remain) == (0)))) {
        STORE :buffer = in$enq$v
        STORE :remain = in$enq$size
        PRINTF ((0) != (0)):printf{"adapterTOin %x length %x\n",in$enq$v,in$enq$size}
    }
    METHOD out$last Bit(1) = (((remain) <= (32))) if ((((clear__ENA) != (0)) || ((remain) != (0))))
    METHOD out$first Bit(width) = ((_out$first$outVal)) if ((((clear__ENA) != (0)) || ((remain) != (0)))) {
        ALLOCA Bit(32) _out$first$outVal
        LET Bit(32) :_out$first$outVal = __bitsubstr{buffer,(128) - (1),(128) - (32)}
    }
    METHOD/Action out$deq__ENA if ((((clear__ENA) != (0)) || ((remain) != (0)))) {
        PRINTF ((0) != (0)):printf{"adapterTOout remain %x\n",remain}
        STORE ((remain) <= (32)):remain = 0
        STORE !((remain) <= (32)):remain = (remain) - (32)
        STORE :buffer = (buffer) << (32)
    }
}
