STRUCT NOCDataH  {
    FILE atomicc_OC_h
    FIELD Bit(16) length
    FIELD Bit(128) data
}
INTERFACE AfB(owidth=32,width=144)  {
    FILE adapter_OC_h
    INTERFACE PipeInB(width=32) in
    INTERFACE/Ptr PipeIn(width=144) out
}
INTERFACE AtB(width=144,owidth=32)  {
    FILE adapter_OC_h
    INTERFACE PipeIn(width=144) in
    INTERFACE/Ptr PipeInB(width=32) out
}
INTERFACE PipeIn(width=32)  {
    FILE atomicc_OC_h
    METHOD/Action enq__ENA ( Bit(width) v )
}
INTERFACE PipeInB(width=32)  {
    FILE atomicc_OC_h
    METHOD/Action enq__ENA ( Bit(width) v , Bit(1) last )
}
EMODULE Dummy PipeIn(width=32) {
    FILE atomicc_OC_h
}
MODULE AdapterFromBus(owidth=32,width=144) AfB(owidth=32,width=144) {
    FILE adapter_OC_cpp
    FIELD Bit(128) buffer
    FIELD Bit(1) waitForEnq
    FIELD Bit(16) length
    METHOD/Action in$enq__ENA ( Bit(owidth) v , Bit(1) last ) if (((waitForEnq) ^ (1))) {
        PRINTF ((0) != (0)):printf{"adapterFROMin %x last %x buffer %x\n",in$enq$v,in$enq$last,buffer}
        STORE :buffer = __bitconcat{in$enq$v,__bitsubstr{buffer,(128) - (1),32}}
        STORE :length = (length) + (32)
        STORE (in$enq$last):waitForEnq = 1
    }
    METHOD/Rule/Action RULE$pushValue__ENA if ((waitForEnq)) {
        ALLOCA NOCDataH _RULE$pushValue$agg_2e_tmp
        STORE :length = 0
        PRINTF ((0) != (0)):printf{"adapterFROMout %x\n",buffer}
        LET Bit(16) :_RULE$pushValue$agg_2e_tmp.length = length
        LET Bit(128) :_RULE$pushValue$agg_2e_tmp.data = buffer
        CALL/Action :out$enq__ENA{_RULE$pushValue$agg_2e_tmp}
        STORE :waitForEnq = 0
    }
}
MODULE AdapterToBus(width=144,owidth=32) AtB(width=144,owidth=32) {
    FILE adapter_OC_cpp
    FIELD Bit(128) buffer
    FIELD Bit(16) remain
    METHOD/Action in$enq__ENA ( NOCDataH v ) if (((remain) == (0))) {
        ALLOCA NOCDataH _in$enq$temp$v
        LET NOCDataH :_in$enq$temp$v = in$enq$v
        STORE :buffer = _in$enq$temp$v.data
        STORE :remain = _in$enq$temp$v.length
        PRINTF ((0) != (0)):printf{"adapterTOin %x length %x\n",_in$enq$temp$v.data,_in$enq$temp$v.length}
    }
    METHOD/Rule/Action RULE$copyRule__ENA if (((remain) != (0))) {
        ALLOCA Bit(32) _RULE$copyRule$outVal
        LET Bit(32) :_RULE$copyRule$outVal = __bitsubstr{buffer,(128) - (1),(128) - (32)}
        PRINTF ((0) != (0)):printf{"adapterTOout %x remain %x\n",_RULE$copyRule$outVal,remain}
        CALL/Action :out$enq__ENA{_RULE$copyRule$outVal,(remain) <= (32)}
        STORE ((remain) <= (32)):remain = 0
        STORE !((remain) <= (32)):remain = (remain) - (32)
        STORE :buffer = (buffer) << (32)
    }
}
