STRUCT NOCDataH  {
    FILE atomicc_OC_h
    FIELD Bit(16) length
    FIELD Bit(128) data
}
INTERFACE AsyncControlIfc  {
    FILE atomicc_OC_h
    FIELD/input Bit(1) CLK
    FIELD/input Bit(1) nRST
    FIELD/input Bit(1) start
    FIELD/input Bit(1) ack
    FIELD/input Bit(1) clear
    FIELD/output Bit(1) out
    FIELD/output Bit(1) done
}
INTERFACE PipeIn(width=32)  {
    FILE atomicc_OC_h
    METHOD/Action enq__ENA ( Bit(width) v )
}
INTERFACE PipeOut(width=16)  {
    FILE atomicc_OC_h
    METHOD/Action deq__ENA
    METHOD first Bit(width)
}
INTERFACE SelectIndexIfc(funnelWidth=20,width=14)  {
    FILE atomicc_OC_h
    FIELD Bit(14) out
    FIELD/Ptr/Count funnelWidth  Bit(14) in
    FIELD Bit(5) index
}
INTERFACE SelectOutIfc(funnelWidth=8,width=16)  {
    FILE selectout_OC_h
    INTERFACE/Ptr/Count funnelWidth  PipeOut(width=16) in
    INTERFACE PipeOut(width=16) out
    METHOD/Action select__ENA ( Bit(32) v )
}
EMODULE AsyncControl AsyncControlIfc {
    FILE atomicc_OC_h
}
EMODULE Dummy PipeIn(width=32) {
    FILE atomicc_OC_h
}
EMODULE/Verilog SelectIndex(funnelWidth=20,width=14) SelectIndexIfc(funnelWidth=20,width=14) {
    FILE atomicc_OC_h
}
MODULE SelectOut(funnelWidth=8,width=16) SelectOutIfc(funnelWidth=8,width=16) {
    FILE selectout_OC_cpp
    FIELD Bit(4) index
    FIELD Bit(1) indexValid
    METHOD/Action select__ENA ( Bit(32) v ) {
        STORE :index = select$v
        STORE :indexValid = 1
    }
    METHOD/Action out$deq__ENA if ((indexValid)) {
        CALL/Action :in[index].deq__ENA{}
    }
    METHOD out$first Bit(width) = ((in[index].first)) {
        CALL :in[index].first{}
    }
}
