STRUCT NOCDataH  {
    FILE atomicc_OC_h
    FIELD Bit(16) length
    FIELD Bit(128) data
}
INTERFACE FunnelBaseIfc(funnelWidth=99,width=32)  {
    FILE atomicc_OC_h
    INTERFACE/Count funnelWidth  PipeIn_OC_0 in
    INTERFACE/Ptr PipeIn_OC_1 out
}
INTERFACE GrayCounterIfc(width=10)  {
    FILE grayCounter_OC_h
    METHOD/Action increment__ENA
    METHOD/Action decrement__ENA
    METHOD readGray Bit(width)
    METHOD/Action writeGray__ENA ( Bit(width) v )
    METHOD readBin Bit(width)
    METHOD/Action writeBin__ENA ( Bit(width) v )
}
INTERFACE PipeIn  {
    FILE atomicc_OC_h
    METHOD/Action enq__ENA ( NOCDataH v )
}
INTERFACE PipeIn_OC_0  {
    FILE atomicc_OC_h
    METHOD/Action enq__ENA ( Bit(32) v )
}
INTERFACE PipeIn_OC_1  {
    FILE atomicc_OC_h
    METHOD/Action enq__ENA ( Bit(32) v )
}
INTERFACE l_topIfc  {
    FILE atomicc_OC_h
    INTERFACE PipeIn request
    INTERFACE/Ptr PipeIn indication
}
EMODULE FunnelBufferedBase(funnelWidth=99,width=32) FunnelBaseIfc(funnelWidth=99,width=32) {
    FILE atomicc_OC_h
}
EMODULE l_top l_topIfc {
    FILE atomicc_OC_h
}
MODULE GrayCounter(width=10) GrayCounterIfc(width=10) {
    FILE grayCounter_OC_cpp
    FIELD/Count width  Bit(1) counter
    FIELD/shared Bit(10) m
    FIELD/shared Bit(10) counterBit
    METHOD/Action increment__ENA
    METHOD/Action decrement__ENA
    METHOD readGray Bit(width) = ((counterBit))
    METHOD/Action writeGray__ENA ( Bit(width) v ) {
        GENERATE :__inst$Genvar1,(0),((__inst$Genvar1 < width)),((__inst$Genvar1 + 1)),FOR$2Body__ENA
    }
    METHOD readBin Bit(width) = ((readBin$rtemp)) {
        ALLOCA Bit(width) readBin$rtemp
        ALLOCA ARRAY_width_Bit(1) readBin$temp
        GENERATE :__inst$Genvar1,(0),((__inst$Genvar1 < width)),((__inst$Genvar1 + 1)),FOR$3Body__ENA
        GENERATE :__inst$Genvar1,(0),((__inst$Genvar1 < width)),((__inst$Genvar1 + 1)),FOR$4Body__ENA
    }
    METHOD/Action writeBin__ENA ( Bit(width) v ) {
        GENERATE :__inst$Genvar1,(0),((__inst$Genvar1 < width)),((__inst$Genvar1 + 1)),FOR$5Body__ENA
    }
    METHOD/Action FOR$0Body__ENA ( Bit(32) __inst$Genvar1 , Bit(1) RULE$incdec$useLsb ) {
        STORE :counter[__inst$Genvar1] = (counter[__inst$Genvar1]) ^ (__phi(((__inst$Genvar1) == (0)):(RULE$incdec$useLsb), !((__inst$Genvar1) == (0)):(((((RULE$incdec$useLsb) != (0)) ^ (1)) & (((__inst$Genvar1) == ((10) - (1))) | (__bitsubstr{counterBit,__phi((((__inst$Genvar1) < (1)) & !((__inst$Genvar1) == (0))):(0), (!((__inst$Genvar1) < (1)) & !((__inst$Genvar1) == (0))):((__inst$Genvar1) - (1)))}))) & (((__inst$Genvar1) == (1)) | (((__reduce{"|",__bitsubstr{counterBit,__phi((((__inst$Genvar1) < (2)) & !((__inst$Genvar1) == (0))):(0), (!((__inst$Genvar1) < (2)) & !((__inst$Genvar1) == (0))):((__inst$Genvar1) - (2))),0}}) != (0)) ^ (1))))))
    }
    METHOD/Rule/Action RULE$incdec__ENA if (((increment__ENA) != (decrement__ENA))) {
        ALLOCA Bit(1) RULE$incdec$useLsb
        LET Bit(1) :RULE$incdec$useLsb = (__reduce{"^",counterBit}) == (decrement__ENA)
        GENERATE :__inst$Genvar1,(0),((__inst$Genvar1 < width)),((__inst$Genvar1 + 1)),FOR$0Body__ENA
    }
    METHOD/Action FOR$1Body__ENA ( Bit(32) __inst$Genvar1 ) {
        LET Bit(32) :__bitsubstr{counterBit,__inst$Genvar1} = counter[__inst$Genvar1]
    }
    METHOD/Rule/Action RULE$init__ENA {
        GENERATE :__inst$Genvar1,(0),((__inst$Genvar1 < width)),((__inst$Genvar1 + 1)),FOR$1Body__ENA
    }
    METHOD/Action FOR$2Body__ENA ( Bit(32) __inst$Genvar1 , Bit(width) writeGray$v ) {
        STORE :counter[__inst$Genvar1] = __bitsubstr{writeGray$v,__inst$Genvar1}
    }
    METHOD/Action FOR$3Body__ENA ( Bit(32) __inst$Genvar1 , Bit(1) readBin$temp ) {
        LET Bit(1) :readBin$temp[__inst$Genvar1] = __reduce{"^",__bitsubstr{counterBit,(10) - (1),__inst$Genvar1}}
    }
    METHOD/Action FOR$4Body__ENA ( Bit(32) __inst$Genvar1 , Bit(width) readBin$rtemp , Bit(1) readBin$temp ) {
        LET Bit(32) :__bitsubstr{readBin$rtemp,__inst$Genvar1} = readBin$temp[__inst$Genvar1]
    }
    METHOD/Action FOR$5Body__ENA ( Bit(32) __inst$Genvar1 , Bit(width) writeBin$v ) {
        STORE ((__inst$Genvar1) == ((10) - (1))):counter[__inst$Genvar1] = __bitsubstr{writeBin$v,__inst$Genvar1}
        STORE !((__inst$Genvar1) == ((10) - (1))):counter[__inst$Genvar1] = __reduce{"^",__bitsubstr{writeBin$v,(__inst$Genvar1) + (1),__inst$Genvar1}}
    }
}
