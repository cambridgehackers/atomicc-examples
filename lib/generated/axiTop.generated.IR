STRUCT NOCDataH  {
    FILE atomicc_OC_h
    FIELD Bit(16) length
    FIELD Bit(128) data
}
STRUCT ReadResp  {
    FILE axiTop_OC_cpp
    FIELD Bit(6) id
    FIELD Bit(32) data
}
INTERFACE AxiTopIfc  {
    FILE axiTop_OC_h
    INTERFACE ZynqInterruptT _
    INTERFACE MaxiO MAXIGP0_O
    INTERFACE/Ptr MaxiI MAXIGP0_I
}
INTERFACE Fifo(width=32)  {
    FILE fifo_OC_h
    INTERFACE PipeIn(width=32) in
    INTERFACE PipeOut(width=32) out
}
INTERFACE Fifo(width=38)  {
    FILE fifo_OC_h
    INTERFACE PipeIn(width=38) in
    INTERFACE PipeOut(width=38) out
}
INTERFACE Fifo(width=6)  {
    FILE fifo_OC_h
    INTERFACE PipeIn(width=6) in
    INTERFACE PipeOut(width=6) out
}
INTERFACE FunnelBaseIfc(funnelWidth=99,width=32)  {
    FILE funnel_OC_h
    INTERFACE/Count funnelWidth  PipeIn(width=32) in
    INTERFACE/Ptr PipeIn(width=32) out
}
INTERFACE MaxiI  {
    FILE axiTop_OC_h
    METHOD/Action R__ENA ( Bit(32) data , Bit(12) id , Bit(1) last , Bit(2) resp )
    METHOD/Action B__ENA ( Bit(12) id , Bit(2) resp )
}
INTERFACE MaxiO  {
    FILE axiTop_OC_h
    METHOD/Action AR__ENA ( Bit(32) addr , Bit(12) id , Bit(4) len )
    METHOD/Action AW__ENA ( Bit(32) addr , Bit(12) id , Bit(4) len )
    METHOD/Action W__ENA ( Bit(32) data , Bit(12) id , Bit(1) last )
}
INTERFACE PipeIn(width=32)  {
    FILE atomicc_OC_h
    METHOD/Action enq__ENA ( Bit(width) v )
}
INTERFACE PipeInLast(width=32)  {
    FILE atomicc_OC_h
    METHOD/Action enq__ENA ( Bit(width) v , Bit(1) last )
}
INTERFACE PipeInLength(width=144)  {
    FILE atomicc_OC_h
    METHOD/Action enq__ENA ( Bit(width) v , Bit(16) size )
}
INTERFACE PipeOut(width=32)  {
    FILE atomicc_OC_h
    METHOD/Action deq__ENA
    METHOD first Bit(width)
}
INTERFACE TraceIfc(width=4,depth=1024)  {
    FILE tracebuf_OC_h
    FIELD/input Bit(1) CLK
    FIELD/input Bit(1) nRST
    FIELD/input Bit(1) enable
    FIELD/input Bit(4) data
}
INTERFACE UserTopIfc  {
    FILE userTop_OC_h
    INTERFACE PipeInLast(width=32) write
    INTERFACE/Ptr PipeInLast(width=32) read
}
INTERFACE ZynqInterruptT  {
    FILE axiTop_OC_h
    FIELD/input Bit(1) CLK
    FIELD/input Bit(1) nRST
    FIELD/output Bit(1) interrupt
}
INTERFACE l_topIfc  {
    FILE userTop_OC_h
    INTERFACE PipeIn(width=144) request
    INTERFACE/Ptr PipeInLength(width=144) indication
}
EMODULE AxiTop AxiTopIfc {
    FILE axiTop_OC_h
}
EMODULE Dummy PipeIn(width=32) {
    FILE atomicc_OC_h
}
EMODULE Fifo1Base(width=32) Fifo(width=32) {
    FILE fifo_OC_h
}
EMODULE Fifo1Base(width=38) Fifo(width=38) {
    FILE fifo_OC_h
}
EMODULE Fifo1Base(width=6) Fifo(width=6) {
    FILE fifo_OC_h
}
EMODULE FunnelBufferedBase(funnelWidth=99,width=32) FunnelBaseIfc(funnelWidth=99,width=32) {
    FILE funnel_OC_h
}
EMODULE Trace(width=4,depth=1024) TraceIfc(width=4,depth=1024) {
    FILE tracebuf_OC_h
}
EMODULE UserTop UserTopIfc {
    FILE userTop_OC_h
}
EMODULE l_top l_topIfc {
    FILE userTop_OC_h
}
MODULE/Trace=1024 AxiTop AxiTopIfc {
    FILE axiTop_OC_cpp
    INTERFACECONNECT readUser user$read PipeInLast(width=32)
    FIELD Bit(1) intEnable
    FIELD Bit(1) writeReady
    FIELD Bit(1) selectRIndReq
    FIELD Bit(1) portalRControl
    FIELD Bit(1) selectWIndReq
    FIELD Bit(1) portalWControl
    FIELD Bit(4) readCount
    FIELD Bit(4) writeCount
    FIELD Bit(5) readAddr
    FIELD Bit(5) writeAddr
    FIELD Fifo1(width=6) reqArs
    FIELD Fifo1(width=6) reqAws
    FIELD Fifo1(width=6) writeDone
    FIELD Fifo1(width=32) requestValue
    FIELD Fifo1(width=38) readData
    FIELD Fifo1(width=32) writeData
    FIELD UserTop user
    INTERFACE PipeInLast(width=32) readUser
    METHOD/Action MAXIGP0_O$AR__ENA ( Bit(32) addr , Bit(12) id , Bit(4) len ) {
        CALL/Action :reqArs$in$enq__ENA{MAXIGP0_O$AR$id}
        STORE :portalRControl = (__bitsubstr{MAXIGP0_O$AR$addr,11,5}) == (0)
        STORE :selectRIndReq = (__bitsubstr{MAXIGP0_O$AR$addr,12}) != (0)
        STORE :readCount = MAXIGP0_O$AR$len
        STORE :readAddr = MAXIGP0_O$AR$addr
    }
    METHOD/Action MAXIGP0_O$AW__ENA ( Bit(32) addr , Bit(12) id , Bit(4) len ) {
        CALL/Action :reqAws$in$enq__ENA{MAXIGP0_O$AW$id}
        STORE :portalWControl = (__bitsubstr{MAXIGP0_O$AW$addr,11,5}) == (0)
        STORE :selectWIndReq = (__bitsubstr{MAXIGP0_O$AW$addr,12}) != (0)
        STORE :writeCount = MAXIGP0_O$AW$len
        STORE :writeAddr = MAXIGP0_O$AW$addr
    }
    METHOD/Action MAXIGP0_O$W__ENA ( Bit(32) data , Bit(12) id , Bit(1) last ) {
        CALL/Action :writeData$in$enq__ENA{MAXIGP0_O$W$data}
    }
    METHOD/Action readUser$enq__ENA ( Bit(32) v , Bit(1) last ) {
        CALL/Action :requestValue$in$enq__ENA{readUser$enq$v}
    }
    METHOD/Rule/Action RULE$init__ENA {
        LET Bit(1) :interrupt = ((requestValue$out$deq__RDY) != (0)) && (intEnable)
    }
    METHOD/Rule/Action RULE$lread__ENA {
        ALLOCA ReadResp _RULE$lread$agg_2e_tmp
        ALLOCA Bit(1) _RULE$lread$currentChannel
        ALLOCA Bit(6) _RULE$lread$currentRead
        ALLOCA Bit(32) _RULE$lread$res
        CALL :reqArs$out$first{}
        LET Bit(6) :_RULE$lread$currentRead = reqArs$out$first
        LET Bit(1) :_RULE$lread$currentChannel = __phi((selectRIndReq):(0), !(selectRIndReq):(requestValue$out$deq__RDY))
        LET Bit(32) (((readAddr) == 0) & (portalRControl)):_RULE$lread$res = _RULE$lread$currentChannel
        LET Bit(32) (((readAddr) == 8) & (portalRControl)):_RULE$lread$res = 1
        LET Bit(32) (((readAddr) == 12) & (portalRControl)):_RULE$lread$res = _RULE$lread$currentChannel
        LET Bit(32) (((readAddr) == 16) & (portalRControl)):_RULE$lread$res = (selectRIndReq) ? (6) : (5)
        LET Bit(32) (((readAddr) == 20) & (portalRControl)):_RULE$lread$res = 2
        LET Bit(32) (((((readAddr) == 0) | ((readAddr) == 8) | ((readAddr) == 12) | ((readAddr) == 16) | ((readAddr) == 20)) ^ 1) & (portalRControl)):_RULE$lread$res = 0
        CALL (((readAddr) == 0) & !(portalRControl)):requestValue$out$first{}
        LET Bit(32) (((readAddr) == 0) & !(portalRControl)):_RULE$lread$res = requestValue$out$first
        CALL/Action (((readAddr) == 0) & !(portalRControl)):requestValue$out$deq__ENA{}
        LET Bit(32) (((readAddr) == 4) & !(portalRControl)):_RULE$lread$res = user$write$enq__RDY
        LET Bit(32) (((((readAddr) == 0) | ((readAddr) == 4)) ^ 1) & !(portalRControl)):_RULE$lread$res = 0
        LET Bit(6) :_RULE$lread$agg_2e_tmp.id = _RULE$lread$currentRead
        LET Bit(32) :_RULE$lread$agg_2e_tmp.data = _RULE$lread$res
        CALL/Action :readData$in$enq__ENA{_RULE$lread$agg_2e_tmp}
        STORE :readCount = (readCount) - (1)
        STORE :readAddr = (readAddr) + (4)
        CALL/Action ((readCount) == (0)):reqArs$out$deq__ENA{}
    }
    METHOD/Rule/Action RULE$lreadData__ENA {
        ALLOCA ReadResp _RULE$lreadData$currentRData
        CALL :readData$out$first{}
        LET ReadResp :_RULE$lreadData$currentRData = readData$out$first
        CALL/Action :MAXIGP0_I$R__ENA{_RULE$lreadData$currentRData.data,_RULE$lreadData$currentRData.id,(1) != (0),0}
        CALL/Action :readData$out$deq__ENA{}
    }
    METHOD/Rule/Action RULE$lwrite__ENA {
        ALLOCA Bit(32) _RULE$lwrite$currentWData
        ALLOCA Bit(6) _RULE$lwrite$currentWrite
        CALL :reqAws$out$first{}
        LET Bit(6) :_RULE$lwrite$currentWrite = reqAws$out$first
        CALL :writeData$out$first{}
        LET Bit(32) :_RULE$lwrite$currentWData = writeData$out$first
        CALL/Action !(portalWControl):user$write$enq__ENA{_RULE$lwrite$currentWData,(writeAddr) != (0)}
        STORE (((writeAddr) == (4)) & (portalWControl)):intEnable = (__bitsubstr{_RULE$lwrite$currentWData,0,0}) != (0)
        STORE :writeCount = (writeCount) - (1)
        STORE :writeAddr = (writeAddr) + (4)
        CALL/Action :writeData$out$deq__ENA{}
        CALL/Action ((writeCount) == (0)):writeDone$in$enq__ENA{_RULE$lwrite$currentWrite}
        CALL/Action ((writeCount) == (0)):reqAws$out$deq__ENA{}
    }
    METHOD/Rule/Action RULE$writeResponse__ENA {
        CALL :writeDone$out$first{}
        CALL/Action :MAXIGP0_I$B__ENA{writeDone$out$first,0}
        CALL/Action :writeDone$out$deq__ENA{}
    }
}
MODULE Fifo1(width=32) Fifo(width=32) {
    FILE fifo_OC_h
    FIELD Fifo1Base(width=32) fifo
    METHOD/Action in$enq__ENA ( Bit(32) v ) {
        CALL/Action :fifo$in$enq__ENA{in$enq$v}
    }
    METHOD/Action out$deq__ENA {
        CALL/Action :fifo$out$deq__ENA{}
    }
    METHOD out$first Bit(32) = ((fifo$out$first)) {
        CALL :fifo$out$first{}
    }
}
MODULE Fifo1(width=38) Fifo(width=38) {
    FILE fifo_OC_h
    FIELD Fifo1Base(width=38) fifo
    METHOD/Action in$enq__ENA ( ReadResp v ) {
        CALL/Action :fifo$in$enq__ENA{in$enq$v}
    }
    METHOD/Action out$deq__ENA {
        CALL/Action :fifo$out$deq__ENA{}
    }
    METHOD out$first ReadResp = ((fifo$out$first)) {
        CALL :fifo$out$first{}
    }
}
MODULE Fifo1(width=6) Fifo(width=6) {
    FILE fifo_OC_h
    FIELD Fifo1Base(width=6) fifo
    METHOD/Action in$enq__ENA ( Bit(6) v ) {
        CALL/Action :fifo$in$enq__ENA{in$enq$v}
    }
    METHOD/Action out$deq__ENA {
        CALL/Action :fifo$out$deq__ENA{}
    }
    METHOD out$first Bit(6) = ((fifo$out$first)) {
        CALL :fifo$out$first{}
    }
}
