STRUCT NOCDataH  {
    FIELD Bit(16) length
    FIELD Bit(128) data
}
STRUCT ReadResp  {
    FIELD Bit(6) id
    FIELD Bit(32) data
}
INTERFACE AxiTopIfc  {
    INTERFACE ZynqInterruptT _
    INTERFACE MaxiO MAXIGP0_O
    INTERFACE/Ptr MaxiI MAXIGP0_I
}
INTERFACE Fifo  {
    INTERFACE PipeIn_OC_0 in
    INTERFACE PipeOut out
}
INTERFACE Fifo_OC_1  {
    INTERFACE PipeIn_OC_2 in
    INTERFACE PipeOut_OC_3 out
}
INTERFACE Fifo_OC_11  {
    INTERFACE PipeIn_OC_12 in
    INTERFACE PipeOut_OC_13 out
}
INTERFACE Fifo_OC_15  {
    INTERFACE PipeIn_OC_16 in
    INTERFACE PipeOut_OC_17 out
}
INTERFACE Fifo_OC_4  {
    INTERFACE PipeIn_OC_5 in
    INTERFACE PipeOut_OC_6 out
}
INTERFACE Fifo_OC_8  {
    INTERFACE PipeIn_OC_9 in
    INTERFACE PipeOut_OC_10 out
}
INTERFACE MaxiI  {
    METHOD/Action R__ENA ( Bit(32) data , Bit(12) id , Bit(1) last , Bit(2) resp )
    METHOD/Action B__ENA ( Bit(12) id , Bit(2) resp )
}
INTERFACE MaxiO  {
    METHOD/Action AR__ENA ( Bit(32) addr , Bit(12) id , Bit(4) len )
    METHOD/Action AW__ENA ( Bit(32) addr , Bit(12) id , Bit(4) len )
    METHOD/Action W__ENA ( Bit(32) data , Bit(12) id , Bit(1) last )
}
INTERFACE PipeIn  {
    METHOD/Action enq__ENA ( NOCDataH v )
}
INTERFACE PipeInB(width=32)  {
    METHOD/Action enq__ENA ( Bit(width) v , Bit(1) last )
}
INTERFACE PipeIn_OC_0  {
    METHOD/Action enq__ENA ( Bit(6) v )
}
INTERFACE PipeIn_OC_12  {
    METHOD/Action enq__ENA ( Bit(38) v )
}
INTERFACE PipeIn_OC_16  {
    METHOD/Action enq__ENA ( ReadResp v )
}
INTERFACE PipeIn_OC_2  {
    METHOD/Action enq__ENA ( Bit(6) v )
}
INTERFACE PipeIn_OC_5  {
    METHOD/Action enq__ENA ( Bit(32) v )
}
INTERFACE PipeIn_OC_9  {
    METHOD/Action enq__ENA ( Bit(32) v )
}
INTERFACE PipeOut  {
    METHOD/Action deq__ENA
    METHOD first Bit(6)
}
INTERFACE PipeOut_OC_10  {
    METHOD/Action deq__ENA
    METHOD first Bit(32)
}
INTERFACE PipeOut_OC_13  {
    METHOD/Action deq__ENA
    METHOD first Bit(38)
}
INTERFACE PipeOut_OC_17  {
    METHOD/Action deq__ENA
    METHOD first ReadResp
}
INTERFACE PipeOut_OC_3  {
    METHOD/Action deq__ENA
    METHOD first Bit(6)
}
INTERFACE PipeOut_OC_6  {
    METHOD/Action deq__ENA
    METHOD first Bit(32)
}
INTERFACE UserTopIfc  {
    INTERFACE PipeInB(width=32) write
    INTERFACE/Ptr PipeInB(width=32) read
}
INTERFACE ZynqInterruptT  {
    FIELD/output Bit(1) interrupt
    FIELD/input Bit(1) CLK
    FIELD/input Bit(1) nRST
}
INTERFACE l_topIfc  {
    INTERFACE PipeIn request
    INTERFACE/Ptr PipeIn indication
}
EMODULE AxiTop AxiTopIfc {
}
EMODULE Fifo1Base(width=32) Fifo_OC_4 {
}
EMODULE Fifo1Base(width=38) Fifo_OC_11 {
}
EMODULE Fifo1Base(width=6) Fifo {
}
EMODULE UserTop UserTopIfc {
}
EMODULE l_top l_topIfc {
}
MODULE AxiTop AxiTopIfc {
    INTERFACECONNECT readUser user$read PipeInB(width=32)
    FIELD Bit(1) intEnable
    FIELD Bit(1) writeReady
    FIELD Bit(1) selectRIndReq
    FIELD Bit(1) portalRControl
    FIELD Bit(1) selectWIndReq
    FIELD Bit(1) portalWControl
    FIELD Bit(4) readCount
    FIELD Bit(4) writeCount
    FIELD Bit(5) readAddr
    FIELD Bit(5) writeAddr
    FIELD Fifo1 reqArs
    FIELD Fifo1 reqAws
    FIELD Fifo1 writeDone
    FIELD Fifo1_OC_7 requestValue
    FIELD Fifo1_OC_14 readData
    FIELD Fifo1_OC_7 writeData
    FIELD UserTop user
    INTERFACE PipeInB(width=32) readUser
    METHOD/Action MAXIGP0_O$AR__ENA ( Bit(32) addr , Bit(12) id , Bit(4) len ) {
        CALL/Action :reqArs$in$enq__ENA{MAXIGP0_O$AR$id}
        STORE :portalRControl = (__bitsubstr{MAXIGP0_O$AR$addr,11,5}) == (0)
        STORE :selectRIndReq = (__bitsubstr{MAXIGP0_O$AR$addr,12}) != (0)
        STORE :readCount = MAXIGP0_O$AR$len
        STORE :readAddr = MAXIGP0_O$AR$addr
    }
    METHOD/Action MAXIGP0_O$AW__ENA ( Bit(32) addr , Bit(12) id , Bit(4) len ) {
        CALL/Action :reqAws$in$enq__ENA{MAXIGP0_O$AW$id}
        STORE :portalWControl = (__bitsubstr{MAXIGP0_O$AW$addr,11,5}) == (0)
        STORE :selectWIndReq = (__bitsubstr{MAXIGP0_O$AW$addr,12}) != (0)
        STORE :writeCount = MAXIGP0_O$AW$len
        STORE :writeAddr = MAXIGP0_O$AW$addr
    }
    METHOD/Action MAXIGP0_O$W__ENA ( Bit(32) data , Bit(12) id , Bit(1) last ) {
        CALL/Action :writeData$in$enq__ENA{MAXIGP0_O$W$data}
    }
    METHOD/Action readUser$enq__ENA ( Bit(32) v , Bit(1) last ) {
        CALL/Action :requestValue$in$enq__ENA{readUser$enq$v}
    }
    METHOD/Rule/Action RULE$init__ENA {
        LET Bit(1) :interrupt = ((requestValue$out$deq__RDY) != (0)) && (intEnable)
    }
    METHOD/Rule/Action RULE$lread__ENA {
        ALLOCA ReadResp RULE$lread$agg_2e_tmp
        ALLOCA Bit(1) RULE$lread$currentChannel
        ALLOCA Bit(6) RULE$lread$currentRead
        ALLOCA Bit(32) RULE$lread$res
        CALL :reqArs$out$first{}
        LET Bit(6) :RULE$lread$currentRead = reqArs$out$first
        LET Bit(1) :RULE$lread$currentChannel = __phi((selectRIndReq):(0), !(selectRIndReq):(requestValue$out$deq__RDY))
        LET Bit(32) (((readAddr) == 0) & (portalRControl)):RULE$lread$res = RULE$lread$currentChannel
        LET Bit(32) (((readAddr) == 8) & (portalRControl)):RULE$lread$res = 1
        LET Bit(32) (((readAddr) == 12) & (portalRControl)):RULE$lread$res = RULE$lread$currentChannel
        LET Bit(32) (((readAddr) == 16) & (portalRControl)):RULE$lread$res = (selectRIndReq) ? (6) : (5)
        LET Bit(32) (((readAddr) == 20) & (portalRControl)):RULE$lread$res = 2
        LET Bit(32) (((((readAddr) == 0) | ((readAddr) == 8) | ((readAddr) == 12) | ((readAddr) == 16) | ((readAddr) == 20)) ^ 1) & (portalRControl)):RULE$lread$res = 0
        CALL (((readAddr) == 0) & !(portalRControl)):requestValue$out$first{}
        LET Bit(32) (((readAddr) == 0) & !(portalRControl)):RULE$lread$res = requestValue$out$first
        CALL/Action (((readAddr) == 0) & !(portalRControl)):requestValue$out$deq__ENA{}
        LET Bit(32) (((readAddr) == 4) & !(portalRControl)):RULE$lread$res = user$write$enq__RDY
        LET Bit(32) (((((readAddr) == 0) | ((readAddr) == 4)) ^ 1) & !(portalRControl)):RULE$lread$res = 0
        LET Bit(6) ((((readAddr) == 0) & !(portalRControl)) | (((readAddr) == 4) & !(portalRControl)) | (((((readAddr) == 0) | ((readAddr) == 4)) ^ 1) & !(portalRControl)) | (((readAddr) == 0) & (portalRControl)) | (((readAddr) == 8) & (portalRControl)) | (((readAddr) == 12) & (portalRControl)) | (((readAddr) == 16) & (portalRControl)) | (((readAddr) == 20) & (portalRControl)) | (((((readAddr) == 0) | ((readAddr) == 8) | ((readAddr) == 12) | ((readAddr) == 16) | ((readAddr) == 20)) ^ 1) & (portalRControl))):RULE$lread$agg_2e_tmp$id = RULE$lread$currentRead
        LET Bit(32) ((((readAddr) == 0) & !(portalRControl)) | (((readAddr) == 4) & !(portalRControl)) | (((((readAddr) == 0) | ((readAddr) == 4)) ^ 1) & !(portalRControl)) | (((readAddr) == 0) & (portalRControl)) | (((readAddr) == 8) & (portalRControl)) | (((readAddr) == 12) & (portalRControl)) | (((readAddr) == 16) & (portalRControl)) | (((readAddr) == 20) & (portalRControl)) | (((((readAddr) == 0) | ((readAddr) == 8) | ((readAddr) == 12) | ((readAddr) == 16) | ((readAddr) == 20)) ^ 1) & (portalRControl))):RULE$lread$agg_2e_tmp$data = RULE$lread$res
        CALL/Action ((((readAddr) == 0) & !(portalRControl)) | (((readAddr) == 4) & !(portalRControl)) | (((((readAddr) == 0) | ((readAddr) == 4)) ^ 1) & !(portalRControl)) | (((readAddr) == 0) & (portalRControl)) | (((readAddr) == 8) & (portalRControl)) | (((readAddr) == 12) & (portalRControl)) | (((readAddr) == 16) & (portalRControl)) | (((readAddr) == 20) & (portalRControl)) | (((((readAddr) == 0) | ((readAddr) == 8) | ((readAddr) == 12) | ((readAddr) == 16) | ((readAddr) == 20)) ^ 1) & (portalRControl))):readData$in$enq__ENA{RULE$lread$agg_2e_tmp}
        STORE ((((readAddr) == 0) & !(portalRControl)) | (((readAddr) == 4) & !(portalRControl)) | (((((readAddr) == 0) | ((readAddr) == 4)) ^ 1) & !(portalRControl)) | (((readAddr) == 0) & (portalRControl)) | (((readAddr) == 8) & (portalRControl)) | (((readAddr) == 12) & (portalRControl)) | (((readAddr) == 16) & (portalRControl)) | (((readAddr) == 20) & (portalRControl)) | (((((readAddr) == 0) | ((readAddr) == 8) | ((readAddr) == 12) | ((readAddr) == 16) | ((readAddr) == 20)) ^ 1) & (portalRControl))):readCount = (readCount) - (1)
        STORE ((((readAddr) == 0) & !(portalRControl)) | (((readAddr) == 4) & !(portalRControl)) | (((((readAddr) == 0) | ((readAddr) == 4)) ^ 1) & !(portalRControl)) | (((readAddr) == 0) & (portalRControl)) | (((readAddr) == 8) & (portalRControl)) | (((readAddr) == 12) & (portalRControl)) | (((readAddr) == 16) & (portalRControl)) | (((readAddr) == 20) & (portalRControl)) | (((((readAddr) == 0) | ((readAddr) == 8) | ((readAddr) == 12) | ((readAddr) == 16) | ((readAddr) == 20)) ^ 1) & (portalRControl))):readAddr = (readAddr) + (4)
        CALL/Action (((readCount) == (0)) & ((((readAddr) == 0) & !(portalRControl)) | (((readAddr) == 4) & !(portalRControl)) | (((((readAddr) == 0) | ((readAddr) == 4)) ^ 1) & !(portalRControl)) | (((readAddr) == 0) & (portalRControl)) | (((readAddr) == 8) & (portalRControl)) | (((readAddr) == 12) & (portalRControl)) | (((readAddr) == 16) & (portalRControl)) | (((readAddr) == 20) & (portalRControl)) | (((((readAddr) == 0) | ((readAddr) == 8) | ((readAddr) == 12) | ((readAddr) == 16) | ((readAddr) == 20)) ^ 1) & (portalRControl)))):reqArs$out$deq__ENA{}
    }
    METHOD/Rule/Action RULE$lreadData__ENA {
        ALLOCA ReadResp RULE$lreadData$currentRData
        CALL :readData$out$first{}
        LET ReadResp :RULE$lreadData$currentRData = readData$out$first
        CALL/Action :MAXIGP0_I$R__ENA{RULE$lreadData$currentRData$data,RULE$lreadData$currentRData$id,(1) != (0),0}
        CALL/Action :readData$out$deq__ENA{}
    }
    METHOD/Rule/Action RULE$lwrite__ENA {
        ALLOCA Bit(32) RULE$lwrite$currentWData
        ALLOCA Bit(6) RULE$lwrite$currentWrite
        CALL :reqAws$out$first{}
        LET Bit(6) :RULE$lwrite$currentWrite = reqAws$out$first
        CALL :writeData$out$first{}
        LET Bit(32) :RULE$lwrite$currentWData = writeData$out$first
        CALL/Action !(portalWControl):user$write$enq__ENA{RULE$lwrite$currentWData,(writeAddr) != (0)}
        STORE (((writeAddr) == (4)) & (portalWControl)):intEnable = (__bitsubstr{RULE$lwrite$currentWData,0,0}) != (0)
        STORE :writeCount = (writeCount) - (1)
        STORE :writeAddr = (writeAddr) + (4)
        CALL/Action :writeData$out$deq__ENA{}
        CALL/Action ((writeCount) == (0)):writeDone$in$enq__ENA{RULE$lwrite$currentWrite}
        CALL/Action ((writeCount) == (0)):reqAws$out$deq__ENA{}
    }
    METHOD/Rule/Action RULE$writeResponse__ENA {
        CALL :writeDone$out$first{}
        CALL/Action :MAXIGP0_I$B__ENA{writeDone$out$first,0}
        CALL/Action :writeDone$out$deq__ENA{}
    }
}
MODULE Fifo1 Fifo_OC_1 {
    FIELD Fifo1Base(width=6) fifo
    METHOD/Action in$enq__ENA ( Bit(6) v ) {
        CALL/Action :fifo$in$enq__ENA{in$enq$v}
    }
    METHOD/Action out$deq__ENA {
        CALL/Action :fifo$out$deq__ENA{}
    }
    METHOD out$first Bit(6) = ((fifo$out$first)) {
        CALL :fifo$out$first{}
    }
}
MODULE Fifo1_OC_14 Fifo_OC_15 {
    FIELD Fifo1Base(width=38) fifo
    METHOD/Action in$enq__ENA ( ReadResp v ) {
        CALL/Action :fifo$in$enq__ENA{in$enq$v}
    }
    METHOD/Action out$deq__ENA {
        CALL/Action :fifo$out$deq__ENA{}
    }
    METHOD out$first ReadResp = ((out$first$retval)) {
        ALLOCA ReadResp out$first$retval
        CALL :fifo$out$first{}
        LET Bit(38) :out$first$retval = fifo$out$first
    }
}
MODULE Fifo1_OC_7 Fifo_OC_8 {
    FIELD Fifo1Base(width=32) fifo
    METHOD/Action in$enq__ENA ( Bit(32) v ) {
        CALL/Action :fifo$in$enq__ENA{in$enq$v}
    }
    METHOD/Action out$deq__ENA {
        CALL/Action :fifo$out$deq__ENA{}
    }
    METHOD out$first Bit(32) = ((fifo$out$first)) {
        CALL :fifo$out$first{}
    }
}
