INTERFACE Fifo  {
    INTERFACE PipeIn in
    INTERFACE PipeOut out
}
INTERFACE Fifo.0  {
    INTERFACE PipeIn.1 in
    INTERFACE PipeOut.2 out
}
INTERFACE PipeIn  {
    METHOD/Action enq__ENA ( Bit(999999) v )
}
INTERFACE PipeIn.1  {
    METHOD/Action enq__ENA ( Bit(999999) v )
}
INTERFACE PipeOut  {
    METHOD/Action deq__ENA
    METHOD first Bit(999999)
}
INTERFACE PipeOut.2  {
    METHOD/Action deq__ENA
    METHOD first Bit(999999)
}
MODULE Fifo1Base(width=999999) Fifo {
    FIELD Bit(999999) element
    FIELD Bit(1) full
    METHOD/Action in$enq__ENA ( Bit(width) v ) if (((full) ^ (1))) {
        STORE :element = in$enq$v
        STORE :full = 1
    }
    METHOD/Action out$deq__ENA if ((full)) {
        STORE :full = 0
    }
    METHOD out$first Bit(width) = ((element)) if ((full))
}
MODULE FifoB1Base(width=999999) Fifo.0 {
    FIELD Bit(999999) element
    FIELD Bit(1) full
    FIELD/shared Bit(999999) enq_v
    METHOD/Action in$enq__ENA ( Bit(width) v ) if (((((full) ^ (1)) | (out$deq__ENA)) != (0))) {
        STORE :enq_v = in$enq$v
        STORE :element = in$enq$v
        STORE (((out$deq__ENA) != (0)) ^ 1):full = 1
    }
    METHOD/Action out$deq__ENA if (((full) | (in$enq__ENA))) {
        STORE :full = 0
    }
    METHOD out$first Bit(width) = ((__phi((full):(element), ((full) ^ 1):(enq_v)))) if (((full) | (in$enq__ENA)))
}
