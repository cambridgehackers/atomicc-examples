STRUCT NOCDataH  {
    FIELD Bit(16) length
    FIELD Bit(128) data
}
INTERFACE Fifo  {
    INTERFACE PipeIn_OC_0 in
    INTERFACE PipeOut out
}
INTERFACE FifoPIfc  {
    INTERFACE PipeIn_OC_4 in
    INTERFACE/Ptr PipeIn_OC_4 out
}
INTERFACE Fifo_OC_1  {
    INTERFACE PipeIn_OC_2 in
    INTERFACE PipeOut_OC_3 out
}
INTERFACE Out2InIfc  {
    INTERFACE/Ptr PipeOut_OC_5 in
    INTERFACE/Ptr PipeIn_OC_6 out
}
INTERFACE PipeIn  {
    METHOD/Action enq__ENA ( NOCDataH v )
}
INTERFACE PipeIn_OC_0  {
    METHOD/Action enq__ENA ( Bit(999999) v )
}
INTERFACE PipeIn_OC_2  {
    METHOD/Action enq__ENA ( Bit(999999) v )
}
INTERFACE PipeIn_OC_4  {
    METHOD/Action enq__ENA ( Bit(999999) v )
}
INTERFACE PipeIn_OC_6  {
    METHOD/Action enq__ENA ( Bit(999999) v )
}
INTERFACE PipeOut  {
    METHOD/Action deq__ENA
    METHOD first Bit(999999)
}
INTERFACE PipeOut_OC_3  {
    METHOD/Action deq__ENA
    METHOD first Bit(999999)
}
INTERFACE PipeOut_OC_5  {
    METHOD/Action deq__ENA
    METHOD first Bit(999999)
}
INTERFACE l_topIfc  {
    INTERFACE PipeIn request
    INTERFACE/Ptr PipeIn indication
}
EMODULE Out2InBase(width=999999) Out2InIfc {
}
EMODULE l_top l_topIfc {
}
MODULE Fifo1Base(width=999999) Fifo {
    FIELD Bit(999999) element
    FIELD Bit(1) full
    METHOD/Action in$enq__ENA ( Bit(width) v ) if (((full) ^ (1))) {
        STORE :element = in$enq$v
        STORE :full = 1
    }
    METHOD/Action out$deq__ENA if ((full)) {
        STORE :full = 0
    }
    METHOD out$first Bit(width) = ((element)) if ((full))
}
MODULE FifoB1Base(width=999999) Fifo_OC_1 {
    FIELD Bit(999999) element
    FIELD Bit(1) full
    FIELD/shared Bit(999999) enq_v
    METHOD/Action in$enq__ENA ( Bit(width) v ) if (((((full) ^ (1)) | (out$deq__ENA)) != (0))) {
        STORE :enq_v = in$enq$v
        STORE :element = in$enq$v
        STORE !((out$deq__ENA) != (0)):full = 1
    }
    METHOD/Action out$deq__ENA if (((full) | (in$enq__ENA))) {
        STORE :full = 0
    }
    METHOD out$first Bit(width) = ((__phi((full):(element), !(full):(enq_v)))) if (((full) | (in$enq__ENA)))
}
MODULE FifoPBase(width=999999) FifoPIfc {
    INTERFACECONNECT base$in fifo$out PipeOut_OC_5
    INTERFACECONNECT base$out out PipeIn_OC_6
    FIELD Fifo1Base(width=999999) fifo
    FIELD Out2InBase(width=999999) base
    METHOD/Action in$enq__ENA ( Bit(width) v ) {
        CALL/Action :fifo$in$enq__ENA{in$enq$v}
    }
}
