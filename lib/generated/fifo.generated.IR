INTERFACE l_ainterface_OC_PipeIn {
    METHOD/Action enq__ENA ( Bit(999999) v )
}
INTERFACE l_ainterface_OC_PipeIn_OC_1 {
    METHOD/Action enq__ENA ( Bit(999999) v )
}
INTERFACE l_ainterface_OC_PipeOut {
    METHOD/Action deq__ENA
    METHOD first Bit(999999)
}
INTERFACE l_ainterface_OC_PipeOut_OC_2 {
    METHOD/Action deq__ENA
    METHOD first Bit(999999)
}
EMODULE Fifo {
    INTERFACE l_ainterface_OC_PipeIn in
    INTERFACE l_ainterface_OC_PipeOut out
}
EMODULE Fifo_OC_0 {
    INTERFACE l_ainterface_OC_PipeIn_OC_1 in
    INTERFACE l_ainterface_OC_PipeOut_OC_2 out
}
MODULE Fifo1Base$__PARAM__$width$999999 {
    INTERFACE l_ainterface_OC_PipeIn in
    INTERFACE l_ainterface_OC_PipeOut out
    FIELD Bit(999999) element
    FIELD Bit(1) full
    METHOD/Action in$enq__ENA ( Bit(999999) v ) if (((full) ^ (1))) {
        STORE :element = in$enq$v
        STORE :full = 1
    }
    METHOD/Action out$deq__ENA if ((full)) {
        STORE :full = 0
    }
    METHOD out$first Bit(999999) = ((element)) if ((full))
}
MODULE FifoB1Base$__PARAM__$width$999999 {
    INTERFACE l_ainterface_OC_PipeIn_OC_1 in
    INTERFACE l_ainterface_OC_PipeOut_OC_2 out
    FIELD Bit(999999) element
    FIELD Bit(1) full
    FIELD/shared Bit(999999) enq_v
    METHOD/Action in$enq__ENA ( Bit(999999) v ) if (((((full) ^ (1)) | (out$deq__ENA)) != (0))) {
        STORE :enq_v = in$enq$v
        STORE :element = in$enq$v
        STORE (((out$deq__ENA) != (0)) ^ 1):full = 1
    }
    METHOD/Action out$deq__ENA if (((full) | (in$enq__ENA))) {
        STORE :full = 0
    }
    METHOD out$first Bit(999999) = ((__phi((full):(element), ((full) ^ 1):(enq_v)))) if (((full) | (in$enq__ENA)))
}
