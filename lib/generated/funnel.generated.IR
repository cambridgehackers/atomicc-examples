INTERFACE PipeInBin(dataWidth=32) {
    METHOD/Action enq__ENA ( Bit(dataWidth) v )
}
MODULE FunnelBase(funnelWidth=8,dataWidth=32) {
    INTERFACECONNECT/Forward input level[0]$input PipeInBin(dataWidth=32)
    INTERFACECONNECT/Forward output level[(__builtin_clog2(funnelWidth) - 1)]$output[0] PipeInBin(dataWidth=32)
    FIELD/Count __builtin_clog2(funnelWidth)  FunnelHalfBase(funnelWidth=8,dataWidth=32) level
    INTERFACE/Count 8  PipeInBin(dataWidth=32) input
    INTERFACE/Ptr PipeInBin(dataWidth=32) output
    METHOD/Action FOR$1Body__ENA ( Bit(32) __inst$Genvar1 , Bit(32) RULE$connRule$j )
    METHOD/Action FOR$2Body__ENA ( Bit(32) __inst$Genvar1 ) {
        GENERATE :__inst$Genvar1,(0),((__inst$Genvar1 < funnelWidth)),((__inst$Genvar1 + 1)),FOR$1Body__ENA
    }
    METHOD/Rule/Action RULE$connRule__ENA {
        GENERATE :__inst$Genvar1,(1),((__inst$Genvar1 < __builtin_clog2(funnelWidth))),((__inst$Genvar1 + 1)),FOR$2Body__ENA
    }
}
MODULE FunnelHalfBase(funnelWidth=8,dataWidth=32) {
    INTERFACE/Count funnelWidth  PipeInBin(dataWidth=32) input
    INTERFACE/Ptr/Count (funnelWidth / 2)  PipeInBin(dataWidth=32) output
    METHOD/Action input$enq__ENA ( Bit(dataWidth) v ) if ((((((input[((__inst$Genvar1 * 2) + 1)]$enq__ENA) != (0)) ^ (1))) != (0))) {
        INSTANTIATE :__inst$Genvar1,(0),((__inst$Genvar1 < (funnelWidth / 2))),((__inst$Genvar1 + 1)),(((__inst$Genvar1 * 2) + 1)),FOR$__DYNFORBODY__0__ENA
    }
    METHOD/Action input$enq__ENA ( Bit(dataWidth) v ) if ((((((input[((__inst$Genvar1 * 2) + 1)]$enq__ENA) != (0)) ^ (1))) != (0))) {
        INSTANTIATE :__inst$Genvar1,(0),((__inst$Genvar1 < (funnelWidth / 2))),((__inst$Genvar1 + 1)),((__inst$Genvar1 * 2)),FOR$__DYNFORBODY__2__ENA
    }
    METHOD/Action FOR$__DYNFORBODY__0__ENA ( Bit(32) __inst$Genvar1 , Bit(dataWidth) input$enq$v ) {
        CALL/Action :output[__inst$Genvar1]$enq__ENA{input$enq$v}
    }
    METHOD/Action FOR$__DYNFORBODY__2__ENA ( Bit(32) __inst$Genvar1 , Bit(dataWidth) input$enq$v ) {
        CALL/Action :output[__inst$Genvar1]$enq__ENA{input$enq$v}
    }
}
