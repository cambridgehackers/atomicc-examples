STRUCT NOCDataH  {
    FILE atomicc_OC_h
    FIELD Bit(16) length
    FIELD Bit(128) data
}
INTERFACE AsyncControlIfc  {
    FILE atomicc_OC_h
    FIELD/input Bit(1) CLK
    FIELD/input Bit(1) nRST
    FIELD/input Bit(1) start
    FIELD/input Bit(1) end
    FIELD/input Bit(1) clear
    FIELD/output Bit(1) out
    FIELD/output Bit(1) done
}
INTERFACE FifoPIfc(width=32)  {
    FILE fifo_OC_h
    INTERFACE PipeIn(width=32) in
    INTERFACE/Ptr PipeIn(width=32) out
}
INTERFACE FunnelBaseIfc(funnelWidth=4,width=32)  {
    FILE funnel_OC_h
    INTERFACE/Count funnelWidth  PipeIn(width=32) in
    INTERFACE/Ptr PipeIn(width=32) out
}
INTERFACE FunnelBaseIfc(funnelWidth=99,width=32)  {
    FILE funnel_OC_h
    INTERFACE/Count funnelWidth  PipeIn(width=32) in
    INTERFACE/Ptr PipeIn(width=32) out
}
INTERFACE PipeIn(width=32)  {
    FILE atomicc_OC_h
    METHOD/Action enq__ENA ( Bit(width) v )
}
INTERFACE SelectIndexIfc(funnelWidth=20,width=14)  {
    FILE atomicc_OC_h
    FIELD Bit(14) out
    FIELD/Ptr/Count funnelWidth  Bit(14) in
    FIELD Bit(5) index
}
EMODULE AsyncControl AsyncControlIfc {
    FILE atomicc_OC_h
}
EMODULE Dummy PipeIn(width=32) {
    FILE atomicc_OC_h
}
EMODULE FifoPBase(width=32) FifoPIfc(width=32) {
    FILE fifo_OC_h
}
EMODULE FunnelBase(funnelWidth=4,width=32) FunnelBaseIfc(funnelWidth=4,width=32) {
    FILE funnel_OC_h
}
EMODULE FunnelBufferedBase(funnelWidth=99,width=32) FunnelBaseIfc(funnelWidth=99,width=32) {
    FILE funnel_OC_h
}
EMODULE/Verilog SelectIndex(funnelWidth=20,width=14) SelectIndexIfc(funnelWidth=20,width=14) {
    FILE atomicc_OC_h
}
MODULE FunnelBufferedBase(funnelWidth=4,width=32) FunnelBaseIfc(funnelWidth=4,width=32) {
    FILE funnel_OC_cpp
    INTERFACECONNECT base$out out PipeIn(width=32)
    FIELD/Count funnelWidth  FifoPBase(width=32) buffer
    FIELD FunnelBase(funnelWidth=4,width=32) base
    METHOD/Action FOR$0Body__ENA ( Bit(32) __inst$Genvar1 ) {
        INTERFACECONNECT buffer$in[__inst$Genvar1] in[__inst$Genvar1] PipeIn(width=32)
        INTERFACECONNECT base$in[__inst$Genvar1] buffer$out[__inst$Genvar1] PipeIn(width=32)
    }
    METHOD/Rule/Action RULE$init__ENA {
        GENERATE :__inst$Genvar1,(0),((__inst$Genvar1 < funnelWidth)),((__inst$Genvar1 + 1)),FOR$0Body__ENA
    }
}
