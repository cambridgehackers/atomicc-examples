EMODULE l_struct_OC_NOCData {
    FIELD Bit(128) data
}
INTERFACE l_ainterface_OC_PipeIn {
    METHOD/Action enq__ENA ( l_struct_OC_NOCData v )
}
INTERFACE l_ainterface_OC_PipeInB {
    METHOD/Action enq__ENA ( Bit(32) v , Bit(16) length )
}
INTERFACE l_ainterface_OC_PipeInH {
    METHOD/Action enq__ENA ( l_struct_OC_NOCData v , Bit(16) length )
}
INTERFACE l_ainterface_OC_VBeat$__PARAM__$width$32 {
    METHOD/Action beat__ENA ( Bit(32) v , Bit(1) last )
}
INTERFACE l_ainterface_OC_VsimInterface {
    FIELD/input Bit(1) CLK
    FIELD/input Bit(1) nRST
    FIELD/input Bit(1) CLK_derivedClock
    FIELD/input Bit(1) nRST_derivedReset
    FIELD/input Bit(1) CLK_sys_clk
}
EMODULE UserTop {
    INTERFACE l_ainterface_OC_PipeInB write
    INTERFACE/Ptr l_ainterface_OC_PipeInB read
}
EMODULE VsimReceive$__PARAM__$width$32 {
    INTERFACE/Ptr l_ainterface_OC_VBeat$__PARAM__$width$32 _
}
EMODULE VsimSend$__PARAM__$width$32 {
    INTERFACE l_ainterface_OC_VBeat$__PARAM__$width$32 _
}
EMODULE l_top {
    INTERFACE l_ainterface_OC_PipeIn request
    INTERFACE/Ptr l_ainterface_OC_PipeInH indication
}
MODULE VsimTop {
    INTERFACECONNECT readUser user$read l_ainterface_OC_PipeInB
    INTERFACECONNECT sink_0$_ writeUser l_ainterface_OC_VBeat$__PARAM__$width$32
    INTERFACE l_ainterface_OC_VsimInterface _
    INTERFACE l_ainterface_OC_PipeInB readUser
    FIELD UserTop user
    INTERFACE l_ainterface_OC_VBeat$__PARAM__$width$32 writeUser
    FIELD VsimReceive$__PARAM__$width$32 sink_0
    FIELD VsimSend$__PARAM__$width$32 source_0
    METHOD/Action readUser$enq__ENA ( Bit(32) v , Bit(16) length ) {
        CALL/Action :source_0$beat__ENA{readUser$enq$v,(readUser$enq$length) == (1)}
    }
    METHOD/Action writeUser$beat__ENA ( Bit(32) v , Bit(1) last ) {
        CALL/Action :user$write$enq__ENA{writeUser$beat$v,(writeUser$beat$last) ? (1) : (2)}
    }
}
