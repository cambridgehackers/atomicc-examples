STRUCT NOCDataH  {
    FIELD Bit(16) length
    FIELD Bit(128) data
}
INTERFACE FunnelBaseIfc(funnelWidth=99,width=32)  {
    INTERFACE/Count funnelWidth  PipeIn_OC_0 in
    INTERFACE/Ptr PipeIn_OC_1 out
}
INTERFACE IobufVecPins(iovecWidth=999999)  {
    FIELD/inout Bit(999999) IO
    FIELD/input Bit(999999) I
    FIELD/output Bit(999999) O
    FIELD/input Bit(1) T
}
INTERFACE MIOBUF  {
    FIELD/parameter Bit(32) DRIVE
    FIELD/input Bit(1) I
    FIELD/Ptr/parameter Bit(8) IBUF_LOW_PWR
    FIELD/inout Bit(1) IO
    FIELD/Ptr/parameter Bit(8) IOSTANDARD
    FIELD/output Bit(1) O
    FIELD/Ptr/parameter Bit(8) SLEW
    FIELD/input Bit(1) T
}
INTERFACE PipeIn  {
    METHOD/Action enq__ENA ( NOCDataH v )
}
INTERFACE PipeIn_OC_0  {
    METHOD/Action enq__ENA ( Bit(32) v )
}
INTERFACE PipeIn_OC_1  {
    METHOD/Action enq__ENA ( Bit(32) v )
}
INTERFACE l_topIfc  {
    INTERFACE PipeIn request
    INTERFACE/Ptr PipeIn indication
}
EMODULE FunnelBufferedBase(funnelWidth=99,width=32) FunnelBaseIfc(funnelWidth=99,width=32) {
}
EMODULE IOBUF MIOBUF {
}
EMODULE l_top l_topIfc {
}
MODULE IobufVec(iovecWidth=999999) IobufVecPins(iovecWidth=999999) {
    FIELD/Count iovecWidth  IOBUF iobufs
    METHOD/Action FOR$0Body__ENA ( Bit(32) __inst$Genvar1 ) {
        LET Bit(1) :iobufs[__inst$Genvar1].T = T
        LET Bit(1) :iobufs[__inst$Genvar1].IO = __bitsubstr{IO,__inst$Genvar1,1}
        LET Bit(1) :iobufs[__inst$Genvar1].I = __bitsubstr{I,__inst$Genvar1,1}
        LET Bit(1) :iobufs[__inst$Genvar1].O = __bitsubstr{O,__inst$Genvar1,1}
    }
    METHOD/Rule/Action RULE$iobufs__ENA {
        GENERATE :__inst$Genvar1,(0),((__inst$Genvar1 < iovecWidth)),((__inst$Genvar1 + 1)),FOR$0Body__ENA
    }
}
