STRUCT NOCDataH  {
    FIELD Bit(16) length
    FIELD Bit(128) data
}
INTERFACE PastAssertIfc(MAX_AMOUNT=22,F_TESTID=9999)  {
    METHOD/Action startSignal__ENA
    METHOD busy Bit(1)
}
INTERFACE PipeIn  {
    METHOD/Action enq__ENA ( NOCDataH v )
}
INTERFACE l_topIfc  {
    INTERFACE PipeIn request
    INTERFACE/Ptr PipeIn indication
}
EMODULE l_top l_topIfc {
}
MODULE PastAssert(MAX_AMOUNT=22,F_TESTID=9999) PastAssertIfc(MAX_AMOUNT=22,F_TESTID=9999) {
    FIELD Bit(16) counter
    FIELD Bit(1) fPastValid
    METHOD/Action startSignal__ENA if (((counter) == (0))) {
        STORE :counter = (22) - (1)
    }
    METHOD busy Bit(1) = (((counter) != (0)))
    METHOD/Rule/Action RULE$decRule__ENA if (((counter) != (0))) {
        STORE :counter = (counter) + (-1)
    }
    METHOD/Rule/Action RULE$verifyRule__ENA {
        ASSERT :assert(counter < MAX_AMOUNT)
        ASSERT ((9999) == (1)):assert(! startSignal__ENA)
        ASSERT ((9999) == (1)):assert($past ( counter == 0 ))
        ASSERT ((9999) == (2)):assert(! startSignal__ENA)
        ASSERT ((9999) == (2)):assert(counter == 0)
        CALL ((9999) == (3)):$past{startSignal__ENA}
        CALL (($past{startSignal__ENA}) & ((9999) == (3))):$past{counter}
        ASSERT ((($past{counter}) == (0)) & (($past{startSignal__ENA}) & ((9999) == (3)))):assert(counter == 0xffff)
        STORE (((9999) == (4)) & ((((($past{counter}) == (0)) & (($past{startSignal__ENA}) & ((9999) == (3)))) | ((((($past{counter}) == (0)) ^ 1) & (($past{startSignal__ENA}) & ((9999) == (3)))) | ((($past{startSignal__ENA}) ^ 1) & ((9999) == (3))))) | (((9999) == (3)) ^ 1))):fPastValid = (1) != (0)
        CALL ((fPastValid) & (((9999) == (4)) & ((((9999) == (4)) & ((((($past{counter}) == (0)) & (($past{startSignal__ENA}) & ((9999) == (3)))) | ((((($past{counter}) == (0)) ^ 1) & (($past{startSignal__ENA}) & ((9999) == (3)))) | ((($past{startSignal__ENA}) ^ 1) & ((9999) == (3))))) | (((9999) == (3)) ^ 1))) | ((((9999) == (4)) ^ 1) & ((((($past{counter}) == (0)) & (($past{startSignal__ENA}) & ((9999) == (3)))) | ((((($past{counter}) == (0)) ^ 1) & (($past{startSignal__ENA}) & ((9999) == (3)))) | ((($past{startSignal__ENA}) ^ 1) & ((9999) == (3))))) | (((9999) == (3)) ^ 1)))))):$past{startSignal__ENA}
        CALL (($past{startSignal__ENA}) & ((fPastValid) & (((9999) == (4)) & ((((9999) == (4)) & ((((($past{counter}) == (0)) & (($past{startSignal__ENA}) & ((9999) == (3)))) | ((((($past{counter}) == (0)) ^ 1) & (($past{startSignal__ENA}) & ((9999) == (3)))) | ((($past{startSignal__ENA}) ^ 1) & ((9999) == (3))))) | (((9999) == (3)) ^ 1))) | ((((9999) == (4)) ^ 1) & ((((($past{counter}) == (0)) & (($past{startSignal__ENA}) & ((9999) == (3)))) | ((((($past{counter}) == (0)) ^ 1) & (($past{startSignal__ENA}) & ((9999) == (3)))) | ((($past{startSignal__ENA}) ^ 1) & ((9999) == (3))))) | (((9999) == (3)) ^ 1))))))):$past{counter}
        ASSERT ((($past{counter}) == (0)) & (($past{startSignal__ENA}) & ((fPastValid) & (((9999) == (4)) & ((((9999) == (4)) & ((((($past{counter}) == (0)) & (($past{startSignal__ENA}) & ((9999) == (3)))) | ((((($past{counter}) == (0)) ^ 1) & (($past{startSignal__ENA}) & ((9999) == (3)))) | ((($past{startSignal__ENA}) ^ 1) & ((9999) == (3))))) | (((9999) == (3)) ^ 1))) | ((((9999) == (4)) ^ 1) & ((((($past{counter}) == (0)) & (($past{startSignal__ENA}) & ((9999) == (3)))) | ((((($past{counter}) == (0)) ^ 1) & (($past{startSignal__ENA}) & ((9999) == (3)))) | ((($past{startSignal__ENA}) ^ 1) & ((9999) == (3))))) | (((9999) == (3)) ^ 1)))))))):assert(counter == 0xffff)
    }
}
