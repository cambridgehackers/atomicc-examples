INTERFACE FunnelBaseIfc(funnelWidth=99,width=32)  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    INTERFACE/Count funnelWidth  PipeIn(width=32) in
    INTERFACE/Ptr PipeIn(width=32) out
}
INTERFACE PastAssertIfc(MAX_AMOUNT=22,F_TESTID=9999)  {
    FILE pastassert_OC_cpp
    METHOD/Action startSignal__ENA
    METHOD busy Bit(1)
}
INTERFACE PipeIn(width=32)  {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
    METHOD/Action enq__ENA ( Bit(width) v )
}
EMODULE FunnelBufferedBase(funnelWidth=99,width=32) FunnelBaseIfc(funnelWidth=99,width=32) {
    FILE _OC__OC__PC__OC__OC__PC_lib_PC_atomicc_OC_h
}
MODULE PastAssert(MAX_AMOUNT=22,F_TESTID=9999) PastAssertIfc(MAX_AMOUNT=22,F_TESTID=9999) {
    FILE pastassert_OC_cpp
    FIELD Bit(16) counter
    FIELD Bit(1) fPastValid
    METHOD/Action startSignal__ENA if (((counter) == (0))) {
        STORE :counter = (22) - (1)
    }
    METHOD busy Bit(1) = (((counter) != (0)))
    METHOD/Rule/Action RULE$decRule__ENA if (((counter) != (0))) {
        STORE :counter = (counter) + (-1)
    }
    METHOD/Rule/Action RULE$verifyRule__ENA {
        ASSERT :assert((counter) < (22))
        ASSERT ((9999) == (1)):assert(((startSignal__ENA) != (0)) ^ (1))
        ASSERT ((9999) == (1)):assert($past{(counter) == (0)})
        ASSERT ((9999) == (2)):assert(((startSignal__ENA) != (0)) ^ (1))
        ASSERT ((9999) == (2)):assert((counter) == (0))
        ASSERT ((($past{counter}) == (0)) & ((($past{startSignal__ENA}) != (0)) & ((9999) == (3)))):assert((counter) == (-1))
        STORE ((9999) == (4)):fPastValid = (1) != (0)
        ASSERT ((($past{counter}) == (0)) & ((($past{startSignal__ENA}) != (0)) & ((fPastValid) & ((9999) == (4))))):assert((counter) == (-1))
    }
}
