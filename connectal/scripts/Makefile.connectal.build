# Copyright (c) 2014 Quanta Research Cambridge, Inc
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
#
# File: Makefile.build
#

THISDIR := $(abspath $(dir $(lastword $(MAKEFILE_LIST))))
CONNECTALDIR = $(THISDIR)/../../../connectal
VDIR = $(THISDIR)/../../verilog
V?=0
ifeq ($(V),0)
  Q=@
  BSC_QUIET=-no-show-compiles
  CONNECTAL_NDK_PARAM="NDK_HOST_ECHO=true"
  FPGAMAKE_VERBOSE=
else
  Q=
  BSC_QUIET=
  CONNECTAL_NDK_PARAM=
  FPGAMAKE_VERBOSE=-v
endif
NDK_OBJCOPY=$(shell $(NDKPATH)ndk-which objcopy)

NOS := $(shell uname)
ifneq ($(XILINX),)
ifeq ($(OS),android)
OBJCOPY?=$(NDK_OBJCOPY)
BINFILE?=bin/mkTop.xdevcfg.bin.gz
else #!android
OBJCOPY?=$(TOOLCHAIN)objcopy
BINFILE?=bin/mkTop.bin.gz
endif #!android
else #!XILINX
OBJCOPY?= objcopy
BINFILE?=bin/mkTop.sof.gz
endif #!XILINX
OBJCOPY?=true
HAS_APPLICATION= $(shell test -f jni/Ubuntu.mk; echo $$? )

CONNECTAL_EXENAME?=ubuntu.exe
CONNECTAL_EXENAME2?=ubuntu.exe2
ifneq ($(CONNECTAL_SHARED),)
EXENAME=connectal.so
else
EXENAME=$(CONNECTAL_EXENAME)
endif
EXENAME2=$(CONNECTAL_EXENAME2)

ifeq ($(CONNECTAL_DEBUG),1)
GDB=gdb
GDB2=gdb
else
GDB= LD_PRELOAD=libSegFault.so SEGFAULT_USE_ALTSTACK=1 SEGFAULT_OUTPUT_NAME=bin/bsimexe-segv-output.txt
GDB2= LD_PRELOAD=libSegFault.so SEGFAULT_USE_ALTSTACK=1 SEGFAULT_OUTPUT_NAME=bin/bsimexe2-segv-output.txt
endif

GDB_BSIM= LD_PRELOAD=libSegFault.so SEGFAULT_USE_ALTSTACK=1 SEGFAULT_OUTPUT_NAME=bin/bsim-segv-output.txt


PROF_FLAGS= #-pg
export SIM_CFLAGS= $(CFLAGS_PROJECT) -fPIC -Ijni -I$(DTOP) -I$(DTOP)/.. -D__ATOMICC__ -I $(CONNECTALDIR)/cpp -I $(CONNECTALDIR) -I $(CONNECTALDIR)/lib/json -O $(PROF_FLAGS)
export SIM_CXXFLAGS= $(CXXFLAGS_PROJECT) -fPIC -Ijni -I$(DTOP) -I$(DTOP)/.. -D__ATOMICC__ -I $(CONNECTALDIR)/cpp -I $(CONNECTALDIR) -O $(PROF_FLAGS)
SIM_CXX_COMMON = $(addprefix $(CONNECTALDIR)/cpp/, TlpReplay.cpp BsimDma.cpp sock_utils.c portalPrintf.c poller.cpp transportSocket.c transportHardware.c portal.c)
SIM_CXX_LOCAL = $(SIM_CXX_COMMON) $(DTOP)/../jni/GeneratedCppCallbacks.cpp
#ifeq ($(HAS_APPLICATION),1)
#SIM_CXX_LOCAL += $(DTOP)/../jni/GeneratedCppCallbacks.cpp
#endif

VIVADO=$(shell which vivado)
ifneq ($(VIVADO), )
export VIVADODIR=$(shell dirname $(shell dirname $(VIVADO))))
VIVADOFLAGS= -notrace
XVLOGFLAGS =
endif

MODELSIM=$(shell which vsim)
ifneq ($(MODELSIM), )
endif

QUARTUS=$(shell which quartus_sh)
ifneq ($(QUARTUS), )
export QUARTUSDIR=$(shell dirname $(shell dirname $(QUARTUS)))
endif

all: exe bits extratarget

extratarget::
# placeholder for variant targets

exe: $(EXENAME)
	$(Q)if [ -f bin/$(EXENAME) -a -f "$(PRINTF_DATAFILE)" ]; then $(OBJCOPY) --remove-section printfdata bin/$(EXENAME); fi
	$(Q)if [ -f bin/$(EXENAME) -a -f "$(PRINTF_DATAFILE)" ]; then $(OBJCOPY) --add-section printfdata=$(PRINTF_DATAFILE) bin/$(EXENAME); fi

ubuntu.exe: prepare_bin_target
	@echo "ubuntu.exe"
	$(Q)cd jni; $(MAKE) --no-print-directory -f Ubuntu.mk ubuntu.exe
	$(Q)cp -v jni/ubuntu.exe bin
	@echo "ubuntu.exe done"

ifneq ($(CONNECTAL_NOHARDWARE),1)
BITS_DEPENDENCES ?= $(CONNECTAL_BITS_DEPENDENCES)
endif #hw/mkTop.bit prepare_bin_target

bits: $(BITS_DEPENDENCES) prepare_bin_target
ifneq ($(XILINX),)
ifeq ($(OS),android)
	@echo "zipping android"
	$(CONNECTALDIR)/scripts/reorderbytes.py hw/mkTop.bin bin/mkTop.xdevcfg.bin
	gzip -f bin/mkTop.xdevcfg.bin
else
ifneq ($(SIMULATION),)
	@echo "not zipping xilinx"
else
ifneq ($(AWSF1),)
	@echo "not zipping awsf1"
else
	@echo "zipping xilinx"
	gzip -c hw/mkTop.bin > bin/mkTop.bin.gz
endif # AWSF1
endif #xsim
endif #android
else #!xilinx
ifneq ($(ALTERA),)
	gzip -c $(MKTOP).sof > bin/$(MKTOP).sof.gz
endif #
endif #!xilinx
	$(Q)if [ -f bin/$(EXENAME) -a -f "$(BINFILE)" ]; then $(OBJCOPY) --remove-section fpgadata bin/$(EXENAME); fi
	$(Q)if [ -f bin/$(EXENAME) -a -f "$(BINFILE)" ]; then $(OBJCOPY) --add-section fpgadata=$(BINFILE) bin/$(EXENAME); fi
	$(Q)if [ -f Impl/TopDown/top-post-route.dcp ]; then cp -f Impl/TopDown/top-post-route.dcp bin; fi
	$(Q)if [ -f Impl/TopDown/top-post-route-timing-summary.rpt ]; then $(CONNECTALDIR)/scripts/check-timing.py Impl/TopDown/top-post-route-timing-summary.rpt; fi
	$(Q)if [ -f Impl/TopDown/top-post-route-timing-summary.txt ]; then $(CONNECTALDIR)/scripts/check-timing.py Impl/TopDown/top-post-route-timing-summary.txt; fi

android.exe: prepare_bin_target
	+ndk-build $(CONNECTAL_NDK_PARAM)
	$(Q)cp -fv libs/armeabi/android.exe bin
	$(Q)if [ -f bin/mkTop.xdevcfg.bin.gz ]; then $(NDK_OBJCOPY) --remove-section fpgadata bin/android.exe; fi
	$(Q)if [ -f bin/mkTop.xdevcfg.bin.gz ]; then $(NDK_OBJCOPY) --add-section fpgadata=bin/mkTop.xdevcfg.bin.gz bin/android.exe; fi

android.debug.exe: prepare_bin_target
	+ndk-build $(CONNECTAL_NDK_PARAM) -B V=1 NDK_DEBUG=1
	$(Q)cp -v libs/armeabi/android.exe bin
	$(Q)if [ -f bin/mkTop.xdevcfg.bin.gz ]; then $(NDK_OBJCOPY) --remove-section fpgadata bin/android.exe; fi
	$(Q)if [ -f bin/mkTop.xdevcfg.bin.gz ]; then $(NDK_OBJCOPY) --add-section fpgadata=bin/mkTop.xdevcfg.bin.gz bin/android.exe; fi
    
android.exe2: prepare_bin_target
	+ndk-build $(CONNECTAL_NDK_PARAM)
	$(Q)cp -fv libs/armeabi/android.exe2 bin

RUN_SCRIPT?=$(CONNECTAL_RUN_SCRIPT)

run:
ifeq ($(CONNECTAL_SHARED),1)
	$(RUN_BSC_LM_LICENSE_FILE) $(GDB) $(RUN_SCRIPT) ./bin/$(EXENAME2) $(RUN_ARGS); retcode=$$?; exit $$retcode
else
    ifeq ($(RUNSOURCE2),)
	$(RUN_BSC_LM_LICENSE_FILE) $(GDB) $(RUN_SCRIPT) ./bin/$(EXENAME) $(RUN_ARGS); retcode=$$?; exit $$retcode
    else
	$(RUN_BSC_LM_LICENSE_FILE) $(GDB2) $(RUN_SCRIPT) ./bin/$(EXENAME2)& bsim2pid=$$!; $(RUN_SCRIPT) $(GDB) ./bin/$(EXENAME) $(RUN_ARGS); retcode=$$?; kill $$bsim2pid; exit $$retcode
    endif
endif # CONNECTAL_SHARED


define SIM_C_RULE
$1/$(notdir $(basename $3)).o: $3
	mkdir -p $1
	$(CC) -c $2 -o $1/$(notdir $(basename $3)).o $3
endef
define SIM_CXX_RULE
$1/$(notdir $(basename $3)).o: $3
	mkdir -p $1
	$(CXX) -c $2 -o $1/$(notdir $(basename $3)).o $3
endef

$(foreach src, $(filter %.c, $(SIM_CXX_LOCAL) $(SIM_CXX_PROJECT)), $(eval $(call SIM_C_RULE, $(DTOP)/lib, $(SIM_CFLAGS), $(src))))
$(foreach src, $(filter %.cpp, $(SIM_CXX_LOCAL) $(SIM_CXX_PROJECT)), $(eval $(call SIM_CXX_RULE, $(DTOP)/lib, $(SIM_CXXFLAGS), $(src))))
SIM_OBJECTS = $(addprefix $(DTOP)/lib/, $(addsuffix .o, $(basename $(notdir $(SIM_CXX_LOCAL) $(SIM_CXX_PROJECT)))))

VIVADODIR=$(realpath $(shell dirname $(VIVADO))/..)
XSC_CFLAGS= -Wa,-W -fPIC -m64  -I"$(VIVADODIR)/data/xsim/include" -DSYSTEM_VERILOG -DBOARD_xsim -I$(CONNECTALDIR)/cpp -I$(CONNECTALDIR) -Ijni

XVLOGDEFINES = $(subst -D,-d,$(BSVDEFINES))

SVLOG = $(addprefix -svlog $(CONNECTALDIR)/verilog/, xsimtop.sv XsimDmaReadWrite.sv XsimLink.sv XsimSink.sv XsimSource.sv)

XCIDIRS = $(basename $(XCIFILES))
VLOG_PRJ_FILE = $(wildcard $(addsuffix /xsim/vlog.prj, $(XCIDIRS)))
VHDL_PRJ_FILE = $(wildcard $(addsuffix /xsim/vhdl.prj, $(XCIDIRS)))
# phony targets to trigger calls to xvlog and xvhdl
VLOG_PRJ_BLD  = $(addsuffix .bld, $(VLOG_PRJ_FILE))
VHDL_PRJ_BLD  = $(addsuffix .bld, $(VHDL_PRJ_FILE))

%/vlog.prj.bld: %/vlog.prj
	sed -i s/xil_defaultlib/work/ $(*)/vlog.prj
	xvlog $(XVLOGFLAGS) -prj $(*)/vlog.prj

%/vhdl.prj.bld: %/vhdl.prj
	sed -i s/xil_defaultlib/work/ $(*)/vhdl.prj
	xvhdl $(XVLOGFLAGS) -prj $(*)/vhdl.prj

xsim: verilog $(SIM_OBJECTS) $(VLOG_PRJ_BLD) $(VHDL_PRJ_BLD)
	xvlog $(XVLOGFLAGS) $(XVLOGDEFINES) $(VERILOG_PATH:%=--sourcelibdir %) --sourcelibext .v verilog/*.v $(VERILOG_FILES)
ifneq ($(VHDL_FILES),)
	xvhdl $(XVHDLFLAGS) $(VHDL_FILES)
endif
	xvlog $(XVLOGDEFINES) --sv $(CONNECTALDIR)/verilog/*.sv ## not needed because these all get passed to xelab because they use DPI
	ls -l $(SIM_OBJECTS)
	xsc -v  -cc gcc -link $(SIM_OBJECTS) -o xsimtop || echo xsc failed
	xelab -timescale 1ns/1ps --stats $(XVLOGDEFINES) -cc gcc $(SVLOG) --dpiheader XsimTop.h --debug wave -L unisim -L unifast -L unimacro work.xsimtop -sv_lib xsimtop || echo xelab failed
	true

CVC64 ?= cvc64
CVC_DEFINES = $(addprefix +define+, $(BSVDEFINES_LIST))
CVC_TRACE_ARGS = +printstats +fstvars
CVC_ARGS ?= 
CVC_SOURCES = $(addprefix -v , $(wildcard $(BLUESPECDIR)/Verilog/*.v $(DTOP)/verilog/*.v))
cvcsim: bin/cvcsim

bin/cvcsim: $(DTOP)/bin/libconnectal-sim.so verilog bin/cvcsim
	$(CVC64) $(CVC_DEFINES) $(CVC_ARGS) -y $(CONNECTALDIR)/verilog $(CVC_SOURCES) -sv $(CONNECTALDIR)/verilog/XsimSink.sv  $(CONNECTALDIR)/verilog/XsimSource.sv $(CONNECTALDIR)/verilog/XsimDmaReadWrite.sv -sv $(CONNECTALDIR)/verilog/xsimtop.sv -sv_lib $(DTOP)/bin/libconnectal-sim.so -o bin/cvcsim

vlsim:  $(DTOP)/obj_dir/vlsim

VERILATOR_ARGS?= -O3 -CFLAGS "-I$(CONNECTALDIR)/cpp -I$(DTOP)/jni -I$(DTOP) -D__ATOMICC__ -O $(PROF_FLAGS)" -LDFLAGS "-O $(PROF_FLAGS)" --profile-cfuncs --output-split 20000
VERILATOR_ARGS += $(VERILATOR_PROJECT_ARGS)
ACCSIM=$(ATOMICCDIR)/simulation

$(DTOP)/obj_dir/vlsim.mk: $(DTOP)/bin/libconnectal-sim.so verilog
	rm -fr $(DTOP)/obj_dir
	verilator -o vlsim --prefix vlsim $(VERILATOR_ARGS) -cc -exe $(CONNECTALSDIR)/../lib/generated/VsimTop.sv -DMainClockPeriod=4 -DDerivedClockPeriod=4 --top-module VsimTop $(VERILOG_PATH:%=-y %) -Wno-fatal $(ACCSIM)/cpp/verilatortop.cpp -y $(ACCSIM)/verilog -LDFLAGS -L$(DTOP)/bin

$(DTOP)/obj_dir/vlsim: $(DTOP)/obj_dir/vlsim.mk
	+$(MAKE) USER_LDLIBS="-lconnectal-sim -lpthread" VM_PARALLEL_BUILDS=1 -C obj_dir -f vlsim.mk
	cp obj_dir/vlsim bin/vlsim

vcssim:  prepare_bin_target bin/simv

VCS_DEFINES = $(addprefix +define+, $(BSVDEFINES_LIST))
VCS_ARGS?= -CFLAGS "-I$(CONNECTALDIR)/cpp -I$(CONNECTALDIR) -I$(DTOP)/jni -I$(DTOP) -D__ATOMICC__"
VCS_ARGS += +define+SVA_ON -assert svaext+enable_diag
VCS_ARGS += -debug_acc+all
VCS_ARGS += -kdb -fsdb
VCS_ARGS += +lint=all +lint=noUI +lint=noNS
VCS_ARGS += +define+__ATOMICC__ $(ACCSIM)/cpp/vcstop.cpp
VCS_ARGS += $(VCS_PROJECT_ARGS)
#ifeq ($(HAS_APPLICATION),1)
#VCSTOP=$(ACCSIM)/verilog/VcsProgram.sv $(ACCSIM)/cpp/vcstop.cpp
#else
#VCSTOP=../generated/*.sv
#endif
#ifneq ($(HAS_APPLICATION),1)
#VCS_EXTRA_FLAGS = +define+SVA_ON +define+FORMAL -assert svaext+enable_diag -debug_acc+all \
#	-kdb -fsdb
#-debug_acc+dmptf -debug_region+cell+encrypt
#endif
#VCS_EXTRA_FLAGS = -debug_all

bin/simv: verilog
	vcs -full64  -sverilog $(VCS_DEFINES) $(VCS_ARGS) -o $(DTOP)/bin/simv \
		$(CONNECTALDIR)/verilog/xsimtop.sv $(SIM_CXX_LOCAL) \
		+libext+.v+.sv $(VERILOG_PATH:%=-y %) $(VERILOG_PATH:%=+incdir+%)

verdi:
	verdi -simflow -simBin bin/simv -ssf novas.fsdb

MODELSIMDIR=$(realpath $(dir $(MODELSIM))/..)
VSIM_CFLAGS= $(CFLAGS_PROJECT) -Wa,-W -fPIC -m64 -I"$(MODELSIMDIR)/include" -DSYSTEM_VERILOG -DBOARD_vsim -I$(CONNECTALDIR)/cpp -I$(CONNECTALDIR) -Ijni -I$(DTOP) -I$(DTOP)/.. -D__ATOMICC__
VSIM_CXXFLAGS= $(CXXFLAGS_PROJECT) -Wa,-W -fPIC -m64 -I"$(MODELSIMDIR)/include" -DSYSTEM_VERILOG -DBOARD_vsim -I$(CONNECTALDIR)/cpp -I$(CONNECTALDIR) -Ijni -I$(DTOP) -I$(DTOP)/.. -D__ATOMICC__

$(foreach src, $(filter %.c, $(SIM_CXX_LOCAL) $(SIM_CXX_PROJECT)), $(eval $(call SIM_C_RULE, vsim.dir/xsc, $(VSIM_CFLAGS), $(src))))
$(foreach src, $(filter %.cpp, $(SIM_CXX_LOCAL) $(SIM_CXX_PROJECT)), $(eval $(call SIM_CXX_RULE, vsim.dir/xsc, $(VSIM_CXXFLAGS), $(src))))
VSIM_OBJECTS = $(addprefix vsim.dir/xsc/, $(addsuffix .o, $(basename $(notdir $(SIM_CXX_LOCAL) $(SIM_CXX_PROJECT)))))

VSIM_DEFINES = $(subst -D ,+define+,$(BSVDEFINES))
VSIM_SV = $(addprefix -sv $(CONNECTALDIR)/verilog/, xsimtop.sv XsimDmaReadWrite.sv XsimLink.sv XsimSink.sv XsimSource.sv)
SV_SEARCH_PATH = $(addprefix -y , $(VERILOG_PATH))
SV_SEARCH_PATH += $(addprefix -y , $(addsuffix /submodules, $(VERILOG_PATH)))
SV_SEARCH_PATH += $(addprefix -y , $(addsuffix /submodules/mentor, $(VERILOG_PATH)))
VSIM_LIBRARY_FILES += $(addprefix -sv $(QUARTUSDIR)/eda/sim_lib/, altera_lnsim.sv)
VSIM_LIBRARY_FILES += $(addprefix -v $(QUARTUSDIR)/eda/sim_lib/, altera_mf.v 220model.v sgate.v altera_primitives.v mentor/stratixv_atoms_ncrypt.v stratixv_atoms.v mentor/stratixv_hssi_atoms_ncrypt.v stratixv_hssi_atoms.v)
VSIM_MISC_FILES = $(addprefix -sv , $(MODELSIM_FILES))

vsim: verilog $(VSIM_OBJECTS)
	rm -rf work
	vlib work
	vlog -timescale 1ns/1ps -dpiheader XsimTop.h $(VSIM_DEFINES) $(VSIM_SV) $(VSIM_LIBRARY_FILES) $(VSIM_MISC_FILES) +libext+.sv+.v $(SV_SEARCH_PATH) $(VERILOG_PATH:%=-y %) -sv verilog/*.v
	$(CXX) $(CXXFLAGS_PROJECT) -O -g -I$(DTOP)/jni -shared -fPIC -g -o xsimtop.so $(VSIM_OBJECTS)


$(DTOP)/bin/libconnectal-sim.so: $(SIM_OBJECTS) prepare_bin_target
	$(Q)mkdir -p $(DTOP)/bin
	$(CXX) -O -g -I$(DTOP)/jni -shared -fpic $(SIM_CXXFLAGS) -g -o $(DTOP)/bin/libconnectal-sim.so $(SIM_OBJECTS)

prepare_bin_target:
	$(Q)mkdir -p $(BOARD) bin jni hw

verilog:
# $(VFILE)
#	@echo "verilog"

$(BOARD)/hw/mkTop.bit: prepare_bin_target  $(BOARD)/fpgamake.mk
	$(Q)$(MAKE) -C $(BOARD) -f fpgamake.mk

